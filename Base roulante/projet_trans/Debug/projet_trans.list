
projet_trans.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f1c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  080070c0  080070c0  000170c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007474  08007474  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007474  08007474  00017474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800747c  0800747c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800747c  0800747c  0001747c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007480  08007480  00017480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007484  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  200001dc  08007660  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  08007660  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c933  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cd4  00000000  00000000  0002cb3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c30  00000000  00000000  0002e818  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b48  00000000  00000000  0002f448  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016586  00000000  00000000  0002ff90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009075  00000000  00000000  00046516  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c5f7  00000000  00000000  0004f58b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dbb82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000415c  00000000  00000000  000dbc00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080070a4 	.word	0x080070a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080070a4 	.word	0x080070a4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a19      	ldr	r2, [pc, #100]	; (8000fc8 <HAL_UART_RxCpltCallback+0x70>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d108      	bne.n	8000f7a <HAL_UART_RxCpltCallback+0x22>
		Reception_Deplacement(c2);
 8000f68:	4818      	ldr	r0, [pc, #96]	; (8000fcc <HAL_UART_RxCpltCallback+0x74>)
 8000f6a:	f000 fdb3 	bl	8001ad4 <Reception_Deplacement>
		//Deplacement_Clavier(c1);
		HAL_UART_Receive_IT(&huart2, c2,6);
 8000f6e:	2206      	movs	r2, #6
 8000f70:	4916      	ldr	r1, [pc, #88]	; (8000fcc <HAL_UART_RxCpltCallback+0x74>)
 8000f72:	4815      	ldr	r0, [pc, #84]	; (8000fc8 <HAL_UART_RxCpltCallback+0x70>)
 8000f74:	f002 fd01 	bl	800397a <HAL_UART_Receive_IT>
			HAL_UART_Transmit(&huart2,'\n',1,100);
			comm_Serial[0] = '\0';
		}
		HAL_UART_Receive_IT(&huart6, &lettre_Serial,1);
	}
}
 8000f78:	e022      	b.n	8000fc0 <HAL_UART_RxCpltCallback+0x68>
	else if(huart == &huart6){
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <HAL_UART_RxCpltCallback+0x78>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d11e      	bne.n	8000fc0 <HAL_UART_RxCpltCallback+0x68>
		if (lettre_Serial!='>'){
 8000f82:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <HAL_UART_RxCpltCallback+0x7c>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b3e      	cmp	r3, #62	; 0x3e
 8000f88:	d00c      	beq.n	8000fa4 <HAL_UART_RxCpltCallback+0x4c>
			HAL_UART_Transmit(&huart2,&lettre_Serial,1,100);
 8000f8a:	2364      	movs	r3, #100	; 0x64
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	4911      	ldr	r1, [pc, #68]	; (8000fd4 <HAL_UART_RxCpltCallback+0x7c>)
 8000f90:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <HAL_UART_RxCpltCallback+0x70>)
 8000f92:	f002 fc14 	bl	80037be <HAL_UART_Transmit>
			strcat(comm_Serial, lettre_Serial);
 8000f96:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <HAL_UART_RxCpltCallback+0x7c>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	480e      	ldr	r0, [pc, #56]	; (8000fd8 <HAL_UART_RxCpltCallback+0x80>)
 8000f9e:	f004 f817 	bl	8004fd0 <strcat>
 8000fa2:	e008      	b.n	8000fb6 <HAL_UART_RxCpltCallback+0x5e>
			HAL_UART_Transmit(&huart2,'\n',1,100);
 8000fa4:	2364      	movs	r3, #100	; 0x64
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	210a      	movs	r1, #10
 8000faa:	4807      	ldr	r0, [pc, #28]	; (8000fc8 <HAL_UART_RxCpltCallback+0x70>)
 8000fac:	f002 fc07 	bl	80037be <HAL_UART_Transmit>
			comm_Serial[0] = '\0';
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_UART_RxCpltCallback+0x80>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart6, &lettre_Serial,1);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	4906      	ldr	r1, [pc, #24]	; (8000fd4 <HAL_UART_RxCpltCallback+0x7c>)
 8000fba:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <HAL_UART_RxCpltCallback+0x78>)
 8000fbc:	f002 fcdd 	bl	800397a <HAL_UART_Receive_IT>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000374 	.word	0x20000374
 8000fcc:	20000268 	.word	0x20000268
 8000fd0:	200002f4 	.word	0x200002f4
 8000fd4:	200002f1 	.word	0x200002f1
 8000fd8:	20000204 	.word	0x20000204

08000fdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe0:	f000 fda4 	bl	8001b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe4:	f000 f826 	bl	8001034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe8:	f000 f9c6 	bl	8001378 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000fec:	f000 f946 	bl	800127c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000ff0:	f000 f96e 	bl	80012d0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000ff4:	f000 f8f4 	bl	80011e0 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8000ff8:	f000 f994 	bl	8001324 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000ffc:	f000 f87a 	bl	80010f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, c2,6);
 8001000:	2206      	movs	r2, #6
 8001002:	4907      	ldr	r1, [pc, #28]	; (8001020 <main+0x44>)
 8001004:	4807      	ldr	r0, [pc, #28]	; (8001024 <main+0x48>)
 8001006:	f002 fcb8 	bl	800397a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &lettre_Serial,1);
 800100a:	2201      	movs	r2, #1
 800100c:	4906      	ldr	r1, [pc, #24]	; (8001028 <main+0x4c>)
 800100e:	4807      	ldr	r0, [pc, #28]	; (800102c <main+0x50>)
 8001010:	f002 fcb3 	bl	800397a <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001014:	2100      	movs	r1, #0
 8001016:	4806      	ldr	r0, [pc, #24]	; (8001030 <main+0x54>)
 8001018:	f001 fd4c 	bl	8002ab4 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800101c:	e7fe      	b.n	800101c <main+0x40>
 800101e:	bf00      	nop
 8001020:	20000268 	.word	0x20000268
 8001024:	20000374 	.word	0x20000374
 8001028:	200002f1 	.word	0x200002f1
 800102c:	200002f4 	.word	0x200002f4
 8001030:	20000334 	.word	0x20000334

08001034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b094      	sub	sp, #80	; 0x50
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 0320 	add.w	r3, r7, #32
 800103e:	2230      	movs	r2, #48	; 0x30
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f003 fb14 	bl	8004670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	4b23      	ldr	r3, [pc, #140]	; (80010ec <SystemClock_Config+0xb8>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	4a22      	ldr	r2, [pc, #136]	; (80010ec <SystemClock_Config+0xb8>)
 8001062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001066:	6413      	str	r3, [r2, #64]	; 0x40
 8001068:	4b20      	ldr	r3, [pc, #128]	; (80010ec <SystemClock_Config+0xb8>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001074:	2300      	movs	r3, #0
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <SystemClock_Config+0xbc>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001080:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <SystemClock_Config+0xbc>)
 8001082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <SystemClock_Config+0xbc>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001094:	2302      	movs	r3, #2
 8001096:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001098:	2301      	movs	r3, #1
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800109c:	2310      	movs	r3, #16
 800109e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a4:	f107 0320 	add.w	r3, r7, #32
 80010a8:	4618      	mov	r0, r3
 80010aa:	f001 f867 	bl	800217c <HAL_RCC_OscConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80010b4:	f000 f988 	bl	80013c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b8:	230f      	movs	r3, #15
 80010ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f001 fac2 	bl	800265c <HAL_RCC_ClockConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80010de:	f000 f973 	bl	80013c8 <Error_Handler>
  }
}
 80010e2:	bf00      	nop
 80010e4:	3750      	adds	r7, #80	; 0x50
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40007000 	.word	0x40007000

080010f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08e      	sub	sp, #56	; 0x38
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001108:	f107 0320 	add.w	r3, r7, #32
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
 8001120:	615a      	str	r2, [r3, #20]
 8001122:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001124:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <MX_TIM2_Init+0xe8>)
 8001126:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800112a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15500;
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <MX_TIM2_Init+0xe8>)
 800112e:	f643 428c 	movw	r2, #15500	; 0x3c8c
 8001132:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001134:	4b29      	ldr	r3, [pc, #164]	; (80011dc <MX_TIM2_Init+0xe8>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800113a:	4b28      	ldr	r3, [pc, #160]	; (80011dc <MX_TIM2_Init+0xe8>)
 800113c:	2263      	movs	r2, #99	; 0x63
 800113e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001140:	4b26      	ldr	r3, [pc, #152]	; (80011dc <MX_TIM2_Init+0xe8>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001146:	4b25      	ldr	r3, [pc, #148]	; (80011dc <MX_TIM2_Init+0xe8>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800114c:	4823      	ldr	r0, [pc, #140]	; (80011dc <MX_TIM2_Init+0xe8>)
 800114e:	f001 fc51 	bl	80029f4 <HAL_TIM_Base_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001158:	f000 f936 	bl	80013c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001162:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001166:	4619      	mov	r1, r3
 8001168:	481c      	ldr	r0, [pc, #112]	; (80011dc <MX_TIM2_Init+0xe8>)
 800116a:	f001 fea3 	bl	8002eb4 <HAL_TIM_ConfigClockSource>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001174:	f000 f928 	bl	80013c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001178:	4818      	ldr	r0, [pc, #96]	; (80011dc <MX_TIM2_Init+0xe8>)
 800117a:	f001 fc66 	bl	8002a4a <HAL_TIM_PWM_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001184:	f000 f920 	bl	80013c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001190:	f107 0320 	add.w	r3, r7, #32
 8001194:	4619      	mov	r1, r3
 8001196:	4811      	ldr	r0, [pc, #68]	; (80011dc <MX_TIM2_Init+0xe8>)
 8001198:	f002 fa42 	bl	8003620 <HAL_TIMEx_MasterConfigSynchronization>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80011a2:	f000 f911 	bl	80013c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a6:	2360      	movs	r3, #96	; 0x60
 80011a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2200      	movs	r2, #0
 80011ba:	4619      	mov	r1, r3
 80011bc:	4807      	ldr	r0, [pc, #28]	; (80011dc <MX_TIM2_Init+0xe8>)
 80011be:	f001 fdb3 	bl	8002d28 <HAL_TIM_PWM_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80011c8:	f000 f8fe 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011cc:	4803      	ldr	r0, [pc, #12]	; (80011dc <MX_TIM2_Init+0xe8>)
 80011ce:	f000 f96b 	bl	80014a8 <HAL_TIM_MspPostInit>

}
 80011d2:	bf00      	nop
 80011d4:	3738      	adds	r7, #56	; 0x38
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000334 	.word	0x20000334

080011e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011e6:	f107 0308 	add.w	r3, r7, #8
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f4:	463b      	mov	r3, r7
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <MX_TIM3_Init+0x94>)
 80011fe:	4a1e      	ldr	r2, [pc, #120]	; (8001278 <MX_TIM3_Init+0x98>)
 8001200:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10;
 8001202:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <MX_TIM3_Init+0x94>)
 8001204:	220a      	movs	r2, #10
 8001206:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001208:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <MX_TIM3_Init+0x94>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16000;
 800120e:	4b19      	ldr	r3, [pc, #100]	; (8001274 <MX_TIM3_Init+0x94>)
 8001210:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001214:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_TIM3_Init+0x94>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <MX_TIM3_Init+0x94>)
 800121e:	2280      	movs	r2, #128	; 0x80
 8001220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001222:	4814      	ldr	r0, [pc, #80]	; (8001274 <MX_TIM3_Init+0x94>)
 8001224:	f001 fbe6 	bl	80029f4 <HAL_TIM_Base_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800122e:	f000 f8cb 	bl	80013c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001236:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001238:	f107 0308 	add.w	r3, r7, #8
 800123c:	4619      	mov	r1, r3
 800123e:	480d      	ldr	r0, [pc, #52]	; (8001274 <MX_TIM3_Init+0x94>)
 8001240:	f001 fe38 	bl	8002eb4 <HAL_TIM_ConfigClockSource>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800124a:	f000 f8bd 	bl	80013c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124e:	2300      	movs	r3, #0
 8001250:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001256:	463b      	mov	r3, r7
 8001258:	4619      	mov	r1, r3
 800125a:	4806      	ldr	r0, [pc, #24]	; (8001274 <MX_TIM3_Init+0x94>)
 800125c:	f002 f9e0 	bl	8003620 <HAL_TIMEx_MasterConfigSynchronization>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001266:	f000 f8af 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000270 	.word	0x20000270
 8001278:	40000400 	.word	0x40000400

0800127c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MX_USART1_UART_Init+0x4c>)
 8001282:	4a12      	ldr	r2, [pc, #72]	; (80012cc <MX_USART1_UART_Init+0x50>)
 8001284:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <MX_USART1_UART_Init+0x4c>)
 8001288:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800128c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <MX_USART1_UART_Init+0x4c>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <MX_USART1_UART_Init+0x4c>)
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <MX_USART1_UART_Init+0x4c>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <MX_USART1_UART_Init+0x4c>)
 80012a2:	220c      	movs	r2, #12
 80012a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <MX_USART1_UART_Init+0x4c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <MX_USART1_UART_Init+0x4c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_USART1_UART_Init+0x4c>)
 80012b4:	f002 fa36 	bl	8003724 <HAL_UART_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012be:	f000 f883 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200002b0 	.word	0x200002b0
 80012cc:	40011000 	.word	0x40011000

080012d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_USART2_UART_Init+0x4c>)
 80012d6:	4a12      	ldr	r2, [pc, #72]	; (8001320 <MX_USART2_UART_Init+0x50>)
 80012d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <MX_USART2_UART_Init+0x4c>)
 80012dc:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80012e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_USART2_UART_Init+0x4c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <MX_USART2_UART_Init+0x4c>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <MX_USART2_UART_Init+0x4c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012f4:	4b09      	ldr	r3, [pc, #36]	; (800131c <MX_USART2_UART_Init+0x4c>)
 80012f6:	220c      	movs	r2, #12
 80012f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <MX_USART2_UART_Init+0x4c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <MX_USART2_UART_Init+0x4c>)
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001306:	4805      	ldr	r0, [pc, #20]	; (800131c <MX_USART2_UART_Init+0x4c>)
 8001308:	f002 fa0c 	bl	8003724 <HAL_UART_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001312:	f000 f859 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000374 	.word	0x20000374
 8001320:	40004400 	.word	0x40004400

08001324 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <MX_USART6_UART_Init+0x4c>)
 800132a:	4a12      	ldr	r2, [pc, #72]	; (8001374 <MX_USART6_UART_Init+0x50>)
 800132c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 19200;
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <MX_USART6_UART_Init+0x4c>)
 8001330:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001334:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <MX_USART6_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <MX_USART6_UART_Init+0x4c>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <MX_USART6_UART_Init+0x4c>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <MX_USART6_UART_Init+0x4c>)
 800134a:	220c      	movs	r2, #12
 800134c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <MX_USART6_UART_Init+0x4c>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <MX_USART6_UART_Init+0x4c>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_USART6_UART_Init+0x4c>)
 800135c:	f002 f9e2 	bl	8003724 <HAL_UART_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001366:	f000 f82f 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200002f4 	.word	0x200002f4
 8001374:	40011400 	.word	0x40011400

08001378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <MX_GPIO_Init+0x4c>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a0f      	ldr	r2, [pc, #60]	; (80013c4 <MX_GPIO_Init+0x4c>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <MX_GPIO_Init+0x4c>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	603b      	str	r3, [r7, #0]
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_GPIO_Init+0x4c>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <MX_GPIO_Init+0x4c>)
 80013a4:	f043 0304 	orr.w	r3, r3, #4
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_GPIO_Init+0x4c>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]

}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800

080013c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013cc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ce:	e7fe      	b.n	80013ce <Error_Handler+0x6>

080013d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <HAL_MspInit+0x4c>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	4a0f      	ldr	r2, [pc, #60]	; (800141c <HAL_MspInit+0x4c>)
 80013e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e4:	6453      	str	r3, [r2, #68]	; 0x44
 80013e6:	4b0d      	ldr	r3, [pc, #52]	; (800141c <HAL_MspInit+0x4c>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	603b      	str	r3, [r7, #0]
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_MspInit+0x4c>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	4a08      	ldr	r2, [pc, #32]	; (800141c <HAL_MspInit+0x4c>)
 80013fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001400:	6413      	str	r3, [r2, #64]	; 0x40
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_MspInit+0x4c>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800

08001420 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001430:	d116      	bne.n	8001460 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <HAL_TIM_Base_MspInit+0x80>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	4a19      	ldr	r2, [pc, #100]	; (80014a0 <HAL_TIM_Base_MspInit+0x80>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6413      	str	r3, [r2, #64]	; 0x40
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <HAL_TIM_Base_MspInit+0x80>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	201c      	movs	r0, #28
 8001454:	f000 fcb7 	bl	8001dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001458:	201c      	movs	r0, #28
 800145a:	f000 fcd0 	bl	8001dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800145e:	e01a      	b.n	8001496 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0f      	ldr	r2, [pc, #60]	; (80014a4 <HAL_TIM_Base_MspInit+0x84>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d115      	bne.n	8001496 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <HAL_TIM_Base_MspInit+0x80>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <HAL_TIM_Base_MspInit+0x80>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
 800147a:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <HAL_TIM_Base_MspInit+0x80>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	201d      	movs	r0, #29
 800148c:	f000 fc9b 	bl	8001dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001490:	201d      	movs	r0, #29
 8001492:	f000 fcb4 	bl	8001dfe <HAL_NVIC_EnableIRQ>
}
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40000400 	.word	0x40000400

080014a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c8:	d11d      	bne.n	8001506 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <HAL_TIM_MspPostInit+0x68>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <HAL_TIM_MspPostInit+0x68>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <HAL_TIM_MspPostInit+0x68>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014e6:	2301      	movs	r3, #1
 80014e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014f6:	2301      	movs	r3, #1
 80014f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fa:	f107 030c 	add.w	r3, r7, #12
 80014fe:	4619      	mov	r1, r3
 8001500:	4804      	ldr	r0, [pc, #16]	; (8001514 <HAL_TIM_MspPostInit+0x6c>)
 8001502:	f000 fcb9 	bl	8001e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001506:	bf00      	nop
 8001508:	3720      	adds	r7, #32
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800
 8001514:	40020000 	.word	0x40020000

08001518 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08e      	sub	sp, #56	; 0x38
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a57      	ldr	r2, [pc, #348]	; (8001694 <HAL_UART_MspInit+0x17c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d135      	bne.n	80015a6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
 800153e:	4b56      	ldr	r3, [pc, #344]	; (8001698 <HAL_UART_MspInit+0x180>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	4a55      	ldr	r2, [pc, #340]	; (8001698 <HAL_UART_MspInit+0x180>)
 8001544:	f043 0310 	orr.w	r3, r3, #16
 8001548:	6453      	str	r3, [r2, #68]	; 0x44
 800154a:	4b53      	ldr	r3, [pc, #332]	; (8001698 <HAL_UART_MspInit+0x180>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	f003 0310 	and.w	r3, r3, #16
 8001552:	623b      	str	r3, [r7, #32]
 8001554:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
 800155a:	4b4f      	ldr	r3, [pc, #316]	; (8001698 <HAL_UART_MspInit+0x180>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a4e      	ldr	r2, [pc, #312]	; (8001698 <HAL_UART_MspInit+0x180>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b4c      	ldr	r3, [pc, #304]	; (8001698 <HAL_UART_MspInit+0x180>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	61fb      	str	r3, [r7, #28]
 8001570:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001572:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001584:	2307      	movs	r3, #7
 8001586:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158c:	4619      	mov	r1, r3
 800158e:	4843      	ldr	r0, [pc, #268]	; (800169c <HAL_UART_MspInit+0x184>)
 8001590:	f000 fc72 	bl	8001e78 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001594:	2200      	movs	r2, #0
 8001596:	2100      	movs	r1, #0
 8001598:	2025      	movs	r0, #37	; 0x25
 800159a:	f000 fc14 	bl	8001dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800159e:	2025      	movs	r0, #37	; 0x25
 80015a0:	f000 fc2d 	bl	8001dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80015a4:	e072      	b.n	800168c <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART2)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a3d      	ldr	r2, [pc, #244]	; (80016a0 <HAL_UART_MspInit+0x188>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d134      	bne.n	800161a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015b0:	2300      	movs	r3, #0
 80015b2:	61bb      	str	r3, [r7, #24]
 80015b4:	4b38      	ldr	r3, [pc, #224]	; (8001698 <HAL_UART_MspInit+0x180>)
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	4a37      	ldr	r2, [pc, #220]	; (8001698 <HAL_UART_MspInit+0x180>)
 80015ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015be:	6413      	str	r3, [r2, #64]	; 0x40
 80015c0:	4b35      	ldr	r3, [pc, #212]	; (8001698 <HAL_UART_MspInit+0x180>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c8:	61bb      	str	r3, [r7, #24]
 80015ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	4b31      	ldr	r3, [pc, #196]	; (8001698 <HAL_UART_MspInit+0x180>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d4:	4a30      	ldr	r2, [pc, #192]	; (8001698 <HAL_UART_MspInit+0x180>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6313      	str	r3, [r2, #48]	; 0x30
 80015dc:	4b2e      	ldr	r3, [pc, #184]	; (8001698 <HAL_UART_MspInit+0x180>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015e8:	230c      	movs	r3, #12
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	2302      	movs	r3, #2
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f4:	2303      	movs	r3, #3
 80015f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015f8:	2307      	movs	r3, #7
 80015fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001600:	4619      	mov	r1, r3
 8001602:	4826      	ldr	r0, [pc, #152]	; (800169c <HAL_UART_MspInit+0x184>)
 8001604:	f000 fc38 	bl	8001e78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001608:	2200      	movs	r2, #0
 800160a:	2100      	movs	r1, #0
 800160c:	2026      	movs	r0, #38	; 0x26
 800160e:	f000 fbda 	bl	8001dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001612:	2026      	movs	r0, #38	; 0x26
 8001614:	f000 fbf3 	bl	8001dfe <HAL_NVIC_EnableIRQ>
}
 8001618:	e038      	b.n	800168c <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a21      	ldr	r2, [pc, #132]	; (80016a4 <HAL_UART_MspInit+0x18c>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d133      	bne.n	800168c <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001624:	2300      	movs	r3, #0
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <HAL_UART_MspInit+0x180>)
 800162a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162c:	4a1a      	ldr	r2, [pc, #104]	; (8001698 <HAL_UART_MspInit+0x180>)
 800162e:	f043 0320 	orr.w	r3, r3, #32
 8001632:	6453      	str	r3, [r2, #68]	; 0x44
 8001634:	4b18      	ldr	r3, [pc, #96]	; (8001698 <HAL_UART_MspInit+0x180>)
 8001636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001638:	f003 0320 	and.w	r3, r3, #32
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	4b14      	ldr	r3, [pc, #80]	; (8001698 <HAL_UART_MspInit+0x180>)
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001648:	4a13      	ldr	r2, [pc, #76]	; (8001698 <HAL_UART_MspInit+0x180>)
 800164a:	f043 0304 	orr.w	r3, r3, #4
 800164e:	6313      	str	r3, [r2, #48]	; 0x30
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <HAL_UART_MspInit+0x180>)
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800165c:	23c0      	movs	r3, #192	; 0xc0
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800166c:	2308      	movs	r3, #8
 800166e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001674:	4619      	mov	r1, r3
 8001676:	480c      	ldr	r0, [pc, #48]	; (80016a8 <HAL_UART_MspInit+0x190>)
 8001678:	f000 fbfe 	bl	8001e78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800167c:	2200      	movs	r2, #0
 800167e:	2100      	movs	r1, #0
 8001680:	2047      	movs	r0, #71	; 0x47
 8001682:	f000 fba0 	bl	8001dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001686:	2047      	movs	r0, #71	; 0x47
 8001688:	f000 fbb9 	bl	8001dfe <HAL_NVIC_EnableIRQ>
}
 800168c:	bf00      	nop
 800168e:	3738      	adds	r7, #56	; 0x38
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40011000 	.word	0x40011000
 8001698:	40023800 	.word	0x40023800
 800169c:	40020000 	.word	0x40020000
 80016a0:	40004400 	.word	0x40004400
 80016a4:	40011400 	.word	0x40011400
 80016a8:	40020800 	.word	0x40020800

080016ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <NMI_Handler+0x4>

080016b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <HardFault_Handler+0x4>

080016b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <MemManage_Handler+0x4>

080016be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <BusFault_Handler+0x4>

080016c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <UsageFault_Handler+0x4>

080016ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f8:	f000 fa6a 	bl	8001bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}

08001700 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <TIM2_IRQHandler+0x10>)
 8001706:	f001 fa07 	bl	8002b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000334 	.word	0x20000334

08001714 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <TIM3_IRQHandler+0x10>)
 800171a:	f001 f9fd 	bl	8002b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000270 	.word	0x20000270

08001728 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <USART1_IRQHandler+0x10>)
 800172e:	f002 f979 	bl	8003a24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200002b0 	.word	0x200002b0

0800173c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <USART2_IRQHandler+0x10>)
 8001742:	f002 f96f 	bl	8003a24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000374 	.word	0x20000374

08001750 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <USART6_IRQHandler+0x10>)
 8001756:	f002 f965 	bl	8003a24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200002f4 	.word	0x200002f4

08001764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800176c:	4a14      	ldr	r2, [pc, #80]	; (80017c0 <_sbrk+0x5c>)
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <_sbrk+0x60>)
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001778:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <_sbrk+0x64>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d102      	bne.n	8001786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <_sbrk+0x64>)
 8001782:	4a12      	ldr	r2, [pc, #72]	; (80017cc <_sbrk+0x68>)
 8001784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <_sbrk+0x64>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	429a      	cmp	r2, r3
 8001792:	d207      	bcs.n	80017a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001794:	f002 ff42 	bl	800461c <__errno>
 8001798:	4602      	mov	r2, r0
 800179a:	230c      	movs	r3, #12
 800179c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800179e:	f04f 33ff 	mov.w	r3, #4294967295
 80017a2:	e009      	b.n	80017b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <_sbrk+0x64>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017aa:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <_sbrk+0x64>)
 80017b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017b6:	68fb      	ldr	r3, [r7, #12]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20018000 	.word	0x20018000
 80017c4:	00000400 	.word	0x00000400
 80017c8:	200001f8 	.word	0x200001f8
 80017cc:	200003c0 	.word	0x200003c0

080017d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <SystemInit+0x28>)
 80017d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017da:	4a07      	ldr	r2, [pc, #28]	; (80017f8 <SystemInit+0x28>)
 80017dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017e4:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <SystemInit+0x28>)
 80017e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017ea:	609a      	str	r2, [r3, #8]
#endif
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001834 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001800:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001802:	e003      	b.n	800180c <LoopCopyDataInit>

08001804 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001806:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001808:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800180a:	3104      	adds	r1, #4

0800180c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800180c:	480b      	ldr	r0, [pc, #44]	; (800183c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001810:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001812:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001814:	d3f6      	bcc.n	8001804 <CopyDataInit>
  ldr  r2, =_sbss
 8001816:	4a0b      	ldr	r2, [pc, #44]	; (8001844 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001818:	e002      	b.n	8001820 <LoopFillZerobss>

0800181a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800181a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800181c:	f842 3b04 	str.w	r3, [r2], #4

08001820 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001822:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001824:	d3f9      	bcc.n	800181a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001826:	f7ff ffd3 	bl	80017d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800182a:	f002 fefd 	bl	8004628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800182e:	f7ff fbd5 	bl	8000fdc <main>
  bx  lr    
 8001832:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001834:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001838:	08007484 	.word	0x08007484
  ldr  r0, =_sdata
 800183c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001840:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001844:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001848:	200003bc 	.word	0x200003bc

0800184c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800184c:	e7fe      	b.n	800184c <ADC_IRQHandler>
	...

08001850 <Deplacement_Clavier>:
//angle: multiplie angle voulu par 12.25 pour avoir la distance de, puis multiplication par 690
// deplacement_clavier prend en entrée un caractère et effectue un déplacement

//cette fonction recois un caractère en entrée et en fonction de la valeur envoie une instruction sur
//l'huart 6 (avance, recule, droite, gauche, arrêt)
void Deplacement_Clavier(char c){
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]

	if(c=='z'){
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	2b7a      	cmp	r3, #122	; 0x7a
 800185e:	d105      	bne.n	800186c <Deplacement_Clavier+0x1c>
		HAL_UART_Transmit_IT(&huart6, (unsigned char*)"mogo 1:6 2:6\r", 13);
 8001860:	220d      	movs	r2, #13
 8001862:	4916      	ldr	r1, [pc, #88]	; (80018bc <Deplacement_Clavier+0x6c>)
 8001864:	4816      	ldr	r0, [pc, #88]	; (80018c0 <Deplacement_Clavier+0x70>)
 8001866:	f002 f843 	bl	80038f0 <HAL_UART_Transmit_IT>
		HAL_UART_Transmit_IT(&huart6, (unsigned char*)"mogo 1:6 2:0\r", 13);
		}
	else if(c=='f'){
		HAL_UART_Transmit_IT(&huart6, (unsigned char*)"stop\r", 5);
		}
}
 800186a:	e022      	b.n	80018b2 <Deplacement_Clavier+0x62>
	else if(c== 's'){
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	2b73      	cmp	r3, #115	; 0x73
 8001870:	d105      	bne.n	800187e <Deplacement_Clavier+0x2e>
		HAL_UART_Transmit_IT(&huart6, (unsigned char*)"mogo 1:-6 2:-6\r", 15);
 8001872:	220f      	movs	r2, #15
 8001874:	4913      	ldr	r1, [pc, #76]	; (80018c4 <Deplacement_Clavier+0x74>)
 8001876:	4812      	ldr	r0, [pc, #72]	; (80018c0 <Deplacement_Clavier+0x70>)
 8001878:	f002 f83a 	bl	80038f0 <HAL_UART_Transmit_IT>
}
 800187c:	e019      	b.n	80018b2 <Deplacement_Clavier+0x62>
	else if(c=='d'){
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	2b64      	cmp	r3, #100	; 0x64
 8001882:	d105      	bne.n	8001890 <Deplacement_Clavier+0x40>
		HAL_UART_Transmit_IT(&huart6, (unsigned char*)"mogo 1:0 2:6\r", 13);
 8001884:	220d      	movs	r2, #13
 8001886:	4910      	ldr	r1, [pc, #64]	; (80018c8 <Deplacement_Clavier+0x78>)
 8001888:	480d      	ldr	r0, [pc, #52]	; (80018c0 <Deplacement_Clavier+0x70>)
 800188a:	f002 f831 	bl	80038f0 <HAL_UART_Transmit_IT>
}
 800188e:	e010      	b.n	80018b2 <Deplacement_Clavier+0x62>
	else if(c=='q'){
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	2b71      	cmp	r3, #113	; 0x71
 8001894:	d105      	bne.n	80018a2 <Deplacement_Clavier+0x52>
		HAL_UART_Transmit_IT(&huart6, (unsigned char*)"mogo 1:6 2:0\r", 13);
 8001896:	220d      	movs	r2, #13
 8001898:	490c      	ldr	r1, [pc, #48]	; (80018cc <Deplacement_Clavier+0x7c>)
 800189a:	4809      	ldr	r0, [pc, #36]	; (80018c0 <Deplacement_Clavier+0x70>)
 800189c:	f002 f828 	bl	80038f0 <HAL_UART_Transmit_IT>
}
 80018a0:	e007      	b.n	80018b2 <Deplacement_Clavier+0x62>
	else if(c=='f'){
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	2b66      	cmp	r3, #102	; 0x66
 80018a6:	d104      	bne.n	80018b2 <Deplacement_Clavier+0x62>
		HAL_UART_Transmit_IT(&huart6, (unsigned char*)"stop\r", 5);
 80018a8:	2205      	movs	r2, #5
 80018aa:	4909      	ldr	r1, [pc, #36]	; (80018d0 <Deplacement_Clavier+0x80>)
 80018ac:	4804      	ldr	r0, [pc, #16]	; (80018c0 <Deplacement_Clavier+0x70>)
 80018ae:	f002 f81f 	bl	80038f0 <HAL_UART_Transmit_IT>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	080070c0 	.word	0x080070c0
 80018c0:	200002f4 	.word	0x200002f4
 80018c4:	080070d0 	.word	0x080070d0
 80018c8:	080070e0 	.word	0x080070e0
 80018cc:	080070f0 	.word	0x080070f0
 80018d0:	08007100 	.word	0x08007100

080018d4 <Deplacement_Distance>:

//récupère la distance de 6 caractères (type d'info, nul, distance sur 4 caractères)
//puis convertit distance cm en tick on multiplie la distance par (690/20) (nombre de tick
//pour un tour de roue on envoie la commande déplacement sur l'huart6
void Deplacement_Distance(char *dis){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b0ec      	sub	sp, #432	; 0x1b0
 80018d8:	af02      	add	r7, sp, #8
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	6018      	str	r0, [r3, #0]
	int x,y;
	int distance= 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	char c,n;
	char* d[100];
	sscanf(dis, "%c%c%2i%2i", &c, &n, &x, &y);
 80018e4:	f507 71cd 	add.w	r1, r7, #410	; 0x19a
 80018e8:	f207 129b 	addw	r2, r7, #411	; 0x19b
 80018ec:	1d38      	adds	r0, r7, #4
 80018ee:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	460b      	mov	r3, r1
 80018fc:	491b      	ldr	r1, [pc, #108]	; (800196c <Deplacement_Distance+0x98>)
 80018fe:	6800      	ldr	r0, [r0, #0]
 8001900:	f003 fb3a 	bl	8004f78 <siscanf>
	distance = x*100+y;
 8001904:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001908:	2264      	movs	r2, #100	; 0x64
 800190a:	fb02 f203 	mul.w	r2, r2, r3
 800190e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001912:	4413      	add	r3, r2
 8001914:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	distance = distance*(690)/200;
 8001918:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800191c:	f240 22b2 	movw	r2, #690	; 0x2b2
 8001920:	fb02 f303 	mul.w	r3, r2, r3
 8001924:	4a12      	ldr	r2, [pc, #72]	; (8001970 <Deplacement_Distance+0x9c>)
 8001926:	fb82 1203 	smull	r1, r2, r2, r3
 800192a:	1192      	asrs	r2, r2, #6
 800192c:	17db      	asrs	r3, r3, #31
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	sprintf(d,"digo 1:%.1i:5 2:%.1i:5\r",distance,distance);
 8001934:	f107 0008 	add.w	r0, r7, #8
 8001938:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800193c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8001940:	490c      	ldr	r1, [pc, #48]	; (8001974 <Deplacement_Distance+0xa0>)
 8001942:	f003 faf9 	bl	8004f38 <siprintf>
	HAL_UART_Transmit(&huart6,d,strlen(d),1000);
 8001946:	f107 0308 	add.w	r3, r7, #8
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fc48 	bl	80001e0 <strlen>
 8001950:	4603      	mov	r3, r0
 8001952:	b29a      	uxth	r2, r3
 8001954:	f107 0108 	add.w	r1, r7, #8
 8001958:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800195c:	4806      	ldr	r0, [pc, #24]	; (8001978 <Deplacement_Distance+0xa4>)
 800195e:	f001 ff2e 	bl	80037be <HAL_UART_Transmit>
}
 8001962:	bf00      	nop
 8001964:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	08007108 	.word	0x08007108
 8001970:	51eb851f 	.word	0x51eb851f
 8001974:	08007114 	.word	0x08007114
 8001978:	200002f4 	.word	0x200002f4
 800197c:	00000000 	.word	0x00000000

08001980 <Deplacement_Angle>:

//récupère l'angle de 6 caractères (type d'info, sens rotation, angle sur 4 caractères)
//puis convertit distance cm en tick on multiplie par 77 (2piR) pour avoir la distance
//puis on convertit la distance en tick
//on envoie la commande déplacement sur l'huart6
void Deplacement_Angle(char *ang){
 8001980:	b5b0      	push	{r4, r5, r7, lr}
 8001982:	b0ee      	sub	sp, #440	; 0x1b8
 8001984:	af02      	add	r7, sp, #8
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	6018      	str	r0, [r3, #0]
	int x,y,angle;
	float angleb= 0;
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	char c,n;
	char* d[100];
	sscanf(ang, "%c%c %2i %2i", &c, &n, &x, &y);
 8001992:	f507 71cf 	add.w	r1, r7, #414	; 0x19e
 8001996:	f207 129f 	addw	r2, r7, #415	; 0x19f
 800199a:	1d38      	adds	r0, r7, #4
 800199c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80019a0:	9301      	str	r3, [sp, #4]
 80019a2:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	460b      	mov	r3, r1
 80019aa:	4935      	ldr	r1, [pc, #212]	; (8001a80 <Deplacement_Angle+0x100>)
 80019ac:	6800      	ldr	r0, [r0, #0]
 80019ae:	f003 fae3 	bl	8004f78 <siscanf>
	angleb = (x+y*0.01)*77;
 80019b2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7fe fdbc 	bl	8000534 <__aeabi_i2d>
 80019bc:	4604      	mov	r4, r0
 80019be:	460d      	mov	r5, r1
 80019c0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fdb5 	bl	8000534 <__aeabi_i2d>
 80019ca:	a32b      	add	r3, pc, #172	; (adr r3, 8001a78 <Deplacement_Angle+0xf8>)
 80019cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d0:	f7fe fe1a 	bl	8000608 <__aeabi_dmul>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4620      	mov	r0, r4
 80019da:	4629      	mov	r1, r5
 80019dc:	f7fe fc5e 	bl	800029c <__adddf3>
 80019e0:	4603      	mov	r3, r0
 80019e2:	460c      	mov	r4, r1
 80019e4:	4618      	mov	r0, r3
 80019e6:	4621      	mov	r1, r4
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	4b25      	ldr	r3, [pc, #148]	; (8001a84 <Deplacement_Angle+0x104>)
 80019ee:	f7fe fe0b 	bl	8000608 <__aeabi_dmul>
 80019f2:	4603      	mov	r3, r0
 80019f4:	460c      	mov	r4, r1
 80019f6:	4618      	mov	r0, r3
 80019f8:	4621      	mov	r1, r4
 80019fa:	f7ff f8dd 	bl	8000bb8 <__aeabi_d2f>
 80019fe:	4603      	mov	r3, r0
 8001a00:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	angle = angleb*(690)/200;
 8001a04:	edd7 7a6b 	vldr	s15, [r7, #428]	; 0x1ac
 8001a08:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001a88 <Deplacement_Angle+0x108>
 8001a0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a10:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8001a8c <Deplacement_Angle+0x10c>
 8001a14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a1c:	ee17 3a90 	vmov	r3, s15
 8001a20:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	if(n == '-'){
 8001a24:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 8001a28:	2b2d      	cmp	r3, #45	; 0x2d
 8001a2a:	d109      	bne.n	8001a40 <Deplacement_Angle+0xc0>
		sprintf(d,"digo 1:%.1i:2.5 2:-%.1i:2.5\r",angle,angle);
 8001a2c:	f107 000c 	add.w	r0, r7, #12
 8001a30:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001a34:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8001a38:	4915      	ldr	r1, [pc, #84]	; (8001a90 <Deplacement_Angle+0x110>)
 8001a3a:	f003 fa7d 	bl	8004f38 <siprintf>
 8001a3e:	e008      	b.n	8001a52 <Deplacement_Angle+0xd2>
	}
	else{
		sprintf(d,"digo 1:-%.1i:2.5 2:%.1i:2.5\r",angle,angle);
 8001a40:	f107 000c 	add.w	r0, r7, #12
 8001a44:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001a48:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8001a4c:	4911      	ldr	r1, [pc, #68]	; (8001a94 <Deplacement_Angle+0x114>)
 8001a4e:	f003 fa73 	bl	8004f38 <siprintf>
	}
	HAL_UART_Transmit(&huart6,d,strlen(d),1000);
 8001a52:	f107 030c 	add.w	r3, r7, #12
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fbc2 	bl	80001e0 <strlen>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	f107 010c 	add.w	r1, r7, #12
 8001a64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a68:	480b      	ldr	r0, [pc, #44]	; (8001a98 <Deplacement_Angle+0x118>)
 8001a6a:	f001 fea8 	bl	80037be <HAL_UART_Transmit>
}
 8001a6e:	bf00      	nop
 8001a70:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bdb0      	pop	{r4, r5, r7, pc}
 8001a78:	47ae147b 	.word	0x47ae147b
 8001a7c:	3f847ae1 	.word	0x3f847ae1
 8001a80:	0800712c 	.word	0x0800712c
 8001a84:	40534000 	.word	0x40534000
 8001a88:	442c8000 	.word	0x442c8000
 8001a8c:	43480000 	.word	0x43480000
 8001a90:	0800713c 	.word	0x0800713c
 8001a94:	0800715c 	.word	0x0800715c
 8001a98:	200002f4 	.word	0x200002f4

08001a9c <ServoUp>:

//actionne le moteur pour lever crayon
void ServoUp(){
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
	   htim2.Instance->CCR1 = 12;
 8001aa0:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <ServoUp+0x18>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	220c      	movs	r2, #12
 8001aa6:	635a      	str	r2, [r3, #52]	; 0x34
   }
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	20000334 	.word	0x20000334

08001ab8 <ServoDown>:

//actionne le moteur pour baisser crayon
void ServoDown(){
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
   htim2.Instance->CCR1 = 5;
 8001abc:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <ServoDown+0x18>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2205      	movs	r2, #5
 8001ac2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20000334 	.word	0x20000334

08001ad4 <Reception_Deplacement>:

//récupère 6 caractères puis renvoie au fonctions
//ci dessus en fonction de la valeur du premier caractère
void Reception_Deplacement(char *ins){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

	if(ins[0]=='i'){
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b69      	cmp	r3, #105	; 0x69
 8001ae2:	d103      	bne.n	8001aec <Reception_Deplacement+0x18>
		Deplacement_Distance(ins);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff fef5 	bl	80018d4 <Deplacement_Distance>
			ServoDown();
		}
	else{
		Deplacement_Clavier(ins[0]);
	}
}
 8001aea:	e01a      	b.n	8001b22 <Reception_Deplacement+0x4e>
	else if(ins[0]=='v'){
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b76      	cmp	r3, #118	; 0x76
 8001af2:	d103      	bne.n	8001afc <Reception_Deplacement+0x28>
		Deplacement_Angle(ins);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ff43 	bl	8001980 <Deplacement_Angle>
}
 8001afa:	e012      	b.n	8001b22 <Reception_Deplacement+0x4e>
	else if(ins[0]=='u'){
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b75      	cmp	r3, #117	; 0x75
 8001b02:	d102      	bne.n	8001b0a <Reception_Deplacement+0x36>
			ServoUp();
 8001b04:	f7ff ffca 	bl	8001a9c <ServoUp>
}
 8001b08:	e00b      	b.n	8001b22 <Reception_Deplacement+0x4e>
	else if(ins[0]=='p'){
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b70      	cmp	r3, #112	; 0x70
 8001b10:	d102      	bne.n	8001b18 <Reception_Deplacement+0x44>
			ServoDown();
 8001b12:	f7ff ffd1 	bl	8001ab8 <ServoDown>
}
 8001b16:	e004      	b.n	8001b22 <Reception_Deplacement+0x4e>
		Deplacement_Clavier(ins[0]);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fe97 	bl	8001850 <Deplacement_Clavier>
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
	...

08001b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b30:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <HAL_Init+0x40>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0d      	ldr	r2, [pc, #52]	; (8001b6c <HAL_Init+0x40>)
 8001b36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_Init+0x40>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <HAL_Init+0x40>)
 8001b42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b48:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <HAL_Init+0x40>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a07      	ldr	r2, [pc, #28]	; (8001b6c <HAL_Init+0x40>)
 8001b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b54:	2003      	movs	r0, #3
 8001b56:	f000 f92b 	bl	8001db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f000 f808 	bl	8001b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b60:	f7ff fc36 	bl	80013d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40023c00 	.word	0x40023c00

08001b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_InitTick+0x54>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_InitTick+0x58>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	4619      	mov	r1, r3
 8001b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 f943 	bl	8001e1a <HAL_SYSTICK_Config>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e00e      	b.n	8001bbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b0f      	cmp	r3, #15
 8001ba2:	d80a      	bhi.n	8001bba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bac:	f000 f90b 	bl	8001dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb0:	4a06      	ldr	r2, [pc, #24]	; (8001bcc <HAL_InitTick+0x5c>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	e000      	b.n	8001bbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	20000008 	.word	0x20000008
 8001bcc:	20000004 	.word	0x20000004

08001bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_IncTick+0x20>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_IncTick+0x24>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4413      	add	r3, r2
 8001be0:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <HAL_IncTick+0x24>)
 8001be2:	6013      	str	r3, [r2, #0]
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	20000008 	.word	0x20000008
 8001bf4:	200003b4 	.word	0x200003b4

08001bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001bfc:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <HAL_GetTick+0x14>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	200003b4 	.word	0x200003b4

08001c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <__NVIC_SetPriorityGrouping+0x44>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c42:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <__NVIC_SetPriorityGrouping+0x44>)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	60d3      	str	r3, [r2, #12]
}
 8001c48:	bf00      	nop
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c5c:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <__NVIC_GetPriorityGrouping+0x18>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	0a1b      	lsrs	r3, r3, #8
 8001c62:	f003 0307 	and.w	r3, r3, #7
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	db0b      	blt.n	8001c9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	f003 021f 	and.w	r2, r3, #31
 8001c8c:	4907      	ldr	r1, [pc, #28]	; (8001cac <__NVIC_EnableIRQ+0x38>)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	095b      	lsrs	r3, r3, #5
 8001c94:	2001      	movs	r0, #1
 8001c96:	fa00 f202 	lsl.w	r2, r0, r2
 8001c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000e100 	.word	0xe000e100

08001cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	6039      	str	r1, [r7, #0]
 8001cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	db0a      	blt.n	8001cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	490c      	ldr	r1, [pc, #48]	; (8001cfc <__NVIC_SetPriority+0x4c>)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	0112      	lsls	r2, r2, #4
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd8:	e00a      	b.n	8001cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4908      	ldr	r1, [pc, #32]	; (8001d00 <__NVIC_SetPriority+0x50>)
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	3b04      	subs	r3, #4
 8001ce8:	0112      	lsls	r2, r2, #4
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	440b      	add	r3, r1
 8001cee:	761a      	strb	r2, [r3, #24]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000e100 	.word	0xe000e100
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b089      	sub	sp, #36	; 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f1c3 0307 	rsb	r3, r3, #7
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	bf28      	it	cs
 8001d22:	2304      	movcs	r3, #4
 8001d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	d902      	bls.n	8001d34 <NVIC_EncodePriority+0x30>
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3b03      	subs	r3, #3
 8001d32:	e000      	b.n	8001d36 <NVIC_EncodePriority+0x32>
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	f04f 32ff 	mov.w	r2, #4294967295
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43da      	mvns	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	401a      	ands	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	fa01 f303 	lsl.w	r3, r1, r3
 8001d56:	43d9      	mvns	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	4313      	orrs	r3, r2
         );
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3724      	adds	r7, #36	; 0x24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d7c:	d301      	bcc.n	8001d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e00f      	b.n	8001da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d82:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <SysTick_Config+0x40>)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d8a:	210f      	movs	r1, #15
 8001d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d90:	f7ff ff8e 	bl	8001cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <SysTick_Config+0x40>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d9a:	4b04      	ldr	r3, [pc, #16]	; (8001dac <SysTick_Config+0x40>)
 8001d9c:	2207      	movs	r2, #7
 8001d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	e000e010 	.word	0xe000e010

08001db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff ff29 	bl	8001c10 <__NVIC_SetPriorityGrouping>
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	4603      	mov	r3, r0
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
 8001dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd8:	f7ff ff3e 	bl	8001c58 <__NVIC_GetPriorityGrouping>
 8001ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68b9      	ldr	r1, [r7, #8]
 8001de2:	6978      	ldr	r0, [r7, #20]
 8001de4:	f7ff ff8e 	bl	8001d04 <NVIC_EncodePriority>
 8001de8:	4602      	mov	r2, r0
 8001dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dee:	4611      	mov	r1, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff5d 	bl	8001cb0 <__NVIC_SetPriority>
}
 8001df6:	bf00      	nop
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ff31 	bl	8001c74 <__NVIC_EnableIRQ>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ffa2 	bl	8001d6c <SysTick_Config>
 8001e28:	4603      	mov	r3, r0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d004      	beq.n	8001e50 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2280      	movs	r2, #128	; 0x80
 8001e4a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e00c      	b.n	8001e6a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2205      	movs	r2, #5
 8001e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0201 	bic.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b089      	sub	sp, #36	; 0x24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	e159      	b.n	8002148 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e94:	2201      	movs	r2, #1
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	f040 8148 	bne.w	8002142 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d00b      	beq.n	8001ed2 <HAL_GPIO_Init+0x5a>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d007      	beq.n	8001ed2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ec6:	2b11      	cmp	r3, #17
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b12      	cmp	r3, #18
 8001ed0:	d130      	bne.n	8001f34 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	2203      	movs	r2, #3
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f08:	2201      	movs	r2, #1
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f003 0201 	and.w	r2, r3, #1
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	2203      	movs	r2, #3
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0xfc>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b12      	cmp	r3, #18
 8001f72:	d123      	bne.n	8001fbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	08da      	lsrs	r2, r3, #3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3208      	adds	r2, #8
 8001f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	220f      	movs	r2, #15
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	08da      	lsrs	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3208      	adds	r2, #8
 8001fb6:	69b9      	ldr	r1, [r7, #24]
 8001fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0203 	and.w	r2, r3, #3
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80a2 	beq.w	8002142 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	4b56      	ldr	r3, [pc, #344]	; (800215c <HAL_GPIO_Init+0x2e4>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	4a55      	ldr	r2, [pc, #340]	; (800215c <HAL_GPIO_Init+0x2e4>)
 8002008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800200c:	6453      	str	r3, [r2, #68]	; 0x44
 800200e:	4b53      	ldr	r3, [pc, #332]	; (800215c <HAL_GPIO_Init+0x2e4>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800201a:	4a51      	ldr	r2, [pc, #324]	; (8002160 <HAL_GPIO_Init+0x2e8>)
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	089b      	lsrs	r3, r3, #2
 8002020:	3302      	adds	r3, #2
 8002022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	220f      	movs	r2, #15
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a48      	ldr	r2, [pc, #288]	; (8002164 <HAL_GPIO_Init+0x2ec>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d019      	beq.n	800207a <HAL_GPIO_Init+0x202>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a47      	ldr	r2, [pc, #284]	; (8002168 <HAL_GPIO_Init+0x2f0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d013      	beq.n	8002076 <HAL_GPIO_Init+0x1fe>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a46      	ldr	r2, [pc, #280]	; (800216c <HAL_GPIO_Init+0x2f4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d00d      	beq.n	8002072 <HAL_GPIO_Init+0x1fa>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a45      	ldr	r2, [pc, #276]	; (8002170 <HAL_GPIO_Init+0x2f8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d007      	beq.n	800206e <HAL_GPIO_Init+0x1f6>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a44      	ldr	r2, [pc, #272]	; (8002174 <HAL_GPIO_Init+0x2fc>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d101      	bne.n	800206a <HAL_GPIO_Init+0x1f2>
 8002066:	2304      	movs	r3, #4
 8002068:	e008      	b.n	800207c <HAL_GPIO_Init+0x204>
 800206a:	2307      	movs	r3, #7
 800206c:	e006      	b.n	800207c <HAL_GPIO_Init+0x204>
 800206e:	2303      	movs	r3, #3
 8002070:	e004      	b.n	800207c <HAL_GPIO_Init+0x204>
 8002072:	2302      	movs	r3, #2
 8002074:	e002      	b.n	800207c <HAL_GPIO_Init+0x204>
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <HAL_GPIO_Init+0x204>
 800207a:	2300      	movs	r3, #0
 800207c:	69fa      	ldr	r2, [r7, #28]
 800207e:	f002 0203 	and.w	r2, r2, #3
 8002082:	0092      	lsls	r2, r2, #2
 8002084:	4093      	lsls	r3, r2
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800208c:	4934      	ldr	r1, [pc, #208]	; (8002160 <HAL_GPIO_Init+0x2e8>)
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	089b      	lsrs	r3, r3, #2
 8002092:	3302      	adds	r3, #2
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800209a:	4b37      	ldr	r3, [pc, #220]	; (8002178 <HAL_GPIO_Init+0x300>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020be:	4a2e      	ldr	r2, [pc, #184]	; (8002178 <HAL_GPIO_Init+0x300>)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020c4:	4b2c      	ldr	r3, [pc, #176]	; (8002178 <HAL_GPIO_Init+0x300>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020e8:	4a23      	ldr	r2, [pc, #140]	; (8002178 <HAL_GPIO_Init+0x300>)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ee:	4b22      	ldr	r3, [pc, #136]	; (8002178 <HAL_GPIO_Init+0x300>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4013      	ands	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002112:	4a19      	ldr	r2, [pc, #100]	; (8002178 <HAL_GPIO_Init+0x300>)
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002118:	4b17      	ldr	r3, [pc, #92]	; (8002178 <HAL_GPIO_Init+0x300>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800213c:	4a0e      	ldr	r2, [pc, #56]	; (8002178 <HAL_GPIO_Init+0x300>)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3301      	adds	r3, #1
 8002146:	61fb      	str	r3, [r7, #28]
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	2b0f      	cmp	r3, #15
 800214c:	f67f aea2 	bls.w	8001e94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002150:	bf00      	nop
 8002152:	3724      	adds	r7, #36	; 0x24
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	40023800 	.word	0x40023800
 8002160:	40013800 	.word	0x40013800
 8002164:	40020000 	.word	0x40020000
 8002168:	40020400 	.word	0x40020400
 800216c:	40020800 	.word	0x40020800
 8002170:	40020c00 	.word	0x40020c00
 8002174:	40021000 	.word	0x40021000
 8002178:	40013c00 	.word	0x40013c00

0800217c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e25b      	b.n	8002646 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d075      	beq.n	8002286 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800219a:	4ba3      	ldr	r3, [pc, #652]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d00c      	beq.n	80021c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021a6:	4ba0      	ldr	r3, [pc, #640]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d112      	bne.n	80021d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021b2:	4b9d      	ldr	r3, [pc, #628]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021be:	d10b      	bne.n	80021d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c0:	4b99      	ldr	r3, [pc, #612]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d05b      	beq.n	8002284 <HAL_RCC_OscConfig+0x108>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d157      	bne.n	8002284 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e236      	b.n	8002646 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e0:	d106      	bne.n	80021f0 <HAL_RCC_OscConfig+0x74>
 80021e2:	4b91      	ldr	r3, [pc, #580]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a90      	ldr	r2, [pc, #576]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80021e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	e01d      	b.n	800222c <HAL_RCC_OscConfig+0xb0>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0x98>
 80021fa:	4b8b      	ldr	r3, [pc, #556]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a8a      	ldr	r2, [pc, #552]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	4b88      	ldr	r3, [pc, #544]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a87      	ldr	r2, [pc, #540]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 800220c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	e00b      	b.n	800222c <HAL_RCC_OscConfig+0xb0>
 8002214:	4b84      	ldr	r3, [pc, #528]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a83      	ldr	r2, [pc, #524]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 800221a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	4b81      	ldr	r3, [pc, #516]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a80      	ldr	r2, [pc, #512]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800222a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d013      	beq.n	800225c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002234:	f7ff fce0 	bl	8001bf8 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800223c:	f7ff fcdc 	bl	8001bf8 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b64      	cmp	r3, #100	; 0x64
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e1fb      	b.n	8002646 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224e:	4b76      	ldr	r3, [pc, #472]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0xc0>
 800225a:	e014      	b.n	8002286 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225c:	f7ff fccc 	bl	8001bf8 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002264:	f7ff fcc8 	bl	8001bf8 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b64      	cmp	r3, #100	; 0x64
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e1e7      	b.n	8002646 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002276:	4b6c      	ldr	r3, [pc, #432]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0xe8>
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d063      	beq.n	800235a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002292:	4b65      	ldr	r3, [pc, #404]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00b      	beq.n	80022b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800229e:	4b62      	ldr	r3, [pc, #392]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d11c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022aa:	4b5f      	ldr	r3, [pc, #380]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d116      	bne.n	80022e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b6:	4b5c      	ldr	r3, [pc, #368]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d005      	beq.n	80022ce <HAL_RCC_OscConfig+0x152>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d001      	beq.n	80022ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e1bb      	b.n	8002646 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ce:	4b56      	ldr	r3, [pc, #344]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4952      	ldr	r1, [pc, #328]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e2:	e03a      	b.n	800235a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d020      	beq.n	800232e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ec:	4b4f      	ldr	r3, [pc, #316]	; (800242c <HAL_RCC_OscConfig+0x2b0>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f2:	f7ff fc81 	bl	8001bf8 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022fa:	f7ff fc7d 	bl	8001bf8 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e19c      	b.n	8002646 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230c:	4b46      	ldr	r3, [pc, #280]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0f0      	beq.n	80022fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002318:	4b43      	ldr	r3, [pc, #268]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4940      	ldr	r1, [pc, #256]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002328:	4313      	orrs	r3, r2
 800232a:	600b      	str	r3, [r1, #0]
 800232c:	e015      	b.n	800235a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800232e:	4b3f      	ldr	r3, [pc, #252]	; (800242c <HAL_RCC_OscConfig+0x2b0>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7ff fc60 	bl	8001bf8 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800233c:	f7ff fc5c 	bl	8001bf8 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e17b      	b.n	8002646 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234e:	4b36      	ldr	r3, [pc, #216]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d030      	beq.n	80023c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d016      	beq.n	800239c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800236e:	4b30      	ldr	r3, [pc, #192]	; (8002430 <HAL_RCC_OscConfig+0x2b4>)
 8002370:	2201      	movs	r2, #1
 8002372:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002374:	f7ff fc40 	bl	8001bf8 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800237c:	f7ff fc3c 	bl	8001bf8 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e15b      	b.n	8002646 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238e:	4b26      	ldr	r3, [pc, #152]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 8002390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0x200>
 800239a:	e015      	b.n	80023c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800239c:	4b24      	ldr	r3, [pc, #144]	; (8002430 <HAL_RCC_OscConfig+0x2b4>)
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a2:	f7ff fc29 	bl	8001bf8 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023aa:	f7ff fc25 	bl	8001bf8 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e144      	b.n	8002646 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023bc:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80023be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1f0      	bne.n	80023aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 80a0 	beq.w	8002516 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d6:	2300      	movs	r3, #0
 80023d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023da:	4b13      	ldr	r3, [pc, #76]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10f      	bne.n	8002406 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	4a0e      	ldr	r2, [pc, #56]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80023f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f4:	6413      	str	r3, [r2, #64]	; 0x40
 80023f6:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002402:	2301      	movs	r3, #1
 8002404:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002406:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <HAL_RCC_OscConfig+0x2b8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240e:	2b00      	cmp	r3, #0
 8002410:	d121      	bne.n	8002456 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002412:	4b08      	ldr	r3, [pc, #32]	; (8002434 <HAL_RCC_OscConfig+0x2b8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a07      	ldr	r2, [pc, #28]	; (8002434 <HAL_RCC_OscConfig+0x2b8>)
 8002418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800241e:	f7ff fbeb 	bl	8001bf8 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002424:	e011      	b.n	800244a <HAL_RCC_OscConfig+0x2ce>
 8002426:	bf00      	nop
 8002428:	40023800 	.word	0x40023800
 800242c:	42470000 	.word	0x42470000
 8002430:	42470e80 	.word	0x42470e80
 8002434:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002438:	f7ff fbde 	bl	8001bf8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e0fd      	b.n	8002646 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244a:	4b81      	ldr	r3, [pc, #516]	; (8002650 <HAL_RCC_OscConfig+0x4d4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d106      	bne.n	800246c <HAL_RCC_OscConfig+0x2f0>
 800245e:	4b7d      	ldr	r3, [pc, #500]	; (8002654 <HAL_RCC_OscConfig+0x4d8>)
 8002460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002462:	4a7c      	ldr	r2, [pc, #496]	; (8002654 <HAL_RCC_OscConfig+0x4d8>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	6713      	str	r3, [r2, #112]	; 0x70
 800246a:	e01c      	b.n	80024a6 <HAL_RCC_OscConfig+0x32a>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2b05      	cmp	r3, #5
 8002472:	d10c      	bne.n	800248e <HAL_RCC_OscConfig+0x312>
 8002474:	4b77      	ldr	r3, [pc, #476]	; (8002654 <HAL_RCC_OscConfig+0x4d8>)
 8002476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002478:	4a76      	ldr	r2, [pc, #472]	; (8002654 <HAL_RCC_OscConfig+0x4d8>)
 800247a:	f043 0304 	orr.w	r3, r3, #4
 800247e:	6713      	str	r3, [r2, #112]	; 0x70
 8002480:	4b74      	ldr	r3, [pc, #464]	; (8002654 <HAL_RCC_OscConfig+0x4d8>)
 8002482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002484:	4a73      	ldr	r2, [pc, #460]	; (8002654 <HAL_RCC_OscConfig+0x4d8>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	6713      	str	r3, [r2, #112]	; 0x70
 800248c:	e00b      	b.n	80024a6 <HAL_RCC_OscConfig+0x32a>
 800248e:	4b71      	ldr	r3, [pc, #452]	; (8002654 <HAL_RCC_OscConfig+0x4d8>)
 8002490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002492:	4a70      	ldr	r2, [pc, #448]	; (8002654 <HAL_RCC_OscConfig+0x4d8>)
 8002494:	f023 0301 	bic.w	r3, r3, #1
 8002498:	6713      	str	r3, [r2, #112]	; 0x70
 800249a:	4b6e      	ldr	r3, [pc, #440]	; (8002654 <HAL_RCC_OscConfig+0x4d8>)
 800249c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249e:	4a6d      	ldr	r2, [pc, #436]	; (8002654 <HAL_RCC_OscConfig+0x4d8>)
 80024a0:	f023 0304 	bic.w	r3, r3, #4
 80024a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d015      	beq.n	80024da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ae:	f7ff fba3 	bl	8001bf8 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b4:	e00a      	b.n	80024cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b6:	f7ff fb9f 	bl	8001bf8 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e0bc      	b.n	8002646 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024cc:	4b61      	ldr	r3, [pc, #388]	; (8002654 <HAL_RCC_OscConfig+0x4d8>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0ee      	beq.n	80024b6 <HAL_RCC_OscConfig+0x33a>
 80024d8:	e014      	b.n	8002504 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024da:	f7ff fb8d 	bl	8001bf8 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e0:	e00a      	b.n	80024f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e2:	f7ff fb89 	bl	8001bf8 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e0a6      	b.n	8002646 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f8:	4b56      	ldr	r3, [pc, #344]	; (8002654 <HAL_RCC_OscConfig+0x4d8>)
 80024fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1ee      	bne.n	80024e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002504:	7dfb      	ldrb	r3, [r7, #23]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d105      	bne.n	8002516 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800250a:	4b52      	ldr	r3, [pc, #328]	; (8002654 <HAL_RCC_OscConfig+0x4d8>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	4a51      	ldr	r2, [pc, #324]	; (8002654 <HAL_RCC_OscConfig+0x4d8>)
 8002510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002514:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 8092 	beq.w	8002644 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002520:	4b4c      	ldr	r3, [pc, #304]	; (8002654 <HAL_RCC_OscConfig+0x4d8>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 030c 	and.w	r3, r3, #12
 8002528:	2b08      	cmp	r3, #8
 800252a:	d05c      	beq.n	80025e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d141      	bne.n	80025b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002534:	4b48      	ldr	r3, [pc, #288]	; (8002658 <HAL_RCC_OscConfig+0x4dc>)
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253a:	f7ff fb5d 	bl	8001bf8 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002542:	f7ff fb59 	bl	8001bf8 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e078      	b.n	8002646 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002554:	4b3f      	ldr	r3, [pc, #252]	; (8002654 <HAL_RCC_OscConfig+0x4d8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1f0      	bne.n	8002542 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69da      	ldr	r2, [r3, #28]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	019b      	lsls	r3, r3, #6
 8002570:	431a      	orrs	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	085b      	lsrs	r3, r3, #1
 8002578:	3b01      	subs	r3, #1
 800257a:	041b      	lsls	r3, r3, #16
 800257c:	431a      	orrs	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002582:	061b      	lsls	r3, r3, #24
 8002584:	4933      	ldr	r1, [pc, #204]	; (8002654 <HAL_RCC_OscConfig+0x4d8>)
 8002586:	4313      	orrs	r3, r2
 8002588:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800258a:	4b33      	ldr	r3, [pc, #204]	; (8002658 <HAL_RCC_OscConfig+0x4dc>)
 800258c:	2201      	movs	r2, #1
 800258e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7ff fb32 	bl	8001bf8 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002598:	f7ff fb2e 	bl	8001bf8 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e04d      	b.n	8002646 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025aa:	4b2a      	ldr	r3, [pc, #168]	; (8002654 <HAL_RCC_OscConfig+0x4d8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0f0      	beq.n	8002598 <HAL_RCC_OscConfig+0x41c>
 80025b6:	e045      	b.n	8002644 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b8:	4b27      	ldr	r3, [pc, #156]	; (8002658 <HAL_RCC_OscConfig+0x4dc>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025be:	f7ff fb1b 	bl	8001bf8 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c6:	f7ff fb17 	bl	8001bf8 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e036      	b.n	8002646 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d8:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <HAL_RCC_OscConfig+0x4d8>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1f0      	bne.n	80025c6 <HAL_RCC_OscConfig+0x44a>
 80025e4:	e02e      	b.n	8002644 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d101      	bne.n	80025f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e029      	b.n	8002646 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025f2:	4b18      	ldr	r3, [pc, #96]	; (8002654 <HAL_RCC_OscConfig+0x4d8>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	429a      	cmp	r2, r3
 8002604:	d11c      	bne.n	8002640 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002610:	429a      	cmp	r2, r3
 8002612:	d115      	bne.n	8002640 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800261a:	4013      	ands	r3, r2
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002620:	4293      	cmp	r3, r2
 8002622:	d10d      	bne.n	8002640 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800262e:	429a      	cmp	r2, r3
 8002630:	d106      	bne.n	8002640 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800263c:	429a      	cmp	r2, r3
 800263e:	d001      	beq.n	8002644 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e000      	b.n	8002646 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40007000 	.word	0x40007000
 8002654:	40023800 	.word	0x40023800
 8002658:	42470060 	.word	0x42470060

0800265c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0cc      	b.n	800280a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002670:	4b68      	ldr	r3, [pc, #416]	; (8002814 <HAL_RCC_ClockConfig+0x1b8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 030f 	and.w	r3, r3, #15
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d90c      	bls.n	8002698 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267e:	4b65      	ldr	r3, [pc, #404]	; (8002814 <HAL_RCC_ClockConfig+0x1b8>)
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002686:	4b63      	ldr	r3, [pc, #396]	; (8002814 <HAL_RCC_ClockConfig+0x1b8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d001      	beq.n	8002698 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0b8      	b.n	800280a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d020      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026b0:	4b59      	ldr	r3, [pc, #356]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	4a58      	ldr	r2, [pc, #352]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026c8:	4b53      	ldr	r3, [pc, #332]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	4a52      	ldr	r2, [pc, #328]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d4:	4b50      	ldr	r3, [pc, #320]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	494d      	ldr	r1, [pc, #308]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d044      	beq.n	800277c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d107      	bne.n	800270a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fa:	4b47      	ldr	r3, [pc, #284]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d119      	bne.n	800273a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e07f      	b.n	800280a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d003      	beq.n	800271a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002716:	2b03      	cmp	r3, #3
 8002718:	d107      	bne.n	800272a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800271a:	4b3f      	ldr	r3, [pc, #252]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e06f      	b.n	800280a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272a:	4b3b      	ldr	r3, [pc, #236]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e067      	b.n	800280a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800273a:	4b37      	ldr	r3, [pc, #220]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f023 0203 	bic.w	r2, r3, #3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4934      	ldr	r1, [pc, #208]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 8002748:	4313      	orrs	r3, r2
 800274a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800274c:	f7ff fa54 	bl	8001bf8 <HAL_GetTick>
 8002750:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002752:	e00a      	b.n	800276a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002754:	f7ff fa50 	bl	8001bf8 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e04f      	b.n	800280a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276a:	4b2b      	ldr	r3, [pc, #172]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 020c 	and.w	r2, r3, #12
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	429a      	cmp	r2, r3
 800277a:	d1eb      	bne.n	8002754 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800277c:	4b25      	ldr	r3, [pc, #148]	; (8002814 <HAL_RCC_ClockConfig+0x1b8>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 030f 	and.w	r3, r3, #15
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d20c      	bcs.n	80027a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278a:	4b22      	ldr	r3, [pc, #136]	; (8002814 <HAL_RCC_ClockConfig+0x1b8>)
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002792:	4b20      	ldr	r3, [pc, #128]	; (8002814 <HAL_RCC_ClockConfig+0x1b8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	429a      	cmp	r2, r3
 800279e:	d001      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e032      	b.n	800280a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d008      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027b0:	4b19      	ldr	r3, [pc, #100]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4916      	ldr	r1, [pc, #88]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d009      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027ce:	4b12      	ldr	r3, [pc, #72]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	490e      	ldr	r1, [pc, #56]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027e2:	f000 f821 	bl	8002828 <HAL_RCC_GetSysClockFreq>
 80027e6:	4601      	mov	r1, r0
 80027e8:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	091b      	lsrs	r3, r3, #4
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	4a0a      	ldr	r2, [pc, #40]	; (800281c <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	5cd3      	ldrb	r3, [r2, r3]
 80027f6:	fa21 f303 	lsr.w	r3, r1, r3
 80027fa:	4a09      	ldr	r2, [pc, #36]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <HAL_RCC_ClockConfig+0x1c8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff f9b4 	bl	8001b70 <HAL_InitTick>

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40023c00 	.word	0x40023c00
 8002818:	40023800 	.word	0x40023800
 800281c:	08007188 	.word	0x08007188
 8002820:	20000000 	.word	0x20000000
 8002824:	20000004 	.word	0x20000004

08002828 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	607b      	str	r3, [r7, #4]
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	2300      	movs	r3, #0
 8002838:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800283a:	2300      	movs	r3, #0
 800283c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800283e:	4b50      	ldr	r3, [pc, #320]	; (8002980 <HAL_RCC_GetSysClockFreq+0x158>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b04      	cmp	r3, #4
 8002848:	d007      	beq.n	800285a <HAL_RCC_GetSysClockFreq+0x32>
 800284a:	2b08      	cmp	r3, #8
 800284c:	d008      	beq.n	8002860 <HAL_RCC_GetSysClockFreq+0x38>
 800284e:	2b00      	cmp	r3, #0
 8002850:	f040 808d 	bne.w	800296e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002854:	4b4b      	ldr	r3, [pc, #300]	; (8002984 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002856:	60bb      	str	r3, [r7, #8]
       break;
 8002858:	e08c      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800285a:	4b4b      	ldr	r3, [pc, #300]	; (8002988 <HAL_RCC_GetSysClockFreq+0x160>)
 800285c:	60bb      	str	r3, [r7, #8]
      break;
 800285e:	e089      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002860:	4b47      	ldr	r3, [pc, #284]	; (8002980 <HAL_RCC_GetSysClockFreq+0x158>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002868:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800286a:	4b45      	ldr	r3, [pc, #276]	; (8002980 <HAL_RCC_GetSysClockFreq+0x158>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d023      	beq.n	80028be <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002876:	4b42      	ldr	r3, [pc, #264]	; (8002980 <HAL_RCC_GetSysClockFreq+0x158>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	099b      	lsrs	r3, r3, #6
 800287c:	f04f 0400 	mov.w	r4, #0
 8002880:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	ea03 0501 	and.w	r5, r3, r1
 800288c:	ea04 0602 	and.w	r6, r4, r2
 8002890:	4a3d      	ldr	r2, [pc, #244]	; (8002988 <HAL_RCC_GetSysClockFreq+0x160>)
 8002892:	fb02 f106 	mul.w	r1, r2, r6
 8002896:	2200      	movs	r2, #0
 8002898:	fb02 f205 	mul.w	r2, r2, r5
 800289c:	440a      	add	r2, r1
 800289e:	493a      	ldr	r1, [pc, #232]	; (8002988 <HAL_RCC_GetSysClockFreq+0x160>)
 80028a0:	fba5 0101 	umull	r0, r1, r5, r1
 80028a4:	1853      	adds	r3, r2, r1
 80028a6:	4619      	mov	r1, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f04f 0400 	mov.w	r4, #0
 80028ae:	461a      	mov	r2, r3
 80028b0:	4623      	mov	r3, r4
 80028b2:	f7fe f9d1 	bl	8000c58 <__aeabi_uldivmod>
 80028b6:	4603      	mov	r3, r0
 80028b8:	460c      	mov	r4, r1
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	e049      	b.n	8002952 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028be:	4b30      	ldr	r3, [pc, #192]	; (8002980 <HAL_RCC_GetSysClockFreq+0x158>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	099b      	lsrs	r3, r3, #6
 80028c4:	f04f 0400 	mov.w	r4, #0
 80028c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	ea03 0501 	and.w	r5, r3, r1
 80028d4:	ea04 0602 	and.w	r6, r4, r2
 80028d8:	4629      	mov	r1, r5
 80028da:	4632      	mov	r2, r6
 80028dc:	f04f 0300 	mov.w	r3, #0
 80028e0:	f04f 0400 	mov.w	r4, #0
 80028e4:	0154      	lsls	r4, r2, #5
 80028e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028ea:	014b      	lsls	r3, r1, #5
 80028ec:	4619      	mov	r1, r3
 80028ee:	4622      	mov	r2, r4
 80028f0:	1b49      	subs	r1, r1, r5
 80028f2:	eb62 0206 	sbc.w	r2, r2, r6
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	f04f 0400 	mov.w	r4, #0
 80028fe:	0194      	lsls	r4, r2, #6
 8002900:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002904:	018b      	lsls	r3, r1, #6
 8002906:	1a5b      	subs	r3, r3, r1
 8002908:	eb64 0402 	sbc.w	r4, r4, r2
 800290c:	f04f 0100 	mov.w	r1, #0
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	00e2      	lsls	r2, r4, #3
 8002916:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800291a:	00d9      	lsls	r1, r3, #3
 800291c:	460b      	mov	r3, r1
 800291e:	4614      	mov	r4, r2
 8002920:	195b      	adds	r3, r3, r5
 8002922:	eb44 0406 	adc.w	r4, r4, r6
 8002926:	f04f 0100 	mov.w	r1, #0
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	02a2      	lsls	r2, r4, #10
 8002930:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002934:	0299      	lsls	r1, r3, #10
 8002936:	460b      	mov	r3, r1
 8002938:	4614      	mov	r4, r2
 800293a:	4618      	mov	r0, r3
 800293c:	4621      	mov	r1, r4
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f04f 0400 	mov.w	r4, #0
 8002944:	461a      	mov	r2, r3
 8002946:	4623      	mov	r3, r4
 8002948:	f7fe f986 	bl	8000c58 <__aeabi_uldivmod>
 800294c:	4603      	mov	r3, r0
 800294e:	460c      	mov	r4, r1
 8002950:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002952:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <HAL_RCC_GetSysClockFreq+0x158>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	0c1b      	lsrs	r3, r3, #16
 8002958:	f003 0303 	and.w	r3, r3, #3
 800295c:	3301      	adds	r3, #1
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	fbb2 f3f3 	udiv	r3, r2, r3
 800296a:	60bb      	str	r3, [r7, #8]
      break;
 800296c:	e002      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800296e:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002970:	60bb      	str	r3, [r7, #8]
      break;
 8002972:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002974:	68bb      	ldr	r3, [r7, #8]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800297e:	bf00      	nop
 8002980:	40023800 	.word	0x40023800
 8002984:	00f42400 	.word	0x00f42400
 8002988:	017d7840 	.word	0x017d7840

0800298c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002990:	4b03      	ldr	r3, [pc, #12]	; (80029a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002992:	681b      	ldr	r3, [r3, #0]
}
 8002994:	4618      	mov	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	20000000 	.word	0x20000000

080029a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029a8:	f7ff fff0 	bl	800298c <HAL_RCC_GetHCLKFreq>
 80029ac:	4601      	mov	r1, r0
 80029ae:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	0a9b      	lsrs	r3, r3, #10
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	4a03      	ldr	r2, [pc, #12]	; (80029c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ba:	5cd3      	ldrb	r3, [r2, r3]
 80029bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40023800 	.word	0x40023800
 80029c8:	08007198 	.word	0x08007198

080029cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029d0:	f7ff ffdc 	bl	800298c <HAL_RCC_GetHCLKFreq>
 80029d4:	4601      	mov	r1, r0
 80029d6:	4b05      	ldr	r3, [pc, #20]	; (80029ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	0b5b      	lsrs	r3, r3, #13
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	4a03      	ldr	r2, [pc, #12]	; (80029f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029e2:	5cd3      	ldrb	r3, [r2, r3]
 80029e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40023800 	.word	0x40023800
 80029f0:	08007198 	.word	0x08007198

080029f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e01d      	b.n	8002a42 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d106      	bne.n	8002a20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7fe fd00 	bl	8001420 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2202      	movs	r2, #2
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3304      	adds	r3, #4
 8002a30:	4619      	mov	r1, r3
 8002a32:	4610      	mov	r0, r2
 8002a34:	f000 fb28 	bl	8003088 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e01d      	b.n	8002a98 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d106      	bne.n	8002a76 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f815 	bl	8002aa0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2202      	movs	r2, #2
 8002a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3304      	adds	r3, #4
 8002a86:	4619      	mov	r1, r3
 8002a88:	4610      	mov	r0, r2
 8002a8a:	f000 fafd 	bl	8003088 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	6839      	ldr	r1, [r7, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 fd84 	bl	80035d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a10      	ldr	r2, [pc, #64]	; (8002b14 <HAL_TIM_PWM_Start+0x60>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d107      	bne.n	8002ae6 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ae4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2b06      	cmp	r3, #6
 8002af6:	d007      	beq.n	8002b08 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0201 	orr.w	r2, r2, #1
 8002b06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40010000 	.word	0x40010000

08002b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d122      	bne.n	8002b74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d11b      	bne.n	8002b74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f06f 0202 	mvn.w	r2, #2
 8002b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 fa75 	bl	800304a <HAL_TIM_IC_CaptureCallback>
 8002b60:	e005      	b.n	8002b6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 fa67 	bl	8003036 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 fa78 	bl	800305e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d122      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d11b      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f06f 0204 	mvn.w	r2, #4
 8002b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 fa4b 	bl	800304a <HAL_TIM_IC_CaptureCallback>
 8002bb4:	e005      	b.n	8002bc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 fa3d 	bl	8003036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 fa4e 	bl	800305e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d122      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d11b      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f06f 0208 	mvn.w	r2, #8
 8002bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fa21 	bl	800304a <HAL_TIM_IC_CaptureCallback>
 8002c08:	e005      	b.n	8002c16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 fa13 	bl	8003036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 fa24 	bl	800305e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f003 0310 	and.w	r3, r3, #16
 8002c26:	2b10      	cmp	r3, #16
 8002c28:	d122      	bne.n	8002c70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	2b10      	cmp	r3, #16
 8002c36:	d11b      	bne.n	8002c70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f06f 0210 	mvn.w	r2, #16
 8002c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2208      	movs	r2, #8
 8002c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f9f7 	bl	800304a <HAL_TIM_IC_CaptureCallback>
 8002c5c:	e005      	b.n	8002c6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f9e9 	bl	8003036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f9fa 	bl	800305e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d10e      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d107      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f06f 0201 	mvn.w	r2, #1
 8002c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f9c3 	bl	8003022 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca6:	2b80      	cmp	r3, #128	; 0x80
 8002ca8:	d10e      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb4:	2b80      	cmp	r3, #128	; 0x80
 8002cb6:	d107      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 fd24 	bl	8003710 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd2:	2b40      	cmp	r3, #64	; 0x40
 8002cd4:	d10e      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce0:	2b40      	cmp	r3, #64	; 0x40
 8002ce2:	d107      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f9bf 	bl	8003072 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f003 0320 	and.w	r3, r3, #32
 8002cfe:	2b20      	cmp	r3, #32
 8002d00:	d10e      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0320 	and.w	r3, r3, #32
 8002d0c:	2b20      	cmp	r3, #32
 8002d0e:	d107      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f06f 0220 	mvn.w	r2, #32
 8002d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fcee 	bl	80036fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d20:	bf00      	nop
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e0b4      	b.n	8002eac <HAL_TIM_PWM_ConfigChannel+0x184>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b0c      	cmp	r3, #12
 8002d56:	f200 809f 	bhi.w	8002e98 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002d5a:	a201      	add	r2, pc, #4	; (adr r2, 8002d60 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d60:	08002d95 	.word	0x08002d95
 8002d64:	08002e99 	.word	0x08002e99
 8002d68:	08002e99 	.word	0x08002e99
 8002d6c:	08002e99 	.word	0x08002e99
 8002d70:	08002dd5 	.word	0x08002dd5
 8002d74:	08002e99 	.word	0x08002e99
 8002d78:	08002e99 	.word	0x08002e99
 8002d7c:	08002e99 	.word	0x08002e99
 8002d80:	08002e17 	.word	0x08002e17
 8002d84:	08002e99 	.word	0x08002e99
 8002d88:	08002e99 	.word	0x08002e99
 8002d8c:	08002e99 	.word	0x08002e99
 8002d90:	08002e57 	.word	0x08002e57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68b9      	ldr	r1, [r7, #8]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 f9f4 	bl	8003188 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699a      	ldr	r2, [r3, #24]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0208 	orr.w	r2, r2, #8
 8002dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699a      	ldr	r2, [r3, #24]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0204 	bic.w	r2, r2, #4
 8002dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6999      	ldr	r1, [r3, #24]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	691a      	ldr	r2, [r3, #16]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	619a      	str	r2, [r3, #24]
      break;
 8002dd2:	e062      	b.n	8002e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68b9      	ldr	r1, [r7, #8]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 fa3a 	bl	8003254 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699a      	ldr	r2, [r3, #24]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	699a      	ldr	r2, [r3, #24]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6999      	ldr	r1, [r3, #24]
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	021a      	lsls	r2, r3, #8
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	619a      	str	r2, [r3, #24]
      break;
 8002e14:	e041      	b.n	8002e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68b9      	ldr	r1, [r7, #8]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 fa85 	bl	800332c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	69da      	ldr	r2, [r3, #28]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 0208 	orr.w	r2, r2, #8
 8002e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	69da      	ldr	r2, [r3, #28]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0204 	bic.w	r2, r2, #4
 8002e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	69d9      	ldr	r1, [r3, #28]
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	61da      	str	r2, [r3, #28]
      break;
 8002e54:	e021      	b.n	8002e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68b9      	ldr	r1, [r7, #8]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 facf 	bl	8003400 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	69da      	ldr	r2, [r3, #28]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	69da      	ldr	r2, [r3, #28]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	69d9      	ldr	r1, [r3, #28]
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	021a      	lsls	r2, r3, #8
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	61da      	str	r2, [r3, #28]
      break;
 8002e96:	e000      	b.n	8002e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002e98:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d101      	bne.n	8002ecc <HAL_TIM_ConfigClockSource+0x18>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e0a6      	b.n	800301a <HAL_TIM_ConfigClockSource+0x166>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002eea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ef2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b40      	cmp	r3, #64	; 0x40
 8002f02:	d067      	beq.n	8002fd4 <HAL_TIM_ConfigClockSource+0x120>
 8002f04:	2b40      	cmp	r3, #64	; 0x40
 8002f06:	d80b      	bhi.n	8002f20 <HAL_TIM_ConfigClockSource+0x6c>
 8002f08:	2b10      	cmp	r3, #16
 8002f0a:	d073      	beq.n	8002ff4 <HAL_TIM_ConfigClockSource+0x140>
 8002f0c:	2b10      	cmp	r3, #16
 8002f0e:	d802      	bhi.n	8002f16 <HAL_TIM_ConfigClockSource+0x62>
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d06f      	beq.n	8002ff4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002f14:	e078      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f16:	2b20      	cmp	r3, #32
 8002f18:	d06c      	beq.n	8002ff4 <HAL_TIM_ConfigClockSource+0x140>
 8002f1a:	2b30      	cmp	r3, #48	; 0x30
 8002f1c:	d06a      	beq.n	8002ff4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002f1e:	e073      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f20:	2b70      	cmp	r3, #112	; 0x70
 8002f22:	d00d      	beq.n	8002f40 <HAL_TIM_ConfigClockSource+0x8c>
 8002f24:	2b70      	cmp	r3, #112	; 0x70
 8002f26:	d804      	bhi.n	8002f32 <HAL_TIM_ConfigClockSource+0x7e>
 8002f28:	2b50      	cmp	r3, #80	; 0x50
 8002f2a:	d033      	beq.n	8002f94 <HAL_TIM_ConfigClockSource+0xe0>
 8002f2c:	2b60      	cmp	r3, #96	; 0x60
 8002f2e:	d041      	beq.n	8002fb4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002f30:	e06a      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f36:	d066      	beq.n	8003006 <HAL_TIM_ConfigClockSource+0x152>
 8002f38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f3c:	d017      	beq.n	8002f6e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002f3e:	e063      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	6899      	ldr	r1, [r3, #8]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f000 fb20 	bl	8003594 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f62:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	609a      	str	r2, [r3, #8]
      break;
 8002f6c:	e04c      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	6899      	ldr	r1, [r3, #8]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f000 fb09 	bl	8003594 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f90:	609a      	str	r2, [r3, #8]
      break;
 8002f92:	e039      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6818      	ldr	r0, [r3, #0]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	6859      	ldr	r1, [r3, #4]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	f000 fa7d 	bl	80034a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2150      	movs	r1, #80	; 0x50
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 fad6 	bl	800355e <TIM_ITRx_SetConfig>
      break;
 8002fb2:	e029      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6818      	ldr	r0, [r3, #0]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	6859      	ldr	r1, [r3, #4]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	f000 fa9c 	bl	80034fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2160      	movs	r1, #96	; 0x60
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f000 fac6 	bl	800355e <TIM_ITRx_SetConfig>
      break;
 8002fd2:	e019      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6818      	ldr	r0, [r3, #0]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	6859      	ldr	r1, [r3, #4]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	f000 fa5d 	bl	80034a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2140      	movs	r1, #64	; 0x40
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 fab6 	bl	800355e <TIM_ITRx_SetConfig>
      break;
 8002ff2:	e009      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4610      	mov	r0, r2
 8003000:	f000 faad 	bl	800355e <TIM_ITRx_SetConfig>
      break;
 8003004:	e000      	b.n	8003008 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003006:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800305e:	b480      	push	{r7}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
	...

08003088 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a34      	ldr	r2, [pc, #208]	; (800316c <TIM_Base_SetConfig+0xe4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00f      	beq.n	80030c0 <TIM_Base_SetConfig+0x38>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a6:	d00b      	beq.n	80030c0 <TIM_Base_SetConfig+0x38>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a31      	ldr	r2, [pc, #196]	; (8003170 <TIM_Base_SetConfig+0xe8>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d007      	beq.n	80030c0 <TIM_Base_SetConfig+0x38>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a30      	ldr	r2, [pc, #192]	; (8003174 <TIM_Base_SetConfig+0xec>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d003      	beq.n	80030c0 <TIM_Base_SetConfig+0x38>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a2f      	ldr	r2, [pc, #188]	; (8003178 <TIM_Base_SetConfig+0xf0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d108      	bne.n	80030d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a25      	ldr	r2, [pc, #148]	; (800316c <TIM_Base_SetConfig+0xe4>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d01b      	beq.n	8003112 <TIM_Base_SetConfig+0x8a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e0:	d017      	beq.n	8003112 <TIM_Base_SetConfig+0x8a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a22      	ldr	r2, [pc, #136]	; (8003170 <TIM_Base_SetConfig+0xe8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d013      	beq.n	8003112 <TIM_Base_SetConfig+0x8a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a21      	ldr	r2, [pc, #132]	; (8003174 <TIM_Base_SetConfig+0xec>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00f      	beq.n	8003112 <TIM_Base_SetConfig+0x8a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a20      	ldr	r2, [pc, #128]	; (8003178 <TIM_Base_SetConfig+0xf0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00b      	beq.n	8003112 <TIM_Base_SetConfig+0x8a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a1f      	ldr	r2, [pc, #124]	; (800317c <TIM_Base_SetConfig+0xf4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d007      	beq.n	8003112 <TIM_Base_SetConfig+0x8a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a1e      	ldr	r2, [pc, #120]	; (8003180 <TIM_Base_SetConfig+0xf8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d003      	beq.n	8003112 <TIM_Base_SetConfig+0x8a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a1d      	ldr	r2, [pc, #116]	; (8003184 <TIM_Base_SetConfig+0xfc>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d108      	bne.n	8003124 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4313      	orrs	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	4313      	orrs	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a08      	ldr	r2, [pc, #32]	; (800316c <TIM_Base_SetConfig+0xe4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d103      	bne.n	8003158 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	615a      	str	r2, [r3, #20]
}
 800315e:	bf00      	nop
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40010000 	.word	0x40010000
 8003170:	40000400 	.word	0x40000400
 8003174:	40000800 	.word	0x40000800
 8003178:	40000c00 	.word	0x40000c00
 800317c:	40014000 	.word	0x40014000
 8003180:	40014400 	.word	0x40014400
 8003184:	40014800 	.word	0x40014800

08003188 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	f023 0201 	bic.w	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f023 0303 	bic.w	r3, r3, #3
 80031be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f023 0302 	bic.w	r3, r3, #2
 80031d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	4313      	orrs	r3, r2
 80031da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a1c      	ldr	r2, [pc, #112]	; (8003250 <TIM_OC1_SetConfig+0xc8>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d10c      	bne.n	80031fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f023 0308 	bic.w	r3, r3, #8
 80031ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f023 0304 	bic.w	r3, r3, #4
 80031fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a13      	ldr	r2, [pc, #76]	; (8003250 <TIM_OC1_SetConfig+0xc8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d111      	bne.n	800322a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800320c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	621a      	str	r2, [r3, #32]
}
 8003244:	bf00      	nop
 8003246:	371c      	adds	r7, #28
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	40010000 	.word	0x40010000

08003254 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	f023 0210 	bic.w	r2, r3, #16
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800328a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	021b      	lsls	r3, r3, #8
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4313      	orrs	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f023 0320 	bic.w	r3, r3, #32
 800329e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a1e      	ldr	r2, [pc, #120]	; (8003328 <TIM_OC2_SetConfig+0xd4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d10d      	bne.n	80032d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a15      	ldr	r2, [pc, #84]	; (8003328 <TIM_OC2_SetConfig+0xd4>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d113      	bne.n	8003300 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	621a      	str	r2, [r3, #32]
}
 800331a:	bf00      	nop
 800331c:	371c      	adds	r7, #28
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40010000 	.word	0x40010000

0800332c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800332c:	b480      	push	{r7}
 800332e:	b087      	sub	sp, #28
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800335a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f023 0303 	bic.w	r3, r3, #3
 8003362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	4313      	orrs	r3, r2
 800336c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	021b      	lsls	r3, r3, #8
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	4313      	orrs	r3, r2
 8003380:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a1d      	ldr	r2, [pc, #116]	; (80033fc <TIM_OC3_SetConfig+0xd0>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d10d      	bne.n	80033a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003390:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	021b      	lsls	r3, r3, #8
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	4313      	orrs	r3, r2
 800339c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a14      	ldr	r2, [pc, #80]	; (80033fc <TIM_OC3_SetConfig+0xd0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d113      	bne.n	80033d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	621a      	str	r2, [r3, #32]
}
 80033f0:	bf00      	nop
 80033f2:	371c      	adds	r7, #28
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	40010000 	.word	0x40010000

08003400 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800342e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	021b      	lsls	r3, r3, #8
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800344a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	031b      	lsls	r3, r3, #12
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a10      	ldr	r2, [pc, #64]	; (800349c <TIM_OC4_SetConfig+0x9c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d109      	bne.n	8003474 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003466:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	019b      	lsls	r3, r3, #6
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	4313      	orrs	r3, r2
 8003472:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	621a      	str	r2, [r3, #32]
}
 800348e:	bf00      	nop
 8003490:	371c      	adds	r7, #28
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40010000 	.word	0x40010000

080034a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	f023 0201 	bic.w	r2, r3, #1
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f023 030a 	bic.w	r3, r3, #10
 80034dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	621a      	str	r2, [r3, #32]
}
 80034f2:	bf00      	nop
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034fe:	b480      	push	{r7}
 8003500:	b087      	sub	sp, #28
 8003502:	af00      	add	r7, sp, #0
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	f023 0210 	bic.w	r2, r3, #16
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003528:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	031b      	lsls	r3, r3, #12
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800353a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	4313      	orrs	r3, r2
 8003544:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	621a      	str	r2, [r3, #32]
}
 8003552:	bf00      	nop
 8003554:	371c      	adds	r7, #28
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800355e:	b480      	push	{r7}
 8003560:	b085      	sub	sp, #20
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003574:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	f043 0307 	orr.w	r3, r3, #7
 8003580:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	609a      	str	r2, [r3, #8]
}
 8003588:	bf00      	nop
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003594:	b480      	push	{r7}
 8003596:	b087      	sub	sp, #28
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
 80035a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	021a      	lsls	r2, r3, #8
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	431a      	orrs	r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	4313      	orrs	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	609a      	str	r2, [r3, #8]
}
 80035c8:	bf00      	nop
 80035ca:	371c      	adds	r7, #28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f003 031f 	and.w	r3, r3, #31
 80035e6:	2201      	movs	r2, #1
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a1a      	ldr	r2, [r3, #32]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	43db      	mvns	r3, r3
 80035f6:	401a      	ands	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a1a      	ldr	r2, [r3, #32]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	f003 031f 	and.w	r3, r3, #31
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	fa01 f303 	lsl.w	r3, r1, r3
 800360c:	431a      	orrs	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	621a      	str	r2, [r3, #32]
}
 8003612:	bf00      	nop
 8003614:	371c      	adds	r7, #28
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003634:	2302      	movs	r3, #2
 8003636:	e050      	b.n	80036da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a1c      	ldr	r2, [pc, #112]	; (80036e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d018      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003684:	d013      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a18      	ldr	r2, [pc, #96]	; (80036ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00e      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a16      	ldr	r2, [pc, #88]	; (80036f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d009      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a15      	ldr	r2, [pc, #84]	; (80036f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d004      	beq.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a13      	ldr	r2, [pc, #76]	; (80036f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d10c      	bne.n	80036c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	40010000 	.word	0x40010000
 80036ec:	40000400 	.word	0x40000400
 80036f0:	40000800 	.word	0x40000800
 80036f4:	40000c00 	.word	0x40000c00
 80036f8:	40014000 	.word	0x40014000

080036fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e03f      	b.n	80037b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d106      	bne.n	8003750 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7fd fee4 	bl	8001518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2224      	movs	r2, #36	; 0x24
 8003754:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003766:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 fbdb 	bl	8003f24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800377c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800378c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800379c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b088      	sub	sp, #32
 80037c2:	af02      	add	r7, sp, #8
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	60b9      	str	r1, [r7, #8]
 80037c8:	603b      	str	r3, [r7, #0]
 80037ca:	4613      	mov	r3, r2
 80037cc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b20      	cmp	r3, #32
 80037dc:	f040 8083 	bne.w	80038e6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <HAL_UART_Transmit+0x2e>
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e07b      	b.n	80038e8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <HAL_UART_Transmit+0x40>
 80037fa:	2302      	movs	r3, #2
 80037fc:	e074      	b.n	80038e8 <HAL_UART_Transmit+0x12a>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2221      	movs	r2, #33	; 0x21
 8003810:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003814:	f7fe f9f0 	bl	8001bf8 <HAL_GetTick>
 8003818:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	88fa      	ldrh	r2, [r7, #6]
 800381e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	88fa      	ldrh	r2, [r7, #6]
 8003824:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800382e:	e042      	b.n	80038b6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003834:	b29b      	uxth	r3, r3
 8003836:	3b01      	subs	r3, #1
 8003838:	b29a      	uxth	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003846:	d122      	bne.n	800388e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	2200      	movs	r2, #0
 8003850:	2180      	movs	r1, #128	; 0x80
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f9fa 	bl	8003c4c <UART_WaitOnFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e042      	b.n	80038e8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	461a      	mov	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003874:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d103      	bne.n	8003886 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	3302      	adds	r3, #2
 8003882:	60bb      	str	r3, [r7, #8]
 8003884:	e017      	b.n	80038b6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	3301      	adds	r3, #1
 800388a:	60bb      	str	r3, [r7, #8]
 800388c:	e013      	b.n	80038b6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2200      	movs	r2, #0
 8003896:	2180      	movs	r1, #128	; 0x80
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 f9d7 	bl	8003c4c <UART_WaitOnFlagUntilTimeout>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e01f      	b.n	80038e8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	60ba      	str	r2, [r7, #8]
 80038ae:	781a      	ldrb	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1b7      	bne.n	8003830 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	2200      	movs	r2, #0
 80038c8:	2140      	movs	r1, #64	; 0x40
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 f9be 	bl	8003c4c <UART_WaitOnFlagUntilTimeout>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e006      	b.n	80038e8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2220      	movs	r2, #32
 80038de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	e000      	b.n	80038e8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80038e6:	2302      	movs	r3, #2
  }
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	4613      	mov	r3, r2
 80038fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b20      	cmp	r3, #32
 8003908:	d130      	bne.n	800396c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d002      	beq.n	8003916 <HAL_UART_Transmit_IT+0x26>
 8003910:	88fb      	ldrh	r3, [r7, #6]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e029      	b.n	800396e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003920:	2b01      	cmp	r3, #1
 8003922:	d101      	bne.n	8003928 <HAL_UART_Transmit_IT+0x38>
 8003924:	2302      	movs	r3, #2
 8003926:	e022      	b.n	800396e <HAL_UART_Transmit_IT+0x7e>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	88fa      	ldrh	r2, [r7, #6]
 800393a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	88fa      	ldrh	r2, [r7, #6]
 8003940:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2221      	movs	r2, #33	; 0x21
 800394c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003966:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003968:	2300      	movs	r3, #0
 800396a:	e000      	b.n	800396e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800396c:	2302      	movs	r3, #2
  }
}
 800396e:	4618      	mov	r0, r3
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800397a:	b480      	push	{r7}
 800397c:	b085      	sub	sp, #20
 800397e:	af00      	add	r7, sp, #0
 8003980:	60f8      	str	r0, [r7, #12]
 8003982:	60b9      	str	r1, [r7, #8]
 8003984:	4613      	mov	r3, r2
 8003986:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b20      	cmp	r3, #32
 8003992:	d140      	bne.n	8003a16 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <HAL_UART_Receive_IT+0x26>
 800399a:	88fb      	ldrh	r3, [r7, #6]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e039      	b.n	8003a18 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d101      	bne.n	80039b2 <HAL_UART_Receive_IT+0x38>
 80039ae:	2302      	movs	r3, #2
 80039b0:	e032      	b.n	8003a18 <HAL_UART_Receive_IT+0x9e>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	88fa      	ldrh	r2, [r7, #6]
 80039c4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	88fa      	ldrh	r2, [r7, #6]
 80039ca:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2222      	movs	r2, #34	; 0x22
 80039d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039f0:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695a      	ldr	r2, [r3, #20]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f042 0201 	orr.w	r2, r2, #1
 8003a00:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68da      	ldr	r2, [r3, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f042 0220 	orr.w	r2, r2, #32
 8003a10:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	e000      	b.n	8003a18 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003a16:	2302      	movs	r3, #2
  }
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10d      	bne.n	8003a76 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	f003 0320 	and.w	r3, r3, #32
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d008      	beq.n	8003a76 <HAL_UART_IRQHandler+0x52>
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f9d6 	bl	8003e20 <UART_Receive_IT>
      return;
 8003a74:	e0d1      	b.n	8003c1a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 80b0 	beq.w	8003bde <HAL_UART_IRQHandler+0x1ba>
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d105      	bne.n	8003a94 <HAL_UART_IRQHandler+0x70>
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 80a5 	beq.w	8003bde <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <HAL_UART_IRQHandler+0x90>
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aac:	f043 0201 	orr.w	r2, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <HAL_UART_IRQHandler+0xb0>
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d005      	beq.n	8003ad4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003acc:	f043 0202 	orr.w	r2, r3, #2
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00a      	beq.n	8003af4 <HAL_UART_IRQHandler+0xd0>
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aec:	f043 0204 	orr.w	r2, r3, #4
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00f      	beq.n	8003b1e <HAL_UART_IRQHandler+0xfa>
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	f003 0320 	and.w	r3, r3, #32
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d104      	bne.n	8003b12 <HAL_UART_IRQHandler+0xee>
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d005      	beq.n	8003b1e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b16:	f043 0208 	orr.w	r2, r3, #8
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d078      	beq.n	8003c18 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	f003 0320 	and.w	r3, r3, #32
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d007      	beq.n	8003b40 <HAL_UART_IRQHandler+0x11c>
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f970 	bl	8003e20 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4a:	2b40      	cmp	r3, #64	; 0x40
 8003b4c:	bf0c      	ite	eq
 8003b4e:	2301      	moveq	r3, #1
 8003b50:	2300      	movne	r3, #0
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d102      	bne.n	8003b68 <HAL_UART_IRQHandler+0x144>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d031      	beq.n	8003bcc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f8b9 	bl	8003ce0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b78:	2b40      	cmp	r3, #64	; 0x40
 8003b7a:	d123      	bne.n	8003bc4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695a      	ldr	r2, [r3, #20]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b8a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d013      	beq.n	8003bbc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b98:	4a21      	ldr	r2, [pc, #132]	; (8003c20 <HAL_UART_IRQHandler+0x1fc>)
 8003b9a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fe f946 	bl	8001e32 <HAL_DMA_Abort_IT>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d016      	beq.n	8003bda <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003bb6:	4610      	mov	r0, r2
 8003bb8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bba:	e00e      	b.n	8003bda <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f83b 	bl	8003c38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc2:	e00a      	b.n	8003bda <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f837 	bl	8003c38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bca:	e006      	b.n	8003bda <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f833 	bl	8003c38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003bd8:	e01e      	b.n	8003c18 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bda:	bf00      	nop
    return;
 8003bdc:	e01c      	b.n	8003c18 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d008      	beq.n	8003bfa <HAL_UART_IRQHandler+0x1d6>
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f8a6 	bl	8003d44 <UART_Transmit_IT>
    return;
 8003bf8:	e00f      	b.n	8003c1a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00a      	beq.n	8003c1a <HAL_UART_IRQHandler+0x1f6>
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d005      	beq.n	8003c1a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f8ee 	bl	8003df0 <UART_EndTransmit_IT>
    return;
 8003c14:	bf00      	nop
 8003c16:	e000      	b.n	8003c1a <HAL_UART_IRQHandler+0x1f6>
    return;
 8003c18:	bf00      	nop
  }
}
 8003c1a:	3720      	adds	r7, #32
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	08003d1d 	.word	0x08003d1d

08003c24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	603b      	str	r3, [r7, #0]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c5c:	e02c      	b.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c64:	d028      	beq.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d007      	beq.n	8003c7c <UART_WaitOnFlagUntilTimeout+0x30>
 8003c6c:	f7fd ffc4 	bl	8001bf8 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d21d      	bcs.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c8a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695a      	ldr	r2, [r3, #20]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0201 	bic.w	r2, r2, #1
 8003c9a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e00f      	b.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	bf0c      	ite	eq
 8003cc8:	2301      	moveq	r3, #1
 8003cca:	2300      	movne	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	79fb      	ldrb	r3, [r7, #7]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d0c3      	beq.n	8003c5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003cf6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	695a      	ldr	r2, [r3, #20]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0201 	bic.w	r2, r2, #1
 8003d06:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f7ff ff7e 	bl	8003c38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d3c:	bf00      	nop
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b21      	cmp	r3, #33	; 0x21
 8003d56:	d144      	bne.n	8003de2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d60:	d11a      	bne.n	8003d98 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d76:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d105      	bne.n	8003d8c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	1c9a      	adds	r2, r3, #2
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	621a      	str	r2, [r3, #32]
 8003d8a:	e00e      	b.n	8003daa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	621a      	str	r2, [r3, #32]
 8003d96:	e008      	b.n	8003daa <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	1c59      	adds	r1, r3, #1
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6211      	str	r1, [r2, #32]
 8003da2:	781a      	ldrb	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	3b01      	subs	r3, #1
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	4619      	mov	r1, r3
 8003db8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10f      	bne.n	8003dde <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68da      	ldr	r2, [r3, #12]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dcc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ddc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	e000      	b.n	8003de4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003de2:	2302      	movs	r3, #2
  }
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e06:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff ff07 	bl	8003c24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b22      	cmp	r3, #34	; 0x22
 8003e32:	d171      	bne.n	8003f18 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e3c:	d123      	bne.n	8003e86 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e42:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10e      	bne.n	8003e6a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e62:	1c9a      	adds	r2, r3, #2
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	629a      	str	r2, [r3, #40]	; 0x28
 8003e68:	e029      	b.n	8003ebe <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	629a      	str	r2, [r3, #40]	; 0x28
 8003e84:	e01b      	b.n	8003ebe <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10a      	bne.n	8003ea4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6858      	ldr	r0, [r3, #4]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	1c59      	adds	r1, r3, #1
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6291      	str	r1, [r2, #40]	; 0x28
 8003e9e:	b2c2      	uxtb	r2, r0
 8003ea0:	701a      	strb	r2, [r3, #0]
 8003ea2:	e00c      	b.n	8003ebe <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	1c58      	adds	r0, r3, #1
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	6288      	str	r0, [r1, #40]	; 0x28
 8003eb6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	4619      	mov	r1, r3
 8003ecc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d120      	bne.n	8003f14 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68da      	ldr	r2, [r3, #12]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0220 	bic.w	r2, r2, #32
 8003ee0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ef0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	695a      	ldr	r2, [r3, #20]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0201 	bic.w	r2, r2, #1
 8003f00:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7fd f824 	bl	8000f58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	e002      	b.n	8003f1a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003f14:	2300      	movs	r3, #0
 8003f16:	e000      	b.n	8003f1a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003f18:	2302      	movs	r3, #2
  }
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
	...

08003f24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f28:	b085      	sub	sp, #20
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003f66:	f023 030c 	bic.w	r3, r3, #12
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6812      	ldr	r2, [r2, #0]
 8003f6e:	68f9      	ldr	r1, [r7, #12]
 8003f70:	430b      	orrs	r3, r1
 8003f72:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699a      	ldr	r2, [r3, #24]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f92:	f040 818b 	bne.w	80042ac <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4ac1      	ldr	r2, [pc, #772]	; (80042a0 <UART_SetConfig+0x37c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d005      	beq.n	8003fac <UART_SetConfig+0x88>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4abf      	ldr	r2, [pc, #764]	; (80042a4 <UART_SetConfig+0x380>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	f040 80bd 	bne.w	8004126 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fac:	f7fe fd0e 	bl	80029cc <HAL_RCC_GetPCLK2Freq>
 8003fb0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	461d      	mov	r5, r3
 8003fb6:	f04f 0600 	mov.w	r6, #0
 8003fba:	46a8      	mov	r8, r5
 8003fbc:	46b1      	mov	r9, r6
 8003fbe:	eb18 0308 	adds.w	r3, r8, r8
 8003fc2:	eb49 0409 	adc.w	r4, r9, r9
 8003fc6:	4698      	mov	r8, r3
 8003fc8:	46a1      	mov	r9, r4
 8003fca:	eb18 0805 	adds.w	r8, r8, r5
 8003fce:	eb49 0906 	adc.w	r9, r9, r6
 8003fd2:	f04f 0100 	mov.w	r1, #0
 8003fd6:	f04f 0200 	mov.w	r2, #0
 8003fda:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003fde:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003fe2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003fe6:	4688      	mov	r8, r1
 8003fe8:	4691      	mov	r9, r2
 8003fea:	eb18 0005 	adds.w	r0, r8, r5
 8003fee:	eb49 0106 	adc.w	r1, r9, r6
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	461d      	mov	r5, r3
 8003ff8:	f04f 0600 	mov.w	r6, #0
 8003ffc:	196b      	adds	r3, r5, r5
 8003ffe:	eb46 0406 	adc.w	r4, r6, r6
 8004002:	461a      	mov	r2, r3
 8004004:	4623      	mov	r3, r4
 8004006:	f7fc fe27 	bl	8000c58 <__aeabi_uldivmod>
 800400a:	4603      	mov	r3, r0
 800400c:	460c      	mov	r4, r1
 800400e:	461a      	mov	r2, r3
 8004010:	4ba5      	ldr	r3, [pc, #660]	; (80042a8 <UART_SetConfig+0x384>)
 8004012:	fba3 2302 	umull	r2, r3, r3, r2
 8004016:	095b      	lsrs	r3, r3, #5
 8004018:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	461d      	mov	r5, r3
 8004020:	f04f 0600 	mov.w	r6, #0
 8004024:	46a9      	mov	r9, r5
 8004026:	46b2      	mov	sl, r6
 8004028:	eb19 0309 	adds.w	r3, r9, r9
 800402c:	eb4a 040a 	adc.w	r4, sl, sl
 8004030:	4699      	mov	r9, r3
 8004032:	46a2      	mov	sl, r4
 8004034:	eb19 0905 	adds.w	r9, r9, r5
 8004038:	eb4a 0a06 	adc.w	sl, sl, r6
 800403c:	f04f 0100 	mov.w	r1, #0
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004048:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800404c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004050:	4689      	mov	r9, r1
 8004052:	4692      	mov	sl, r2
 8004054:	eb19 0005 	adds.w	r0, r9, r5
 8004058:	eb4a 0106 	adc.w	r1, sl, r6
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	461d      	mov	r5, r3
 8004062:	f04f 0600 	mov.w	r6, #0
 8004066:	196b      	adds	r3, r5, r5
 8004068:	eb46 0406 	adc.w	r4, r6, r6
 800406c:	461a      	mov	r2, r3
 800406e:	4623      	mov	r3, r4
 8004070:	f7fc fdf2 	bl	8000c58 <__aeabi_uldivmod>
 8004074:	4603      	mov	r3, r0
 8004076:	460c      	mov	r4, r1
 8004078:	461a      	mov	r2, r3
 800407a:	4b8b      	ldr	r3, [pc, #556]	; (80042a8 <UART_SetConfig+0x384>)
 800407c:	fba3 1302 	umull	r1, r3, r3, r2
 8004080:	095b      	lsrs	r3, r3, #5
 8004082:	2164      	movs	r1, #100	; 0x64
 8004084:	fb01 f303 	mul.w	r3, r1, r3
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	3332      	adds	r3, #50	; 0x32
 800408e:	4a86      	ldr	r2, [pc, #536]	; (80042a8 <UART_SetConfig+0x384>)
 8004090:	fba2 2303 	umull	r2, r3, r2, r3
 8004094:	095b      	lsrs	r3, r3, #5
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800409c:	4498      	add	r8, r3
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	461d      	mov	r5, r3
 80040a2:	f04f 0600 	mov.w	r6, #0
 80040a6:	46a9      	mov	r9, r5
 80040a8:	46b2      	mov	sl, r6
 80040aa:	eb19 0309 	adds.w	r3, r9, r9
 80040ae:	eb4a 040a 	adc.w	r4, sl, sl
 80040b2:	4699      	mov	r9, r3
 80040b4:	46a2      	mov	sl, r4
 80040b6:	eb19 0905 	adds.w	r9, r9, r5
 80040ba:	eb4a 0a06 	adc.w	sl, sl, r6
 80040be:	f04f 0100 	mov.w	r1, #0
 80040c2:	f04f 0200 	mov.w	r2, #0
 80040c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040d2:	4689      	mov	r9, r1
 80040d4:	4692      	mov	sl, r2
 80040d6:	eb19 0005 	adds.w	r0, r9, r5
 80040da:	eb4a 0106 	adc.w	r1, sl, r6
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	461d      	mov	r5, r3
 80040e4:	f04f 0600 	mov.w	r6, #0
 80040e8:	196b      	adds	r3, r5, r5
 80040ea:	eb46 0406 	adc.w	r4, r6, r6
 80040ee:	461a      	mov	r2, r3
 80040f0:	4623      	mov	r3, r4
 80040f2:	f7fc fdb1 	bl	8000c58 <__aeabi_uldivmod>
 80040f6:	4603      	mov	r3, r0
 80040f8:	460c      	mov	r4, r1
 80040fa:	461a      	mov	r2, r3
 80040fc:	4b6a      	ldr	r3, [pc, #424]	; (80042a8 <UART_SetConfig+0x384>)
 80040fe:	fba3 1302 	umull	r1, r3, r3, r2
 8004102:	095b      	lsrs	r3, r3, #5
 8004104:	2164      	movs	r1, #100	; 0x64
 8004106:	fb01 f303 	mul.w	r3, r1, r3
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	3332      	adds	r3, #50	; 0x32
 8004110:	4a65      	ldr	r2, [pc, #404]	; (80042a8 <UART_SetConfig+0x384>)
 8004112:	fba2 2303 	umull	r2, r3, r2, r3
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	f003 0207 	and.w	r2, r3, #7
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4442      	add	r2, r8
 8004122:	609a      	str	r2, [r3, #8]
 8004124:	e26f      	b.n	8004606 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004126:	f7fe fc3d 	bl	80029a4 <HAL_RCC_GetPCLK1Freq>
 800412a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	461d      	mov	r5, r3
 8004130:	f04f 0600 	mov.w	r6, #0
 8004134:	46a8      	mov	r8, r5
 8004136:	46b1      	mov	r9, r6
 8004138:	eb18 0308 	adds.w	r3, r8, r8
 800413c:	eb49 0409 	adc.w	r4, r9, r9
 8004140:	4698      	mov	r8, r3
 8004142:	46a1      	mov	r9, r4
 8004144:	eb18 0805 	adds.w	r8, r8, r5
 8004148:	eb49 0906 	adc.w	r9, r9, r6
 800414c:	f04f 0100 	mov.w	r1, #0
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004158:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800415c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004160:	4688      	mov	r8, r1
 8004162:	4691      	mov	r9, r2
 8004164:	eb18 0005 	adds.w	r0, r8, r5
 8004168:	eb49 0106 	adc.w	r1, r9, r6
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	461d      	mov	r5, r3
 8004172:	f04f 0600 	mov.w	r6, #0
 8004176:	196b      	adds	r3, r5, r5
 8004178:	eb46 0406 	adc.w	r4, r6, r6
 800417c:	461a      	mov	r2, r3
 800417e:	4623      	mov	r3, r4
 8004180:	f7fc fd6a 	bl	8000c58 <__aeabi_uldivmod>
 8004184:	4603      	mov	r3, r0
 8004186:	460c      	mov	r4, r1
 8004188:	461a      	mov	r2, r3
 800418a:	4b47      	ldr	r3, [pc, #284]	; (80042a8 <UART_SetConfig+0x384>)
 800418c:	fba3 2302 	umull	r2, r3, r3, r2
 8004190:	095b      	lsrs	r3, r3, #5
 8004192:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	461d      	mov	r5, r3
 800419a:	f04f 0600 	mov.w	r6, #0
 800419e:	46a9      	mov	r9, r5
 80041a0:	46b2      	mov	sl, r6
 80041a2:	eb19 0309 	adds.w	r3, r9, r9
 80041a6:	eb4a 040a 	adc.w	r4, sl, sl
 80041aa:	4699      	mov	r9, r3
 80041ac:	46a2      	mov	sl, r4
 80041ae:	eb19 0905 	adds.w	r9, r9, r5
 80041b2:	eb4a 0a06 	adc.w	sl, sl, r6
 80041b6:	f04f 0100 	mov.w	r1, #0
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041ca:	4689      	mov	r9, r1
 80041cc:	4692      	mov	sl, r2
 80041ce:	eb19 0005 	adds.w	r0, r9, r5
 80041d2:	eb4a 0106 	adc.w	r1, sl, r6
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	461d      	mov	r5, r3
 80041dc:	f04f 0600 	mov.w	r6, #0
 80041e0:	196b      	adds	r3, r5, r5
 80041e2:	eb46 0406 	adc.w	r4, r6, r6
 80041e6:	461a      	mov	r2, r3
 80041e8:	4623      	mov	r3, r4
 80041ea:	f7fc fd35 	bl	8000c58 <__aeabi_uldivmod>
 80041ee:	4603      	mov	r3, r0
 80041f0:	460c      	mov	r4, r1
 80041f2:	461a      	mov	r2, r3
 80041f4:	4b2c      	ldr	r3, [pc, #176]	; (80042a8 <UART_SetConfig+0x384>)
 80041f6:	fba3 1302 	umull	r1, r3, r3, r2
 80041fa:	095b      	lsrs	r3, r3, #5
 80041fc:	2164      	movs	r1, #100	; 0x64
 80041fe:	fb01 f303 	mul.w	r3, r1, r3
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	3332      	adds	r3, #50	; 0x32
 8004208:	4a27      	ldr	r2, [pc, #156]	; (80042a8 <UART_SetConfig+0x384>)
 800420a:	fba2 2303 	umull	r2, r3, r2, r3
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004216:	4498      	add	r8, r3
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	461d      	mov	r5, r3
 800421c:	f04f 0600 	mov.w	r6, #0
 8004220:	46a9      	mov	r9, r5
 8004222:	46b2      	mov	sl, r6
 8004224:	eb19 0309 	adds.w	r3, r9, r9
 8004228:	eb4a 040a 	adc.w	r4, sl, sl
 800422c:	4699      	mov	r9, r3
 800422e:	46a2      	mov	sl, r4
 8004230:	eb19 0905 	adds.w	r9, r9, r5
 8004234:	eb4a 0a06 	adc.w	sl, sl, r6
 8004238:	f04f 0100 	mov.w	r1, #0
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004244:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004248:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800424c:	4689      	mov	r9, r1
 800424e:	4692      	mov	sl, r2
 8004250:	eb19 0005 	adds.w	r0, r9, r5
 8004254:	eb4a 0106 	adc.w	r1, sl, r6
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	461d      	mov	r5, r3
 800425e:	f04f 0600 	mov.w	r6, #0
 8004262:	196b      	adds	r3, r5, r5
 8004264:	eb46 0406 	adc.w	r4, r6, r6
 8004268:	461a      	mov	r2, r3
 800426a:	4623      	mov	r3, r4
 800426c:	f7fc fcf4 	bl	8000c58 <__aeabi_uldivmod>
 8004270:	4603      	mov	r3, r0
 8004272:	460c      	mov	r4, r1
 8004274:	461a      	mov	r2, r3
 8004276:	4b0c      	ldr	r3, [pc, #48]	; (80042a8 <UART_SetConfig+0x384>)
 8004278:	fba3 1302 	umull	r1, r3, r3, r2
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	2164      	movs	r1, #100	; 0x64
 8004280:	fb01 f303 	mul.w	r3, r1, r3
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	3332      	adds	r3, #50	; 0x32
 800428a:	4a07      	ldr	r2, [pc, #28]	; (80042a8 <UART_SetConfig+0x384>)
 800428c:	fba2 2303 	umull	r2, r3, r2, r3
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	f003 0207 	and.w	r2, r3, #7
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4442      	add	r2, r8
 800429c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800429e:	e1b2      	b.n	8004606 <UART_SetConfig+0x6e2>
 80042a0:	40011000 	.word	0x40011000
 80042a4:	40011400 	.word	0x40011400
 80042a8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4ad7      	ldr	r2, [pc, #860]	; (8004610 <UART_SetConfig+0x6ec>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d005      	beq.n	80042c2 <UART_SetConfig+0x39e>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4ad6      	ldr	r2, [pc, #856]	; (8004614 <UART_SetConfig+0x6f0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	f040 80d1 	bne.w	8004464 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80042c2:	f7fe fb83 	bl	80029cc <HAL_RCC_GetPCLK2Freq>
 80042c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	469a      	mov	sl, r3
 80042cc:	f04f 0b00 	mov.w	fp, #0
 80042d0:	46d0      	mov	r8, sl
 80042d2:	46d9      	mov	r9, fp
 80042d4:	eb18 0308 	adds.w	r3, r8, r8
 80042d8:	eb49 0409 	adc.w	r4, r9, r9
 80042dc:	4698      	mov	r8, r3
 80042de:	46a1      	mov	r9, r4
 80042e0:	eb18 080a 	adds.w	r8, r8, sl
 80042e4:	eb49 090b 	adc.w	r9, r9, fp
 80042e8:	f04f 0100 	mov.w	r1, #0
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80042f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80042f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80042fc:	4688      	mov	r8, r1
 80042fe:	4691      	mov	r9, r2
 8004300:	eb1a 0508 	adds.w	r5, sl, r8
 8004304:	eb4b 0609 	adc.w	r6, fp, r9
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	4619      	mov	r1, r3
 800430e:	f04f 0200 	mov.w	r2, #0
 8004312:	f04f 0300 	mov.w	r3, #0
 8004316:	f04f 0400 	mov.w	r4, #0
 800431a:	0094      	lsls	r4, r2, #2
 800431c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004320:	008b      	lsls	r3, r1, #2
 8004322:	461a      	mov	r2, r3
 8004324:	4623      	mov	r3, r4
 8004326:	4628      	mov	r0, r5
 8004328:	4631      	mov	r1, r6
 800432a:	f7fc fc95 	bl	8000c58 <__aeabi_uldivmod>
 800432e:	4603      	mov	r3, r0
 8004330:	460c      	mov	r4, r1
 8004332:	461a      	mov	r2, r3
 8004334:	4bb8      	ldr	r3, [pc, #736]	; (8004618 <UART_SetConfig+0x6f4>)
 8004336:	fba3 2302 	umull	r2, r3, r3, r2
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	469b      	mov	fp, r3
 8004344:	f04f 0c00 	mov.w	ip, #0
 8004348:	46d9      	mov	r9, fp
 800434a:	46e2      	mov	sl, ip
 800434c:	eb19 0309 	adds.w	r3, r9, r9
 8004350:	eb4a 040a 	adc.w	r4, sl, sl
 8004354:	4699      	mov	r9, r3
 8004356:	46a2      	mov	sl, r4
 8004358:	eb19 090b 	adds.w	r9, r9, fp
 800435c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004360:	f04f 0100 	mov.w	r1, #0
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800436c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004370:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004374:	4689      	mov	r9, r1
 8004376:	4692      	mov	sl, r2
 8004378:	eb1b 0509 	adds.w	r5, fp, r9
 800437c:	eb4c 060a 	adc.w	r6, ip, sl
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	4619      	mov	r1, r3
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	f04f 0400 	mov.w	r4, #0
 8004392:	0094      	lsls	r4, r2, #2
 8004394:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004398:	008b      	lsls	r3, r1, #2
 800439a:	461a      	mov	r2, r3
 800439c:	4623      	mov	r3, r4
 800439e:	4628      	mov	r0, r5
 80043a0:	4631      	mov	r1, r6
 80043a2:	f7fc fc59 	bl	8000c58 <__aeabi_uldivmod>
 80043a6:	4603      	mov	r3, r0
 80043a8:	460c      	mov	r4, r1
 80043aa:	461a      	mov	r2, r3
 80043ac:	4b9a      	ldr	r3, [pc, #616]	; (8004618 <UART_SetConfig+0x6f4>)
 80043ae:	fba3 1302 	umull	r1, r3, r3, r2
 80043b2:	095b      	lsrs	r3, r3, #5
 80043b4:	2164      	movs	r1, #100	; 0x64
 80043b6:	fb01 f303 	mul.w	r3, r1, r3
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	3332      	adds	r3, #50	; 0x32
 80043c0:	4a95      	ldr	r2, [pc, #596]	; (8004618 <UART_SetConfig+0x6f4>)
 80043c2:	fba2 2303 	umull	r2, r3, r2, r3
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043cc:	4498      	add	r8, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	469b      	mov	fp, r3
 80043d2:	f04f 0c00 	mov.w	ip, #0
 80043d6:	46d9      	mov	r9, fp
 80043d8:	46e2      	mov	sl, ip
 80043da:	eb19 0309 	adds.w	r3, r9, r9
 80043de:	eb4a 040a 	adc.w	r4, sl, sl
 80043e2:	4699      	mov	r9, r3
 80043e4:	46a2      	mov	sl, r4
 80043e6:	eb19 090b 	adds.w	r9, r9, fp
 80043ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 80043ee:	f04f 0100 	mov.w	r1, #0
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004402:	4689      	mov	r9, r1
 8004404:	4692      	mov	sl, r2
 8004406:	eb1b 0509 	adds.w	r5, fp, r9
 800440a:	eb4c 060a 	adc.w	r6, ip, sl
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	4619      	mov	r1, r3
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	f04f 0400 	mov.w	r4, #0
 8004420:	0094      	lsls	r4, r2, #2
 8004422:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004426:	008b      	lsls	r3, r1, #2
 8004428:	461a      	mov	r2, r3
 800442a:	4623      	mov	r3, r4
 800442c:	4628      	mov	r0, r5
 800442e:	4631      	mov	r1, r6
 8004430:	f7fc fc12 	bl	8000c58 <__aeabi_uldivmod>
 8004434:	4603      	mov	r3, r0
 8004436:	460c      	mov	r4, r1
 8004438:	461a      	mov	r2, r3
 800443a:	4b77      	ldr	r3, [pc, #476]	; (8004618 <UART_SetConfig+0x6f4>)
 800443c:	fba3 1302 	umull	r1, r3, r3, r2
 8004440:	095b      	lsrs	r3, r3, #5
 8004442:	2164      	movs	r1, #100	; 0x64
 8004444:	fb01 f303 	mul.w	r3, r1, r3
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	3332      	adds	r3, #50	; 0x32
 800444e:	4a72      	ldr	r2, [pc, #456]	; (8004618 <UART_SetConfig+0x6f4>)
 8004450:	fba2 2303 	umull	r2, r3, r2, r3
 8004454:	095b      	lsrs	r3, r3, #5
 8004456:	f003 020f 	and.w	r2, r3, #15
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4442      	add	r2, r8
 8004460:	609a      	str	r2, [r3, #8]
 8004462:	e0d0      	b.n	8004606 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004464:	f7fe fa9e 	bl	80029a4 <HAL_RCC_GetPCLK1Freq>
 8004468:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	469a      	mov	sl, r3
 800446e:	f04f 0b00 	mov.w	fp, #0
 8004472:	46d0      	mov	r8, sl
 8004474:	46d9      	mov	r9, fp
 8004476:	eb18 0308 	adds.w	r3, r8, r8
 800447a:	eb49 0409 	adc.w	r4, r9, r9
 800447e:	4698      	mov	r8, r3
 8004480:	46a1      	mov	r9, r4
 8004482:	eb18 080a 	adds.w	r8, r8, sl
 8004486:	eb49 090b 	adc.w	r9, r9, fp
 800448a:	f04f 0100 	mov.w	r1, #0
 800448e:	f04f 0200 	mov.w	r2, #0
 8004492:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004496:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800449a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800449e:	4688      	mov	r8, r1
 80044a0:	4691      	mov	r9, r2
 80044a2:	eb1a 0508 	adds.w	r5, sl, r8
 80044a6:	eb4b 0609 	adc.w	r6, fp, r9
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	4619      	mov	r1, r3
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	f04f 0300 	mov.w	r3, #0
 80044b8:	f04f 0400 	mov.w	r4, #0
 80044bc:	0094      	lsls	r4, r2, #2
 80044be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044c2:	008b      	lsls	r3, r1, #2
 80044c4:	461a      	mov	r2, r3
 80044c6:	4623      	mov	r3, r4
 80044c8:	4628      	mov	r0, r5
 80044ca:	4631      	mov	r1, r6
 80044cc:	f7fc fbc4 	bl	8000c58 <__aeabi_uldivmod>
 80044d0:	4603      	mov	r3, r0
 80044d2:	460c      	mov	r4, r1
 80044d4:	461a      	mov	r2, r3
 80044d6:	4b50      	ldr	r3, [pc, #320]	; (8004618 <UART_SetConfig+0x6f4>)
 80044d8:	fba3 2302 	umull	r2, r3, r3, r2
 80044dc:	095b      	lsrs	r3, r3, #5
 80044de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	469b      	mov	fp, r3
 80044e6:	f04f 0c00 	mov.w	ip, #0
 80044ea:	46d9      	mov	r9, fp
 80044ec:	46e2      	mov	sl, ip
 80044ee:	eb19 0309 	adds.w	r3, r9, r9
 80044f2:	eb4a 040a 	adc.w	r4, sl, sl
 80044f6:	4699      	mov	r9, r3
 80044f8:	46a2      	mov	sl, r4
 80044fa:	eb19 090b 	adds.w	r9, r9, fp
 80044fe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004502:	f04f 0100 	mov.w	r1, #0
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800450e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004512:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004516:	4689      	mov	r9, r1
 8004518:	4692      	mov	sl, r2
 800451a:	eb1b 0509 	adds.w	r5, fp, r9
 800451e:	eb4c 060a 	adc.w	r6, ip, sl
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	4619      	mov	r1, r3
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	f04f 0300 	mov.w	r3, #0
 8004530:	f04f 0400 	mov.w	r4, #0
 8004534:	0094      	lsls	r4, r2, #2
 8004536:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800453a:	008b      	lsls	r3, r1, #2
 800453c:	461a      	mov	r2, r3
 800453e:	4623      	mov	r3, r4
 8004540:	4628      	mov	r0, r5
 8004542:	4631      	mov	r1, r6
 8004544:	f7fc fb88 	bl	8000c58 <__aeabi_uldivmod>
 8004548:	4603      	mov	r3, r0
 800454a:	460c      	mov	r4, r1
 800454c:	461a      	mov	r2, r3
 800454e:	4b32      	ldr	r3, [pc, #200]	; (8004618 <UART_SetConfig+0x6f4>)
 8004550:	fba3 1302 	umull	r1, r3, r3, r2
 8004554:	095b      	lsrs	r3, r3, #5
 8004556:	2164      	movs	r1, #100	; 0x64
 8004558:	fb01 f303 	mul.w	r3, r1, r3
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	3332      	adds	r3, #50	; 0x32
 8004562:	4a2d      	ldr	r2, [pc, #180]	; (8004618 <UART_SetConfig+0x6f4>)
 8004564:	fba2 2303 	umull	r2, r3, r2, r3
 8004568:	095b      	lsrs	r3, r3, #5
 800456a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800456e:	4498      	add	r8, r3
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	469b      	mov	fp, r3
 8004574:	f04f 0c00 	mov.w	ip, #0
 8004578:	46d9      	mov	r9, fp
 800457a:	46e2      	mov	sl, ip
 800457c:	eb19 0309 	adds.w	r3, r9, r9
 8004580:	eb4a 040a 	adc.w	r4, sl, sl
 8004584:	4699      	mov	r9, r3
 8004586:	46a2      	mov	sl, r4
 8004588:	eb19 090b 	adds.w	r9, r9, fp
 800458c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004590:	f04f 0100 	mov.w	r1, #0
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800459c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045a4:	4689      	mov	r9, r1
 80045a6:	4692      	mov	sl, r2
 80045a8:	eb1b 0509 	adds.w	r5, fp, r9
 80045ac:	eb4c 060a 	adc.w	r6, ip, sl
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	4619      	mov	r1, r3
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	f04f 0300 	mov.w	r3, #0
 80045be:	f04f 0400 	mov.w	r4, #0
 80045c2:	0094      	lsls	r4, r2, #2
 80045c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045c8:	008b      	lsls	r3, r1, #2
 80045ca:	461a      	mov	r2, r3
 80045cc:	4623      	mov	r3, r4
 80045ce:	4628      	mov	r0, r5
 80045d0:	4631      	mov	r1, r6
 80045d2:	f7fc fb41 	bl	8000c58 <__aeabi_uldivmod>
 80045d6:	4603      	mov	r3, r0
 80045d8:	460c      	mov	r4, r1
 80045da:	461a      	mov	r2, r3
 80045dc:	4b0e      	ldr	r3, [pc, #56]	; (8004618 <UART_SetConfig+0x6f4>)
 80045de:	fba3 1302 	umull	r1, r3, r3, r2
 80045e2:	095b      	lsrs	r3, r3, #5
 80045e4:	2164      	movs	r1, #100	; 0x64
 80045e6:	fb01 f303 	mul.w	r3, r1, r3
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	3332      	adds	r3, #50	; 0x32
 80045f0:	4a09      	ldr	r2, [pc, #36]	; (8004618 <UART_SetConfig+0x6f4>)
 80045f2:	fba2 2303 	umull	r2, r3, r2, r3
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	f003 020f 	and.w	r2, r3, #15
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4442      	add	r2, r8
 8004602:	609a      	str	r2, [r3, #8]
}
 8004604:	e7ff      	b.n	8004606 <UART_SetConfig+0x6e2>
 8004606:	bf00      	nop
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004610:	40011000 	.word	0x40011000
 8004614:	40011400 	.word	0x40011400
 8004618:	51eb851f 	.word	0x51eb851f

0800461c <__errno>:
 800461c:	4b01      	ldr	r3, [pc, #4]	; (8004624 <__errno+0x8>)
 800461e:	6818      	ldr	r0, [r3, #0]
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	2000000c 	.word	0x2000000c

08004628 <__libc_init_array>:
 8004628:	b570      	push	{r4, r5, r6, lr}
 800462a:	4e0d      	ldr	r6, [pc, #52]	; (8004660 <__libc_init_array+0x38>)
 800462c:	4c0d      	ldr	r4, [pc, #52]	; (8004664 <__libc_init_array+0x3c>)
 800462e:	1ba4      	subs	r4, r4, r6
 8004630:	10a4      	asrs	r4, r4, #2
 8004632:	2500      	movs	r5, #0
 8004634:	42a5      	cmp	r5, r4
 8004636:	d109      	bne.n	800464c <__libc_init_array+0x24>
 8004638:	4e0b      	ldr	r6, [pc, #44]	; (8004668 <__libc_init_array+0x40>)
 800463a:	4c0c      	ldr	r4, [pc, #48]	; (800466c <__libc_init_array+0x44>)
 800463c:	f002 fd32 	bl	80070a4 <_init>
 8004640:	1ba4      	subs	r4, r4, r6
 8004642:	10a4      	asrs	r4, r4, #2
 8004644:	2500      	movs	r5, #0
 8004646:	42a5      	cmp	r5, r4
 8004648:	d105      	bne.n	8004656 <__libc_init_array+0x2e>
 800464a:	bd70      	pop	{r4, r5, r6, pc}
 800464c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004650:	4798      	blx	r3
 8004652:	3501      	adds	r5, #1
 8004654:	e7ee      	b.n	8004634 <__libc_init_array+0xc>
 8004656:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800465a:	4798      	blx	r3
 800465c:	3501      	adds	r5, #1
 800465e:	e7f2      	b.n	8004646 <__libc_init_array+0x1e>
 8004660:	0800747c 	.word	0x0800747c
 8004664:	0800747c 	.word	0x0800747c
 8004668:	0800747c 	.word	0x0800747c
 800466c:	08007480 	.word	0x08007480

08004670 <memset>:
 8004670:	4402      	add	r2, r0
 8004672:	4603      	mov	r3, r0
 8004674:	4293      	cmp	r3, r2
 8004676:	d100      	bne.n	800467a <memset+0xa>
 8004678:	4770      	bx	lr
 800467a:	f803 1b01 	strb.w	r1, [r3], #1
 800467e:	e7f9      	b.n	8004674 <memset+0x4>

08004680 <__cvt>:
 8004680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004684:	ec55 4b10 	vmov	r4, r5, d0
 8004688:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800468a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800468e:	2d00      	cmp	r5, #0
 8004690:	460e      	mov	r6, r1
 8004692:	4691      	mov	r9, r2
 8004694:	4619      	mov	r1, r3
 8004696:	bfb8      	it	lt
 8004698:	4622      	movlt	r2, r4
 800469a:	462b      	mov	r3, r5
 800469c:	f027 0720 	bic.w	r7, r7, #32
 80046a0:	bfbb      	ittet	lt
 80046a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80046a6:	461d      	movlt	r5, r3
 80046a8:	2300      	movge	r3, #0
 80046aa:	232d      	movlt	r3, #45	; 0x2d
 80046ac:	bfb8      	it	lt
 80046ae:	4614      	movlt	r4, r2
 80046b0:	2f46      	cmp	r7, #70	; 0x46
 80046b2:	700b      	strb	r3, [r1, #0]
 80046b4:	d004      	beq.n	80046c0 <__cvt+0x40>
 80046b6:	2f45      	cmp	r7, #69	; 0x45
 80046b8:	d100      	bne.n	80046bc <__cvt+0x3c>
 80046ba:	3601      	adds	r6, #1
 80046bc:	2102      	movs	r1, #2
 80046be:	e000      	b.n	80046c2 <__cvt+0x42>
 80046c0:	2103      	movs	r1, #3
 80046c2:	ab03      	add	r3, sp, #12
 80046c4:	9301      	str	r3, [sp, #4]
 80046c6:	ab02      	add	r3, sp, #8
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	4632      	mov	r2, r6
 80046cc:	4653      	mov	r3, sl
 80046ce:	ec45 4b10 	vmov	d0, r4, r5
 80046d2:	f000 fd19 	bl	8005108 <_dtoa_r>
 80046d6:	2f47      	cmp	r7, #71	; 0x47
 80046d8:	4680      	mov	r8, r0
 80046da:	d102      	bne.n	80046e2 <__cvt+0x62>
 80046dc:	f019 0f01 	tst.w	r9, #1
 80046e0:	d026      	beq.n	8004730 <__cvt+0xb0>
 80046e2:	2f46      	cmp	r7, #70	; 0x46
 80046e4:	eb08 0906 	add.w	r9, r8, r6
 80046e8:	d111      	bne.n	800470e <__cvt+0x8e>
 80046ea:	f898 3000 	ldrb.w	r3, [r8]
 80046ee:	2b30      	cmp	r3, #48	; 0x30
 80046f0:	d10a      	bne.n	8004708 <__cvt+0x88>
 80046f2:	2200      	movs	r2, #0
 80046f4:	2300      	movs	r3, #0
 80046f6:	4620      	mov	r0, r4
 80046f8:	4629      	mov	r1, r5
 80046fa:	f7fc f9ed 	bl	8000ad8 <__aeabi_dcmpeq>
 80046fe:	b918      	cbnz	r0, 8004708 <__cvt+0x88>
 8004700:	f1c6 0601 	rsb	r6, r6, #1
 8004704:	f8ca 6000 	str.w	r6, [sl]
 8004708:	f8da 3000 	ldr.w	r3, [sl]
 800470c:	4499      	add	r9, r3
 800470e:	2200      	movs	r2, #0
 8004710:	2300      	movs	r3, #0
 8004712:	4620      	mov	r0, r4
 8004714:	4629      	mov	r1, r5
 8004716:	f7fc f9df 	bl	8000ad8 <__aeabi_dcmpeq>
 800471a:	b938      	cbnz	r0, 800472c <__cvt+0xac>
 800471c:	2230      	movs	r2, #48	; 0x30
 800471e:	9b03      	ldr	r3, [sp, #12]
 8004720:	454b      	cmp	r3, r9
 8004722:	d205      	bcs.n	8004730 <__cvt+0xb0>
 8004724:	1c59      	adds	r1, r3, #1
 8004726:	9103      	str	r1, [sp, #12]
 8004728:	701a      	strb	r2, [r3, #0]
 800472a:	e7f8      	b.n	800471e <__cvt+0x9e>
 800472c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004730:	9b03      	ldr	r3, [sp, #12]
 8004732:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004734:	eba3 0308 	sub.w	r3, r3, r8
 8004738:	4640      	mov	r0, r8
 800473a:	6013      	str	r3, [r2, #0]
 800473c:	b004      	add	sp, #16
 800473e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004742 <__exponent>:
 8004742:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004744:	2900      	cmp	r1, #0
 8004746:	4604      	mov	r4, r0
 8004748:	bfba      	itte	lt
 800474a:	4249      	neglt	r1, r1
 800474c:	232d      	movlt	r3, #45	; 0x2d
 800474e:	232b      	movge	r3, #43	; 0x2b
 8004750:	2909      	cmp	r1, #9
 8004752:	f804 2b02 	strb.w	r2, [r4], #2
 8004756:	7043      	strb	r3, [r0, #1]
 8004758:	dd20      	ble.n	800479c <__exponent+0x5a>
 800475a:	f10d 0307 	add.w	r3, sp, #7
 800475e:	461f      	mov	r7, r3
 8004760:	260a      	movs	r6, #10
 8004762:	fb91 f5f6 	sdiv	r5, r1, r6
 8004766:	fb06 1115 	mls	r1, r6, r5, r1
 800476a:	3130      	adds	r1, #48	; 0x30
 800476c:	2d09      	cmp	r5, #9
 800476e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004772:	f103 32ff 	add.w	r2, r3, #4294967295
 8004776:	4629      	mov	r1, r5
 8004778:	dc09      	bgt.n	800478e <__exponent+0x4c>
 800477a:	3130      	adds	r1, #48	; 0x30
 800477c:	3b02      	subs	r3, #2
 800477e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004782:	42bb      	cmp	r3, r7
 8004784:	4622      	mov	r2, r4
 8004786:	d304      	bcc.n	8004792 <__exponent+0x50>
 8004788:	1a10      	subs	r0, r2, r0
 800478a:	b003      	add	sp, #12
 800478c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800478e:	4613      	mov	r3, r2
 8004790:	e7e7      	b.n	8004762 <__exponent+0x20>
 8004792:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004796:	f804 2b01 	strb.w	r2, [r4], #1
 800479a:	e7f2      	b.n	8004782 <__exponent+0x40>
 800479c:	2330      	movs	r3, #48	; 0x30
 800479e:	4419      	add	r1, r3
 80047a0:	7083      	strb	r3, [r0, #2]
 80047a2:	1d02      	adds	r2, r0, #4
 80047a4:	70c1      	strb	r1, [r0, #3]
 80047a6:	e7ef      	b.n	8004788 <__exponent+0x46>

080047a8 <_printf_float>:
 80047a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ac:	b08d      	sub	sp, #52	; 0x34
 80047ae:	460c      	mov	r4, r1
 80047b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80047b4:	4616      	mov	r6, r2
 80047b6:	461f      	mov	r7, r3
 80047b8:	4605      	mov	r5, r0
 80047ba:	f001 fa5d 	bl	8005c78 <_localeconv_r>
 80047be:	6803      	ldr	r3, [r0, #0]
 80047c0:	9304      	str	r3, [sp, #16]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fb fd0c 	bl	80001e0 <strlen>
 80047c8:	2300      	movs	r3, #0
 80047ca:	930a      	str	r3, [sp, #40]	; 0x28
 80047cc:	f8d8 3000 	ldr.w	r3, [r8]
 80047d0:	9005      	str	r0, [sp, #20]
 80047d2:	3307      	adds	r3, #7
 80047d4:	f023 0307 	bic.w	r3, r3, #7
 80047d8:	f103 0208 	add.w	r2, r3, #8
 80047dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80047e0:	f8d4 b000 	ldr.w	fp, [r4]
 80047e4:	f8c8 2000 	str.w	r2, [r8]
 80047e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80047f0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80047f4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80047f8:	9307      	str	r3, [sp, #28]
 80047fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80047fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004802:	4ba7      	ldr	r3, [pc, #668]	; (8004aa0 <_printf_float+0x2f8>)
 8004804:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004808:	f7fc f998 	bl	8000b3c <__aeabi_dcmpun>
 800480c:	bb70      	cbnz	r0, 800486c <_printf_float+0xc4>
 800480e:	f04f 32ff 	mov.w	r2, #4294967295
 8004812:	4ba3      	ldr	r3, [pc, #652]	; (8004aa0 <_printf_float+0x2f8>)
 8004814:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004818:	f7fc f972 	bl	8000b00 <__aeabi_dcmple>
 800481c:	bb30      	cbnz	r0, 800486c <_printf_float+0xc4>
 800481e:	2200      	movs	r2, #0
 8004820:	2300      	movs	r3, #0
 8004822:	4640      	mov	r0, r8
 8004824:	4649      	mov	r1, r9
 8004826:	f7fc f961 	bl	8000aec <__aeabi_dcmplt>
 800482a:	b110      	cbz	r0, 8004832 <_printf_float+0x8a>
 800482c:	232d      	movs	r3, #45	; 0x2d
 800482e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004832:	4a9c      	ldr	r2, [pc, #624]	; (8004aa4 <_printf_float+0x2fc>)
 8004834:	4b9c      	ldr	r3, [pc, #624]	; (8004aa8 <_printf_float+0x300>)
 8004836:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800483a:	bf8c      	ite	hi
 800483c:	4690      	movhi	r8, r2
 800483e:	4698      	movls	r8, r3
 8004840:	2303      	movs	r3, #3
 8004842:	f02b 0204 	bic.w	r2, fp, #4
 8004846:	6123      	str	r3, [r4, #16]
 8004848:	6022      	str	r2, [r4, #0]
 800484a:	f04f 0900 	mov.w	r9, #0
 800484e:	9700      	str	r7, [sp, #0]
 8004850:	4633      	mov	r3, r6
 8004852:	aa0b      	add	r2, sp, #44	; 0x2c
 8004854:	4621      	mov	r1, r4
 8004856:	4628      	mov	r0, r5
 8004858:	f000 f9e6 	bl	8004c28 <_printf_common>
 800485c:	3001      	adds	r0, #1
 800485e:	f040 808d 	bne.w	800497c <_printf_float+0x1d4>
 8004862:	f04f 30ff 	mov.w	r0, #4294967295
 8004866:	b00d      	add	sp, #52	; 0x34
 8004868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800486c:	4642      	mov	r2, r8
 800486e:	464b      	mov	r3, r9
 8004870:	4640      	mov	r0, r8
 8004872:	4649      	mov	r1, r9
 8004874:	f7fc f962 	bl	8000b3c <__aeabi_dcmpun>
 8004878:	b110      	cbz	r0, 8004880 <_printf_float+0xd8>
 800487a:	4a8c      	ldr	r2, [pc, #560]	; (8004aac <_printf_float+0x304>)
 800487c:	4b8c      	ldr	r3, [pc, #560]	; (8004ab0 <_printf_float+0x308>)
 800487e:	e7da      	b.n	8004836 <_printf_float+0x8e>
 8004880:	6861      	ldr	r1, [r4, #4]
 8004882:	1c4b      	adds	r3, r1, #1
 8004884:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004888:	a80a      	add	r0, sp, #40	; 0x28
 800488a:	d13e      	bne.n	800490a <_printf_float+0x162>
 800488c:	2306      	movs	r3, #6
 800488e:	6063      	str	r3, [r4, #4]
 8004890:	2300      	movs	r3, #0
 8004892:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004896:	ab09      	add	r3, sp, #36	; 0x24
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	ec49 8b10 	vmov	d0, r8, r9
 800489e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80048a2:	6022      	str	r2, [r4, #0]
 80048a4:	f8cd a004 	str.w	sl, [sp, #4]
 80048a8:	6861      	ldr	r1, [r4, #4]
 80048aa:	4628      	mov	r0, r5
 80048ac:	f7ff fee8 	bl	8004680 <__cvt>
 80048b0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80048b4:	2b47      	cmp	r3, #71	; 0x47
 80048b6:	4680      	mov	r8, r0
 80048b8:	d109      	bne.n	80048ce <_printf_float+0x126>
 80048ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048bc:	1cd8      	adds	r0, r3, #3
 80048be:	db02      	blt.n	80048c6 <_printf_float+0x11e>
 80048c0:	6862      	ldr	r2, [r4, #4]
 80048c2:	4293      	cmp	r3, r2
 80048c4:	dd47      	ble.n	8004956 <_printf_float+0x1ae>
 80048c6:	f1aa 0a02 	sub.w	sl, sl, #2
 80048ca:	fa5f fa8a 	uxtb.w	sl, sl
 80048ce:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80048d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048d4:	d824      	bhi.n	8004920 <_printf_float+0x178>
 80048d6:	3901      	subs	r1, #1
 80048d8:	4652      	mov	r2, sl
 80048da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80048de:	9109      	str	r1, [sp, #36]	; 0x24
 80048e0:	f7ff ff2f 	bl	8004742 <__exponent>
 80048e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048e6:	1813      	adds	r3, r2, r0
 80048e8:	2a01      	cmp	r2, #1
 80048ea:	4681      	mov	r9, r0
 80048ec:	6123      	str	r3, [r4, #16]
 80048ee:	dc02      	bgt.n	80048f6 <_printf_float+0x14e>
 80048f0:	6822      	ldr	r2, [r4, #0]
 80048f2:	07d1      	lsls	r1, r2, #31
 80048f4:	d501      	bpl.n	80048fa <_printf_float+0x152>
 80048f6:	3301      	adds	r3, #1
 80048f8:	6123      	str	r3, [r4, #16]
 80048fa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d0a5      	beq.n	800484e <_printf_float+0xa6>
 8004902:	232d      	movs	r3, #45	; 0x2d
 8004904:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004908:	e7a1      	b.n	800484e <_printf_float+0xa6>
 800490a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800490e:	f000 8177 	beq.w	8004c00 <_printf_float+0x458>
 8004912:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004916:	d1bb      	bne.n	8004890 <_printf_float+0xe8>
 8004918:	2900      	cmp	r1, #0
 800491a:	d1b9      	bne.n	8004890 <_printf_float+0xe8>
 800491c:	2301      	movs	r3, #1
 800491e:	e7b6      	b.n	800488e <_printf_float+0xe6>
 8004920:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004924:	d119      	bne.n	800495a <_printf_float+0x1b2>
 8004926:	2900      	cmp	r1, #0
 8004928:	6863      	ldr	r3, [r4, #4]
 800492a:	dd0c      	ble.n	8004946 <_printf_float+0x19e>
 800492c:	6121      	str	r1, [r4, #16]
 800492e:	b913      	cbnz	r3, 8004936 <_printf_float+0x18e>
 8004930:	6822      	ldr	r2, [r4, #0]
 8004932:	07d2      	lsls	r2, r2, #31
 8004934:	d502      	bpl.n	800493c <_printf_float+0x194>
 8004936:	3301      	adds	r3, #1
 8004938:	440b      	add	r3, r1
 800493a:	6123      	str	r3, [r4, #16]
 800493c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800493e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004940:	f04f 0900 	mov.w	r9, #0
 8004944:	e7d9      	b.n	80048fa <_printf_float+0x152>
 8004946:	b913      	cbnz	r3, 800494e <_printf_float+0x1a6>
 8004948:	6822      	ldr	r2, [r4, #0]
 800494a:	07d0      	lsls	r0, r2, #31
 800494c:	d501      	bpl.n	8004952 <_printf_float+0x1aa>
 800494e:	3302      	adds	r3, #2
 8004950:	e7f3      	b.n	800493a <_printf_float+0x192>
 8004952:	2301      	movs	r3, #1
 8004954:	e7f1      	b.n	800493a <_printf_float+0x192>
 8004956:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800495a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800495e:	4293      	cmp	r3, r2
 8004960:	db05      	blt.n	800496e <_printf_float+0x1c6>
 8004962:	6822      	ldr	r2, [r4, #0]
 8004964:	6123      	str	r3, [r4, #16]
 8004966:	07d1      	lsls	r1, r2, #31
 8004968:	d5e8      	bpl.n	800493c <_printf_float+0x194>
 800496a:	3301      	adds	r3, #1
 800496c:	e7e5      	b.n	800493a <_printf_float+0x192>
 800496e:	2b00      	cmp	r3, #0
 8004970:	bfd4      	ite	le
 8004972:	f1c3 0302 	rsble	r3, r3, #2
 8004976:	2301      	movgt	r3, #1
 8004978:	4413      	add	r3, r2
 800497a:	e7de      	b.n	800493a <_printf_float+0x192>
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	055a      	lsls	r2, r3, #21
 8004980:	d407      	bmi.n	8004992 <_printf_float+0x1ea>
 8004982:	6923      	ldr	r3, [r4, #16]
 8004984:	4642      	mov	r2, r8
 8004986:	4631      	mov	r1, r6
 8004988:	4628      	mov	r0, r5
 800498a:	47b8      	blx	r7
 800498c:	3001      	adds	r0, #1
 800498e:	d12b      	bne.n	80049e8 <_printf_float+0x240>
 8004990:	e767      	b.n	8004862 <_printf_float+0xba>
 8004992:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004996:	f240 80dc 	bls.w	8004b52 <_printf_float+0x3aa>
 800499a:	2200      	movs	r2, #0
 800499c:	2300      	movs	r3, #0
 800499e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049a2:	f7fc f899 	bl	8000ad8 <__aeabi_dcmpeq>
 80049a6:	2800      	cmp	r0, #0
 80049a8:	d033      	beq.n	8004a12 <_printf_float+0x26a>
 80049aa:	2301      	movs	r3, #1
 80049ac:	4a41      	ldr	r2, [pc, #260]	; (8004ab4 <_printf_float+0x30c>)
 80049ae:	4631      	mov	r1, r6
 80049b0:	4628      	mov	r0, r5
 80049b2:	47b8      	blx	r7
 80049b4:	3001      	adds	r0, #1
 80049b6:	f43f af54 	beq.w	8004862 <_printf_float+0xba>
 80049ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049be:	429a      	cmp	r2, r3
 80049c0:	db02      	blt.n	80049c8 <_printf_float+0x220>
 80049c2:	6823      	ldr	r3, [r4, #0]
 80049c4:	07d8      	lsls	r0, r3, #31
 80049c6:	d50f      	bpl.n	80049e8 <_printf_float+0x240>
 80049c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80049cc:	4631      	mov	r1, r6
 80049ce:	4628      	mov	r0, r5
 80049d0:	47b8      	blx	r7
 80049d2:	3001      	adds	r0, #1
 80049d4:	f43f af45 	beq.w	8004862 <_printf_float+0xba>
 80049d8:	f04f 0800 	mov.w	r8, #0
 80049dc:	f104 091a 	add.w	r9, r4, #26
 80049e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049e2:	3b01      	subs	r3, #1
 80049e4:	4543      	cmp	r3, r8
 80049e6:	dc09      	bgt.n	80049fc <_printf_float+0x254>
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	079b      	lsls	r3, r3, #30
 80049ec:	f100 8103 	bmi.w	8004bf6 <_printf_float+0x44e>
 80049f0:	68e0      	ldr	r0, [r4, #12]
 80049f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049f4:	4298      	cmp	r0, r3
 80049f6:	bfb8      	it	lt
 80049f8:	4618      	movlt	r0, r3
 80049fa:	e734      	b.n	8004866 <_printf_float+0xbe>
 80049fc:	2301      	movs	r3, #1
 80049fe:	464a      	mov	r2, r9
 8004a00:	4631      	mov	r1, r6
 8004a02:	4628      	mov	r0, r5
 8004a04:	47b8      	blx	r7
 8004a06:	3001      	adds	r0, #1
 8004a08:	f43f af2b 	beq.w	8004862 <_printf_float+0xba>
 8004a0c:	f108 0801 	add.w	r8, r8, #1
 8004a10:	e7e6      	b.n	80049e0 <_printf_float+0x238>
 8004a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	dc2b      	bgt.n	8004a70 <_printf_float+0x2c8>
 8004a18:	2301      	movs	r3, #1
 8004a1a:	4a26      	ldr	r2, [pc, #152]	; (8004ab4 <_printf_float+0x30c>)
 8004a1c:	4631      	mov	r1, r6
 8004a1e:	4628      	mov	r0, r5
 8004a20:	47b8      	blx	r7
 8004a22:	3001      	adds	r0, #1
 8004a24:	f43f af1d 	beq.w	8004862 <_printf_float+0xba>
 8004a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a2a:	b923      	cbnz	r3, 8004a36 <_printf_float+0x28e>
 8004a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a2e:	b913      	cbnz	r3, 8004a36 <_printf_float+0x28e>
 8004a30:	6823      	ldr	r3, [r4, #0]
 8004a32:	07d9      	lsls	r1, r3, #31
 8004a34:	d5d8      	bpl.n	80049e8 <_printf_float+0x240>
 8004a36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a3a:	4631      	mov	r1, r6
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	47b8      	blx	r7
 8004a40:	3001      	adds	r0, #1
 8004a42:	f43f af0e 	beq.w	8004862 <_printf_float+0xba>
 8004a46:	f04f 0900 	mov.w	r9, #0
 8004a4a:	f104 0a1a 	add.w	sl, r4, #26
 8004a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a50:	425b      	negs	r3, r3
 8004a52:	454b      	cmp	r3, r9
 8004a54:	dc01      	bgt.n	8004a5a <_printf_float+0x2b2>
 8004a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a58:	e794      	b.n	8004984 <_printf_float+0x1dc>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	4652      	mov	r2, sl
 8004a5e:	4631      	mov	r1, r6
 8004a60:	4628      	mov	r0, r5
 8004a62:	47b8      	blx	r7
 8004a64:	3001      	adds	r0, #1
 8004a66:	f43f aefc 	beq.w	8004862 <_printf_float+0xba>
 8004a6a:	f109 0901 	add.w	r9, r9, #1
 8004a6e:	e7ee      	b.n	8004a4e <_printf_float+0x2a6>
 8004a70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a74:	429a      	cmp	r2, r3
 8004a76:	bfa8      	it	ge
 8004a78:	461a      	movge	r2, r3
 8004a7a:	2a00      	cmp	r2, #0
 8004a7c:	4691      	mov	r9, r2
 8004a7e:	dd07      	ble.n	8004a90 <_printf_float+0x2e8>
 8004a80:	4613      	mov	r3, r2
 8004a82:	4631      	mov	r1, r6
 8004a84:	4642      	mov	r2, r8
 8004a86:	4628      	mov	r0, r5
 8004a88:	47b8      	blx	r7
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	f43f aee9 	beq.w	8004862 <_printf_float+0xba>
 8004a90:	f104 031a 	add.w	r3, r4, #26
 8004a94:	f04f 0b00 	mov.w	fp, #0
 8004a98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a9c:	9306      	str	r3, [sp, #24]
 8004a9e:	e015      	b.n	8004acc <_printf_float+0x324>
 8004aa0:	7fefffff 	.word	0x7fefffff
 8004aa4:	080071a4 	.word	0x080071a4
 8004aa8:	080071a0 	.word	0x080071a0
 8004aac:	080071ac 	.word	0x080071ac
 8004ab0:	080071a8 	.word	0x080071a8
 8004ab4:	08007303 	.word	0x08007303
 8004ab8:	2301      	movs	r3, #1
 8004aba:	9a06      	ldr	r2, [sp, #24]
 8004abc:	4631      	mov	r1, r6
 8004abe:	4628      	mov	r0, r5
 8004ac0:	47b8      	blx	r7
 8004ac2:	3001      	adds	r0, #1
 8004ac4:	f43f aecd 	beq.w	8004862 <_printf_float+0xba>
 8004ac8:	f10b 0b01 	add.w	fp, fp, #1
 8004acc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004ad0:	ebaa 0309 	sub.w	r3, sl, r9
 8004ad4:	455b      	cmp	r3, fp
 8004ad6:	dcef      	bgt.n	8004ab8 <_printf_float+0x310>
 8004ad8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004adc:	429a      	cmp	r2, r3
 8004ade:	44d0      	add	r8, sl
 8004ae0:	db15      	blt.n	8004b0e <_printf_float+0x366>
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	07da      	lsls	r2, r3, #31
 8004ae6:	d412      	bmi.n	8004b0e <_printf_float+0x366>
 8004ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004aea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004aec:	eba3 020a 	sub.w	r2, r3, sl
 8004af0:	eba3 0a01 	sub.w	sl, r3, r1
 8004af4:	4592      	cmp	sl, r2
 8004af6:	bfa8      	it	ge
 8004af8:	4692      	movge	sl, r2
 8004afa:	f1ba 0f00 	cmp.w	sl, #0
 8004afe:	dc0e      	bgt.n	8004b1e <_printf_float+0x376>
 8004b00:	f04f 0800 	mov.w	r8, #0
 8004b04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004b08:	f104 091a 	add.w	r9, r4, #26
 8004b0c:	e019      	b.n	8004b42 <_printf_float+0x39a>
 8004b0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b12:	4631      	mov	r1, r6
 8004b14:	4628      	mov	r0, r5
 8004b16:	47b8      	blx	r7
 8004b18:	3001      	adds	r0, #1
 8004b1a:	d1e5      	bne.n	8004ae8 <_printf_float+0x340>
 8004b1c:	e6a1      	b.n	8004862 <_printf_float+0xba>
 8004b1e:	4653      	mov	r3, sl
 8004b20:	4642      	mov	r2, r8
 8004b22:	4631      	mov	r1, r6
 8004b24:	4628      	mov	r0, r5
 8004b26:	47b8      	blx	r7
 8004b28:	3001      	adds	r0, #1
 8004b2a:	d1e9      	bne.n	8004b00 <_printf_float+0x358>
 8004b2c:	e699      	b.n	8004862 <_printf_float+0xba>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	464a      	mov	r2, r9
 8004b32:	4631      	mov	r1, r6
 8004b34:	4628      	mov	r0, r5
 8004b36:	47b8      	blx	r7
 8004b38:	3001      	adds	r0, #1
 8004b3a:	f43f ae92 	beq.w	8004862 <_printf_float+0xba>
 8004b3e:	f108 0801 	add.w	r8, r8, #1
 8004b42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	eba3 030a 	sub.w	r3, r3, sl
 8004b4c:	4543      	cmp	r3, r8
 8004b4e:	dcee      	bgt.n	8004b2e <_printf_float+0x386>
 8004b50:	e74a      	b.n	80049e8 <_printf_float+0x240>
 8004b52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b54:	2a01      	cmp	r2, #1
 8004b56:	dc01      	bgt.n	8004b5c <_printf_float+0x3b4>
 8004b58:	07db      	lsls	r3, r3, #31
 8004b5a:	d53a      	bpl.n	8004bd2 <_printf_float+0x42a>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	4642      	mov	r2, r8
 8004b60:	4631      	mov	r1, r6
 8004b62:	4628      	mov	r0, r5
 8004b64:	47b8      	blx	r7
 8004b66:	3001      	adds	r0, #1
 8004b68:	f43f ae7b 	beq.w	8004862 <_printf_float+0xba>
 8004b6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b70:	4631      	mov	r1, r6
 8004b72:	4628      	mov	r0, r5
 8004b74:	47b8      	blx	r7
 8004b76:	3001      	adds	r0, #1
 8004b78:	f108 0801 	add.w	r8, r8, #1
 8004b7c:	f43f ae71 	beq.w	8004862 <_printf_float+0xba>
 8004b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b82:	2200      	movs	r2, #0
 8004b84:	f103 3aff 	add.w	sl, r3, #4294967295
 8004b88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f7fb ffa3 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b92:	b9c8      	cbnz	r0, 8004bc8 <_printf_float+0x420>
 8004b94:	4653      	mov	r3, sl
 8004b96:	4642      	mov	r2, r8
 8004b98:	4631      	mov	r1, r6
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	47b8      	blx	r7
 8004b9e:	3001      	adds	r0, #1
 8004ba0:	d10e      	bne.n	8004bc0 <_printf_float+0x418>
 8004ba2:	e65e      	b.n	8004862 <_printf_float+0xba>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	4652      	mov	r2, sl
 8004ba8:	4631      	mov	r1, r6
 8004baa:	4628      	mov	r0, r5
 8004bac:	47b8      	blx	r7
 8004bae:	3001      	adds	r0, #1
 8004bb0:	f43f ae57 	beq.w	8004862 <_printf_float+0xba>
 8004bb4:	f108 0801 	add.w	r8, r8, #1
 8004bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	4543      	cmp	r3, r8
 8004bbe:	dcf1      	bgt.n	8004ba4 <_printf_float+0x3fc>
 8004bc0:	464b      	mov	r3, r9
 8004bc2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004bc6:	e6de      	b.n	8004986 <_printf_float+0x1de>
 8004bc8:	f04f 0800 	mov.w	r8, #0
 8004bcc:	f104 0a1a 	add.w	sl, r4, #26
 8004bd0:	e7f2      	b.n	8004bb8 <_printf_float+0x410>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e7df      	b.n	8004b96 <_printf_float+0x3ee>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	464a      	mov	r2, r9
 8004bda:	4631      	mov	r1, r6
 8004bdc:	4628      	mov	r0, r5
 8004bde:	47b8      	blx	r7
 8004be0:	3001      	adds	r0, #1
 8004be2:	f43f ae3e 	beq.w	8004862 <_printf_float+0xba>
 8004be6:	f108 0801 	add.w	r8, r8, #1
 8004bea:	68e3      	ldr	r3, [r4, #12]
 8004bec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004bee:	1a9b      	subs	r3, r3, r2
 8004bf0:	4543      	cmp	r3, r8
 8004bf2:	dcf0      	bgt.n	8004bd6 <_printf_float+0x42e>
 8004bf4:	e6fc      	b.n	80049f0 <_printf_float+0x248>
 8004bf6:	f04f 0800 	mov.w	r8, #0
 8004bfa:	f104 0919 	add.w	r9, r4, #25
 8004bfe:	e7f4      	b.n	8004bea <_printf_float+0x442>
 8004c00:	2900      	cmp	r1, #0
 8004c02:	f43f ae8b 	beq.w	800491c <_printf_float+0x174>
 8004c06:	2300      	movs	r3, #0
 8004c08:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004c0c:	ab09      	add	r3, sp, #36	; 0x24
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	ec49 8b10 	vmov	d0, r8, r9
 8004c14:	6022      	str	r2, [r4, #0]
 8004c16:	f8cd a004 	str.w	sl, [sp, #4]
 8004c1a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004c1e:	4628      	mov	r0, r5
 8004c20:	f7ff fd2e 	bl	8004680 <__cvt>
 8004c24:	4680      	mov	r8, r0
 8004c26:	e648      	b.n	80048ba <_printf_float+0x112>

08004c28 <_printf_common>:
 8004c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c2c:	4691      	mov	r9, r2
 8004c2e:	461f      	mov	r7, r3
 8004c30:	688a      	ldr	r2, [r1, #8]
 8004c32:	690b      	ldr	r3, [r1, #16]
 8004c34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	bfb8      	it	lt
 8004c3c:	4613      	movlt	r3, r2
 8004c3e:	f8c9 3000 	str.w	r3, [r9]
 8004c42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c46:	4606      	mov	r6, r0
 8004c48:	460c      	mov	r4, r1
 8004c4a:	b112      	cbz	r2, 8004c52 <_printf_common+0x2a>
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	f8c9 3000 	str.w	r3, [r9]
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	0699      	lsls	r1, r3, #26
 8004c56:	bf42      	ittt	mi
 8004c58:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004c5c:	3302      	addmi	r3, #2
 8004c5e:	f8c9 3000 	strmi.w	r3, [r9]
 8004c62:	6825      	ldr	r5, [r4, #0]
 8004c64:	f015 0506 	ands.w	r5, r5, #6
 8004c68:	d107      	bne.n	8004c7a <_printf_common+0x52>
 8004c6a:	f104 0a19 	add.w	sl, r4, #25
 8004c6e:	68e3      	ldr	r3, [r4, #12]
 8004c70:	f8d9 2000 	ldr.w	r2, [r9]
 8004c74:	1a9b      	subs	r3, r3, r2
 8004c76:	42ab      	cmp	r3, r5
 8004c78:	dc28      	bgt.n	8004ccc <_printf_common+0xa4>
 8004c7a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004c7e:	6822      	ldr	r2, [r4, #0]
 8004c80:	3300      	adds	r3, #0
 8004c82:	bf18      	it	ne
 8004c84:	2301      	movne	r3, #1
 8004c86:	0692      	lsls	r2, r2, #26
 8004c88:	d42d      	bmi.n	8004ce6 <_printf_common+0xbe>
 8004c8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c8e:	4639      	mov	r1, r7
 8004c90:	4630      	mov	r0, r6
 8004c92:	47c0      	blx	r8
 8004c94:	3001      	adds	r0, #1
 8004c96:	d020      	beq.n	8004cda <_printf_common+0xb2>
 8004c98:	6823      	ldr	r3, [r4, #0]
 8004c9a:	68e5      	ldr	r5, [r4, #12]
 8004c9c:	f8d9 2000 	ldr.w	r2, [r9]
 8004ca0:	f003 0306 	and.w	r3, r3, #6
 8004ca4:	2b04      	cmp	r3, #4
 8004ca6:	bf08      	it	eq
 8004ca8:	1aad      	subeq	r5, r5, r2
 8004caa:	68a3      	ldr	r3, [r4, #8]
 8004cac:	6922      	ldr	r2, [r4, #16]
 8004cae:	bf0c      	ite	eq
 8004cb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cb4:	2500      	movne	r5, #0
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	bfc4      	itt	gt
 8004cba:	1a9b      	subgt	r3, r3, r2
 8004cbc:	18ed      	addgt	r5, r5, r3
 8004cbe:	f04f 0900 	mov.w	r9, #0
 8004cc2:	341a      	adds	r4, #26
 8004cc4:	454d      	cmp	r5, r9
 8004cc6:	d11a      	bne.n	8004cfe <_printf_common+0xd6>
 8004cc8:	2000      	movs	r0, #0
 8004cca:	e008      	b.n	8004cde <_printf_common+0xb6>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	4652      	mov	r2, sl
 8004cd0:	4639      	mov	r1, r7
 8004cd2:	4630      	mov	r0, r6
 8004cd4:	47c0      	blx	r8
 8004cd6:	3001      	adds	r0, #1
 8004cd8:	d103      	bne.n	8004ce2 <_printf_common+0xba>
 8004cda:	f04f 30ff 	mov.w	r0, #4294967295
 8004cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce2:	3501      	adds	r5, #1
 8004ce4:	e7c3      	b.n	8004c6e <_printf_common+0x46>
 8004ce6:	18e1      	adds	r1, r4, r3
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	2030      	movs	r0, #48	; 0x30
 8004cec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cf0:	4422      	add	r2, r4
 8004cf2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cf6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cfa:	3302      	adds	r3, #2
 8004cfc:	e7c5      	b.n	8004c8a <_printf_common+0x62>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	4622      	mov	r2, r4
 8004d02:	4639      	mov	r1, r7
 8004d04:	4630      	mov	r0, r6
 8004d06:	47c0      	blx	r8
 8004d08:	3001      	adds	r0, #1
 8004d0a:	d0e6      	beq.n	8004cda <_printf_common+0xb2>
 8004d0c:	f109 0901 	add.w	r9, r9, #1
 8004d10:	e7d8      	b.n	8004cc4 <_printf_common+0x9c>
	...

08004d14 <_printf_i>:
 8004d14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d18:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004d1c:	460c      	mov	r4, r1
 8004d1e:	7e09      	ldrb	r1, [r1, #24]
 8004d20:	b085      	sub	sp, #20
 8004d22:	296e      	cmp	r1, #110	; 0x6e
 8004d24:	4617      	mov	r7, r2
 8004d26:	4606      	mov	r6, r0
 8004d28:	4698      	mov	r8, r3
 8004d2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d2c:	f000 80b3 	beq.w	8004e96 <_printf_i+0x182>
 8004d30:	d822      	bhi.n	8004d78 <_printf_i+0x64>
 8004d32:	2963      	cmp	r1, #99	; 0x63
 8004d34:	d036      	beq.n	8004da4 <_printf_i+0x90>
 8004d36:	d80a      	bhi.n	8004d4e <_printf_i+0x3a>
 8004d38:	2900      	cmp	r1, #0
 8004d3a:	f000 80b9 	beq.w	8004eb0 <_printf_i+0x19c>
 8004d3e:	2958      	cmp	r1, #88	; 0x58
 8004d40:	f000 8083 	beq.w	8004e4a <_printf_i+0x136>
 8004d44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d48:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004d4c:	e032      	b.n	8004db4 <_printf_i+0xa0>
 8004d4e:	2964      	cmp	r1, #100	; 0x64
 8004d50:	d001      	beq.n	8004d56 <_printf_i+0x42>
 8004d52:	2969      	cmp	r1, #105	; 0x69
 8004d54:	d1f6      	bne.n	8004d44 <_printf_i+0x30>
 8004d56:	6820      	ldr	r0, [r4, #0]
 8004d58:	6813      	ldr	r3, [r2, #0]
 8004d5a:	0605      	lsls	r5, r0, #24
 8004d5c:	f103 0104 	add.w	r1, r3, #4
 8004d60:	d52a      	bpl.n	8004db8 <_printf_i+0xa4>
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6011      	str	r1, [r2, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	da03      	bge.n	8004d72 <_printf_i+0x5e>
 8004d6a:	222d      	movs	r2, #45	; 0x2d
 8004d6c:	425b      	negs	r3, r3
 8004d6e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004d72:	486f      	ldr	r0, [pc, #444]	; (8004f30 <_printf_i+0x21c>)
 8004d74:	220a      	movs	r2, #10
 8004d76:	e039      	b.n	8004dec <_printf_i+0xd8>
 8004d78:	2973      	cmp	r1, #115	; 0x73
 8004d7a:	f000 809d 	beq.w	8004eb8 <_printf_i+0x1a4>
 8004d7e:	d808      	bhi.n	8004d92 <_printf_i+0x7e>
 8004d80:	296f      	cmp	r1, #111	; 0x6f
 8004d82:	d020      	beq.n	8004dc6 <_printf_i+0xb2>
 8004d84:	2970      	cmp	r1, #112	; 0x70
 8004d86:	d1dd      	bne.n	8004d44 <_printf_i+0x30>
 8004d88:	6823      	ldr	r3, [r4, #0]
 8004d8a:	f043 0320 	orr.w	r3, r3, #32
 8004d8e:	6023      	str	r3, [r4, #0]
 8004d90:	e003      	b.n	8004d9a <_printf_i+0x86>
 8004d92:	2975      	cmp	r1, #117	; 0x75
 8004d94:	d017      	beq.n	8004dc6 <_printf_i+0xb2>
 8004d96:	2978      	cmp	r1, #120	; 0x78
 8004d98:	d1d4      	bne.n	8004d44 <_printf_i+0x30>
 8004d9a:	2378      	movs	r3, #120	; 0x78
 8004d9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004da0:	4864      	ldr	r0, [pc, #400]	; (8004f34 <_printf_i+0x220>)
 8004da2:	e055      	b.n	8004e50 <_printf_i+0x13c>
 8004da4:	6813      	ldr	r3, [r2, #0]
 8004da6:	1d19      	adds	r1, r3, #4
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6011      	str	r1, [r2, #0]
 8004dac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004db0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004db4:	2301      	movs	r3, #1
 8004db6:	e08c      	b.n	8004ed2 <_printf_i+0x1be>
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6011      	str	r1, [r2, #0]
 8004dbc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004dc0:	bf18      	it	ne
 8004dc2:	b21b      	sxthne	r3, r3
 8004dc4:	e7cf      	b.n	8004d66 <_printf_i+0x52>
 8004dc6:	6813      	ldr	r3, [r2, #0]
 8004dc8:	6825      	ldr	r5, [r4, #0]
 8004dca:	1d18      	adds	r0, r3, #4
 8004dcc:	6010      	str	r0, [r2, #0]
 8004dce:	0628      	lsls	r0, r5, #24
 8004dd0:	d501      	bpl.n	8004dd6 <_printf_i+0xc2>
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	e002      	b.n	8004ddc <_printf_i+0xc8>
 8004dd6:	0668      	lsls	r0, r5, #25
 8004dd8:	d5fb      	bpl.n	8004dd2 <_printf_i+0xbe>
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	4854      	ldr	r0, [pc, #336]	; (8004f30 <_printf_i+0x21c>)
 8004dde:	296f      	cmp	r1, #111	; 0x6f
 8004de0:	bf14      	ite	ne
 8004de2:	220a      	movne	r2, #10
 8004de4:	2208      	moveq	r2, #8
 8004de6:	2100      	movs	r1, #0
 8004de8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dec:	6865      	ldr	r5, [r4, #4]
 8004dee:	60a5      	str	r5, [r4, #8]
 8004df0:	2d00      	cmp	r5, #0
 8004df2:	f2c0 8095 	blt.w	8004f20 <_printf_i+0x20c>
 8004df6:	6821      	ldr	r1, [r4, #0]
 8004df8:	f021 0104 	bic.w	r1, r1, #4
 8004dfc:	6021      	str	r1, [r4, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d13d      	bne.n	8004e7e <_printf_i+0x16a>
 8004e02:	2d00      	cmp	r5, #0
 8004e04:	f040 808e 	bne.w	8004f24 <_printf_i+0x210>
 8004e08:	4665      	mov	r5, ip
 8004e0a:	2a08      	cmp	r2, #8
 8004e0c:	d10b      	bne.n	8004e26 <_printf_i+0x112>
 8004e0e:	6823      	ldr	r3, [r4, #0]
 8004e10:	07db      	lsls	r3, r3, #31
 8004e12:	d508      	bpl.n	8004e26 <_printf_i+0x112>
 8004e14:	6923      	ldr	r3, [r4, #16]
 8004e16:	6862      	ldr	r2, [r4, #4]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	bfde      	ittt	le
 8004e1c:	2330      	movle	r3, #48	; 0x30
 8004e1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e22:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e26:	ebac 0305 	sub.w	r3, ip, r5
 8004e2a:	6123      	str	r3, [r4, #16]
 8004e2c:	f8cd 8000 	str.w	r8, [sp]
 8004e30:	463b      	mov	r3, r7
 8004e32:	aa03      	add	r2, sp, #12
 8004e34:	4621      	mov	r1, r4
 8004e36:	4630      	mov	r0, r6
 8004e38:	f7ff fef6 	bl	8004c28 <_printf_common>
 8004e3c:	3001      	adds	r0, #1
 8004e3e:	d14d      	bne.n	8004edc <_printf_i+0x1c8>
 8004e40:	f04f 30ff 	mov.w	r0, #4294967295
 8004e44:	b005      	add	sp, #20
 8004e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e4a:	4839      	ldr	r0, [pc, #228]	; (8004f30 <_printf_i+0x21c>)
 8004e4c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004e50:	6813      	ldr	r3, [r2, #0]
 8004e52:	6821      	ldr	r1, [r4, #0]
 8004e54:	1d1d      	adds	r5, r3, #4
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6015      	str	r5, [r2, #0]
 8004e5a:	060a      	lsls	r2, r1, #24
 8004e5c:	d50b      	bpl.n	8004e76 <_printf_i+0x162>
 8004e5e:	07ca      	lsls	r2, r1, #31
 8004e60:	bf44      	itt	mi
 8004e62:	f041 0120 	orrmi.w	r1, r1, #32
 8004e66:	6021      	strmi	r1, [r4, #0]
 8004e68:	b91b      	cbnz	r3, 8004e72 <_printf_i+0x15e>
 8004e6a:	6822      	ldr	r2, [r4, #0]
 8004e6c:	f022 0220 	bic.w	r2, r2, #32
 8004e70:	6022      	str	r2, [r4, #0]
 8004e72:	2210      	movs	r2, #16
 8004e74:	e7b7      	b.n	8004de6 <_printf_i+0xd2>
 8004e76:	064d      	lsls	r5, r1, #25
 8004e78:	bf48      	it	mi
 8004e7a:	b29b      	uxthmi	r3, r3
 8004e7c:	e7ef      	b.n	8004e5e <_printf_i+0x14a>
 8004e7e:	4665      	mov	r5, ip
 8004e80:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e84:	fb02 3311 	mls	r3, r2, r1, r3
 8004e88:	5cc3      	ldrb	r3, [r0, r3]
 8004e8a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004e8e:	460b      	mov	r3, r1
 8004e90:	2900      	cmp	r1, #0
 8004e92:	d1f5      	bne.n	8004e80 <_printf_i+0x16c>
 8004e94:	e7b9      	b.n	8004e0a <_printf_i+0xf6>
 8004e96:	6813      	ldr	r3, [r2, #0]
 8004e98:	6825      	ldr	r5, [r4, #0]
 8004e9a:	6961      	ldr	r1, [r4, #20]
 8004e9c:	1d18      	adds	r0, r3, #4
 8004e9e:	6010      	str	r0, [r2, #0]
 8004ea0:	0628      	lsls	r0, r5, #24
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	d501      	bpl.n	8004eaa <_printf_i+0x196>
 8004ea6:	6019      	str	r1, [r3, #0]
 8004ea8:	e002      	b.n	8004eb0 <_printf_i+0x19c>
 8004eaa:	066a      	lsls	r2, r5, #25
 8004eac:	d5fb      	bpl.n	8004ea6 <_printf_i+0x192>
 8004eae:	8019      	strh	r1, [r3, #0]
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	6123      	str	r3, [r4, #16]
 8004eb4:	4665      	mov	r5, ip
 8004eb6:	e7b9      	b.n	8004e2c <_printf_i+0x118>
 8004eb8:	6813      	ldr	r3, [r2, #0]
 8004eba:	1d19      	adds	r1, r3, #4
 8004ebc:	6011      	str	r1, [r2, #0]
 8004ebe:	681d      	ldr	r5, [r3, #0]
 8004ec0:	6862      	ldr	r2, [r4, #4]
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	f7fb f993 	bl	80001f0 <memchr>
 8004eca:	b108      	cbz	r0, 8004ed0 <_printf_i+0x1bc>
 8004ecc:	1b40      	subs	r0, r0, r5
 8004ece:	6060      	str	r0, [r4, #4]
 8004ed0:	6863      	ldr	r3, [r4, #4]
 8004ed2:	6123      	str	r3, [r4, #16]
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eda:	e7a7      	b.n	8004e2c <_printf_i+0x118>
 8004edc:	6923      	ldr	r3, [r4, #16]
 8004ede:	462a      	mov	r2, r5
 8004ee0:	4639      	mov	r1, r7
 8004ee2:	4630      	mov	r0, r6
 8004ee4:	47c0      	blx	r8
 8004ee6:	3001      	adds	r0, #1
 8004ee8:	d0aa      	beq.n	8004e40 <_printf_i+0x12c>
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	079b      	lsls	r3, r3, #30
 8004eee:	d413      	bmi.n	8004f18 <_printf_i+0x204>
 8004ef0:	68e0      	ldr	r0, [r4, #12]
 8004ef2:	9b03      	ldr	r3, [sp, #12]
 8004ef4:	4298      	cmp	r0, r3
 8004ef6:	bfb8      	it	lt
 8004ef8:	4618      	movlt	r0, r3
 8004efa:	e7a3      	b.n	8004e44 <_printf_i+0x130>
 8004efc:	2301      	movs	r3, #1
 8004efe:	464a      	mov	r2, r9
 8004f00:	4639      	mov	r1, r7
 8004f02:	4630      	mov	r0, r6
 8004f04:	47c0      	blx	r8
 8004f06:	3001      	adds	r0, #1
 8004f08:	d09a      	beq.n	8004e40 <_printf_i+0x12c>
 8004f0a:	3501      	adds	r5, #1
 8004f0c:	68e3      	ldr	r3, [r4, #12]
 8004f0e:	9a03      	ldr	r2, [sp, #12]
 8004f10:	1a9b      	subs	r3, r3, r2
 8004f12:	42ab      	cmp	r3, r5
 8004f14:	dcf2      	bgt.n	8004efc <_printf_i+0x1e8>
 8004f16:	e7eb      	b.n	8004ef0 <_printf_i+0x1dc>
 8004f18:	2500      	movs	r5, #0
 8004f1a:	f104 0919 	add.w	r9, r4, #25
 8004f1e:	e7f5      	b.n	8004f0c <_printf_i+0x1f8>
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1ac      	bne.n	8004e7e <_printf_i+0x16a>
 8004f24:	7803      	ldrb	r3, [r0, #0]
 8004f26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f2e:	e76c      	b.n	8004e0a <_printf_i+0xf6>
 8004f30:	080071b0 	.word	0x080071b0
 8004f34:	080071c1 	.word	0x080071c1

08004f38 <siprintf>:
 8004f38:	b40e      	push	{r1, r2, r3}
 8004f3a:	b500      	push	{lr}
 8004f3c:	b09c      	sub	sp, #112	; 0x70
 8004f3e:	ab1d      	add	r3, sp, #116	; 0x74
 8004f40:	9002      	str	r0, [sp, #8]
 8004f42:	9006      	str	r0, [sp, #24]
 8004f44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f48:	4809      	ldr	r0, [pc, #36]	; (8004f70 <siprintf+0x38>)
 8004f4a:	9107      	str	r1, [sp, #28]
 8004f4c:	9104      	str	r1, [sp, #16]
 8004f4e:	4909      	ldr	r1, [pc, #36]	; (8004f74 <siprintf+0x3c>)
 8004f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f54:	9105      	str	r1, [sp, #20]
 8004f56:	6800      	ldr	r0, [r0, #0]
 8004f58:	9301      	str	r3, [sp, #4]
 8004f5a:	a902      	add	r1, sp, #8
 8004f5c:	f001 fa98 	bl	8006490 <_svfiprintf_r>
 8004f60:	9b02      	ldr	r3, [sp, #8]
 8004f62:	2200      	movs	r2, #0
 8004f64:	701a      	strb	r2, [r3, #0]
 8004f66:	b01c      	add	sp, #112	; 0x70
 8004f68:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f6c:	b003      	add	sp, #12
 8004f6e:	4770      	bx	lr
 8004f70:	2000000c 	.word	0x2000000c
 8004f74:	ffff0208 	.word	0xffff0208

08004f78 <siscanf>:
 8004f78:	b40e      	push	{r1, r2, r3}
 8004f7a:	b530      	push	{r4, r5, lr}
 8004f7c:	b09c      	sub	sp, #112	; 0x70
 8004f7e:	ac1f      	add	r4, sp, #124	; 0x7c
 8004f80:	f44f 7201 	mov.w	r2, #516	; 0x204
 8004f84:	f854 5b04 	ldr.w	r5, [r4], #4
 8004f88:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004f8c:	9002      	str	r0, [sp, #8]
 8004f8e:	9006      	str	r0, [sp, #24]
 8004f90:	f7fb f926 	bl	80001e0 <strlen>
 8004f94:	4b0b      	ldr	r3, [pc, #44]	; (8004fc4 <siscanf+0x4c>)
 8004f96:	9003      	str	r0, [sp, #12]
 8004f98:	9007      	str	r0, [sp, #28]
 8004f9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f9c:	480a      	ldr	r0, [pc, #40]	; (8004fc8 <siscanf+0x50>)
 8004f9e:	9401      	str	r4, [sp, #4]
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	930f      	str	r3, [sp, #60]	; 0x3c
 8004fa4:	9314      	str	r3, [sp, #80]	; 0x50
 8004fa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004faa:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004fae:	462a      	mov	r2, r5
 8004fb0:	4623      	mov	r3, r4
 8004fb2:	a902      	add	r1, sp, #8
 8004fb4:	6800      	ldr	r0, [r0, #0]
 8004fb6:	f001 fbbd 	bl	8006734 <__ssvfiscanf_r>
 8004fba:	b01c      	add	sp, #112	; 0x70
 8004fbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fc0:	b003      	add	sp, #12
 8004fc2:	4770      	bx	lr
 8004fc4:	08004fcd 	.word	0x08004fcd
 8004fc8:	2000000c 	.word	0x2000000c

08004fcc <__seofread>:
 8004fcc:	2000      	movs	r0, #0
 8004fce:	4770      	bx	lr

08004fd0 <strcat>:
 8004fd0:	b510      	push	{r4, lr}
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	781a      	ldrb	r2, [r3, #0]
 8004fd6:	1c5c      	adds	r4, r3, #1
 8004fd8:	b93a      	cbnz	r2, 8004fea <strcat+0x1a>
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fe0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004fe4:	2a00      	cmp	r2, #0
 8004fe6:	d1f9      	bne.n	8004fdc <strcat+0xc>
 8004fe8:	bd10      	pop	{r4, pc}
 8004fea:	4623      	mov	r3, r4
 8004fec:	e7f2      	b.n	8004fd4 <strcat+0x4>

08004fee <quorem>:
 8004fee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff2:	6903      	ldr	r3, [r0, #16]
 8004ff4:	690c      	ldr	r4, [r1, #16]
 8004ff6:	42a3      	cmp	r3, r4
 8004ff8:	4680      	mov	r8, r0
 8004ffa:	f2c0 8082 	blt.w	8005102 <quorem+0x114>
 8004ffe:	3c01      	subs	r4, #1
 8005000:	f101 0714 	add.w	r7, r1, #20
 8005004:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005008:	f100 0614 	add.w	r6, r0, #20
 800500c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005010:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005014:	eb06 030c 	add.w	r3, r6, ip
 8005018:	3501      	adds	r5, #1
 800501a:	eb07 090c 	add.w	r9, r7, ip
 800501e:	9301      	str	r3, [sp, #4]
 8005020:	fbb0 f5f5 	udiv	r5, r0, r5
 8005024:	b395      	cbz	r5, 800508c <quorem+0x9e>
 8005026:	f04f 0a00 	mov.w	sl, #0
 800502a:	4638      	mov	r0, r7
 800502c:	46b6      	mov	lr, r6
 800502e:	46d3      	mov	fp, sl
 8005030:	f850 2b04 	ldr.w	r2, [r0], #4
 8005034:	b293      	uxth	r3, r2
 8005036:	fb05 a303 	mla	r3, r5, r3, sl
 800503a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800503e:	b29b      	uxth	r3, r3
 8005040:	ebab 0303 	sub.w	r3, fp, r3
 8005044:	0c12      	lsrs	r2, r2, #16
 8005046:	f8de b000 	ldr.w	fp, [lr]
 800504a:	fb05 a202 	mla	r2, r5, r2, sl
 800504e:	fa13 f38b 	uxtah	r3, r3, fp
 8005052:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005056:	fa1f fb82 	uxth.w	fp, r2
 800505a:	f8de 2000 	ldr.w	r2, [lr]
 800505e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005062:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005066:	b29b      	uxth	r3, r3
 8005068:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800506c:	4581      	cmp	r9, r0
 800506e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005072:	f84e 3b04 	str.w	r3, [lr], #4
 8005076:	d2db      	bcs.n	8005030 <quorem+0x42>
 8005078:	f856 300c 	ldr.w	r3, [r6, ip]
 800507c:	b933      	cbnz	r3, 800508c <quorem+0x9e>
 800507e:	9b01      	ldr	r3, [sp, #4]
 8005080:	3b04      	subs	r3, #4
 8005082:	429e      	cmp	r6, r3
 8005084:	461a      	mov	r2, r3
 8005086:	d330      	bcc.n	80050ea <quorem+0xfc>
 8005088:	f8c8 4010 	str.w	r4, [r8, #16]
 800508c:	4640      	mov	r0, r8
 800508e:	f001 f829 	bl	80060e4 <__mcmp>
 8005092:	2800      	cmp	r0, #0
 8005094:	db25      	blt.n	80050e2 <quorem+0xf4>
 8005096:	3501      	adds	r5, #1
 8005098:	4630      	mov	r0, r6
 800509a:	f04f 0c00 	mov.w	ip, #0
 800509e:	f857 2b04 	ldr.w	r2, [r7], #4
 80050a2:	f8d0 e000 	ldr.w	lr, [r0]
 80050a6:	b293      	uxth	r3, r2
 80050a8:	ebac 0303 	sub.w	r3, ip, r3
 80050ac:	0c12      	lsrs	r2, r2, #16
 80050ae:	fa13 f38e 	uxtah	r3, r3, lr
 80050b2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80050b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050c0:	45b9      	cmp	r9, r7
 80050c2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80050c6:	f840 3b04 	str.w	r3, [r0], #4
 80050ca:	d2e8      	bcs.n	800509e <quorem+0xb0>
 80050cc:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80050d0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80050d4:	b92a      	cbnz	r2, 80050e2 <quorem+0xf4>
 80050d6:	3b04      	subs	r3, #4
 80050d8:	429e      	cmp	r6, r3
 80050da:	461a      	mov	r2, r3
 80050dc:	d30b      	bcc.n	80050f6 <quorem+0x108>
 80050de:	f8c8 4010 	str.w	r4, [r8, #16]
 80050e2:	4628      	mov	r0, r5
 80050e4:	b003      	add	sp, #12
 80050e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ea:	6812      	ldr	r2, [r2, #0]
 80050ec:	3b04      	subs	r3, #4
 80050ee:	2a00      	cmp	r2, #0
 80050f0:	d1ca      	bne.n	8005088 <quorem+0x9a>
 80050f2:	3c01      	subs	r4, #1
 80050f4:	e7c5      	b.n	8005082 <quorem+0x94>
 80050f6:	6812      	ldr	r2, [r2, #0]
 80050f8:	3b04      	subs	r3, #4
 80050fa:	2a00      	cmp	r2, #0
 80050fc:	d1ef      	bne.n	80050de <quorem+0xf0>
 80050fe:	3c01      	subs	r4, #1
 8005100:	e7ea      	b.n	80050d8 <quorem+0xea>
 8005102:	2000      	movs	r0, #0
 8005104:	e7ee      	b.n	80050e4 <quorem+0xf6>
	...

08005108 <_dtoa_r>:
 8005108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800510c:	ec57 6b10 	vmov	r6, r7, d0
 8005110:	b097      	sub	sp, #92	; 0x5c
 8005112:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005114:	9106      	str	r1, [sp, #24]
 8005116:	4604      	mov	r4, r0
 8005118:	920b      	str	r2, [sp, #44]	; 0x2c
 800511a:	9312      	str	r3, [sp, #72]	; 0x48
 800511c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005120:	e9cd 6700 	strd	r6, r7, [sp]
 8005124:	b93d      	cbnz	r5, 8005136 <_dtoa_r+0x2e>
 8005126:	2010      	movs	r0, #16
 8005128:	f000 fdb4 	bl	8005c94 <malloc>
 800512c:	6260      	str	r0, [r4, #36]	; 0x24
 800512e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005132:	6005      	str	r5, [r0, #0]
 8005134:	60c5      	str	r5, [r0, #12]
 8005136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005138:	6819      	ldr	r1, [r3, #0]
 800513a:	b151      	cbz	r1, 8005152 <_dtoa_r+0x4a>
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	604a      	str	r2, [r1, #4]
 8005140:	2301      	movs	r3, #1
 8005142:	4093      	lsls	r3, r2
 8005144:	608b      	str	r3, [r1, #8]
 8005146:	4620      	mov	r0, r4
 8005148:	f000 fdeb 	bl	8005d22 <_Bfree>
 800514c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800514e:	2200      	movs	r2, #0
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	1e3b      	subs	r3, r7, #0
 8005154:	bfbb      	ittet	lt
 8005156:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800515a:	9301      	strlt	r3, [sp, #4]
 800515c:	2300      	movge	r3, #0
 800515e:	2201      	movlt	r2, #1
 8005160:	bfac      	ite	ge
 8005162:	f8c8 3000 	strge.w	r3, [r8]
 8005166:	f8c8 2000 	strlt.w	r2, [r8]
 800516a:	4baf      	ldr	r3, [pc, #700]	; (8005428 <_dtoa_r+0x320>)
 800516c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005170:	ea33 0308 	bics.w	r3, r3, r8
 8005174:	d114      	bne.n	80051a0 <_dtoa_r+0x98>
 8005176:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005178:	f242 730f 	movw	r3, #9999	; 0x270f
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	9b00      	ldr	r3, [sp, #0]
 8005180:	b923      	cbnz	r3, 800518c <_dtoa_r+0x84>
 8005182:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005186:	2800      	cmp	r0, #0
 8005188:	f000 8542 	beq.w	8005c10 <_dtoa_r+0xb08>
 800518c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800518e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800543c <_dtoa_r+0x334>
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 8544 	beq.w	8005c20 <_dtoa_r+0xb18>
 8005198:	f10b 0303 	add.w	r3, fp, #3
 800519c:	f000 bd3e 	b.w	8005c1c <_dtoa_r+0xb14>
 80051a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80051a4:	2200      	movs	r2, #0
 80051a6:	2300      	movs	r3, #0
 80051a8:	4630      	mov	r0, r6
 80051aa:	4639      	mov	r1, r7
 80051ac:	f7fb fc94 	bl	8000ad8 <__aeabi_dcmpeq>
 80051b0:	4681      	mov	r9, r0
 80051b2:	b168      	cbz	r0, 80051d0 <_dtoa_r+0xc8>
 80051b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80051b6:	2301      	movs	r3, #1
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 8524 	beq.w	8005c0a <_dtoa_r+0xb02>
 80051c2:	4b9a      	ldr	r3, [pc, #616]	; (800542c <_dtoa_r+0x324>)
 80051c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80051c6:	f103 3bff 	add.w	fp, r3, #4294967295
 80051ca:	6013      	str	r3, [r2, #0]
 80051cc:	f000 bd28 	b.w	8005c20 <_dtoa_r+0xb18>
 80051d0:	aa14      	add	r2, sp, #80	; 0x50
 80051d2:	a915      	add	r1, sp, #84	; 0x54
 80051d4:	ec47 6b10 	vmov	d0, r6, r7
 80051d8:	4620      	mov	r0, r4
 80051da:	f000 fffa 	bl	80061d2 <__d2b>
 80051de:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80051e2:	9004      	str	r0, [sp, #16]
 80051e4:	2d00      	cmp	r5, #0
 80051e6:	d07c      	beq.n	80052e2 <_dtoa_r+0x1da>
 80051e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80051ec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80051f0:	46b2      	mov	sl, r6
 80051f2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80051f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80051fa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80051fe:	2200      	movs	r2, #0
 8005200:	4b8b      	ldr	r3, [pc, #556]	; (8005430 <_dtoa_r+0x328>)
 8005202:	4650      	mov	r0, sl
 8005204:	4659      	mov	r1, fp
 8005206:	f7fb f847 	bl	8000298 <__aeabi_dsub>
 800520a:	a381      	add	r3, pc, #516	; (adr r3, 8005410 <_dtoa_r+0x308>)
 800520c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005210:	f7fb f9fa 	bl	8000608 <__aeabi_dmul>
 8005214:	a380      	add	r3, pc, #512	; (adr r3, 8005418 <_dtoa_r+0x310>)
 8005216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521a:	f7fb f83f 	bl	800029c <__adddf3>
 800521e:	4606      	mov	r6, r0
 8005220:	4628      	mov	r0, r5
 8005222:	460f      	mov	r7, r1
 8005224:	f7fb f986 	bl	8000534 <__aeabi_i2d>
 8005228:	a37d      	add	r3, pc, #500	; (adr r3, 8005420 <_dtoa_r+0x318>)
 800522a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522e:	f7fb f9eb 	bl	8000608 <__aeabi_dmul>
 8005232:	4602      	mov	r2, r0
 8005234:	460b      	mov	r3, r1
 8005236:	4630      	mov	r0, r6
 8005238:	4639      	mov	r1, r7
 800523a:	f7fb f82f 	bl	800029c <__adddf3>
 800523e:	4606      	mov	r6, r0
 8005240:	460f      	mov	r7, r1
 8005242:	f7fb fc91 	bl	8000b68 <__aeabi_d2iz>
 8005246:	2200      	movs	r2, #0
 8005248:	4682      	mov	sl, r0
 800524a:	2300      	movs	r3, #0
 800524c:	4630      	mov	r0, r6
 800524e:	4639      	mov	r1, r7
 8005250:	f7fb fc4c 	bl	8000aec <__aeabi_dcmplt>
 8005254:	b148      	cbz	r0, 800526a <_dtoa_r+0x162>
 8005256:	4650      	mov	r0, sl
 8005258:	f7fb f96c 	bl	8000534 <__aeabi_i2d>
 800525c:	4632      	mov	r2, r6
 800525e:	463b      	mov	r3, r7
 8005260:	f7fb fc3a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005264:	b908      	cbnz	r0, 800526a <_dtoa_r+0x162>
 8005266:	f10a 3aff 	add.w	sl, sl, #4294967295
 800526a:	f1ba 0f16 	cmp.w	sl, #22
 800526e:	d859      	bhi.n	8005324 <_dtoa_r+0x21c>
 8005270:	4970      	ldr	r1, [pc, #448]	; (8005434 <_dtoa_r+0x32c>)
 8005272:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005276:	e9dd 2300 	ldrd	r2, r3, [sp]
 800527a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800527e:	f7fb fc53 	bl	8000b28 <__aeabi_dcmpgt>
 8005282:	2800      	cmp	r0, #0
 8005284:	d050      	beq.n	8005328 <_dtoa_r+0x220>
 8005286:	f10a 3aff 	add.w	sl, sl, #4294967295
 800528a:	2300      	movs	r3, #0
 800528c:	930f      	str	r3, [sp, #60]	; 0x3c
 800528e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005290:	1b5d      	subs	r5, r3, r5
 8005292:	f1b5 0801 	subs.w	r8, r5, #1
 8005296:	bf49      	itett	mi
 8005298:	f1c5 0301 	rsbmi	r3, r5, #1
 800529c:	2300      	movpl	r3, #0
 800529e:	9305      	strmi	r3, [sp, #20]
 80052a0:	f04f 0800 	movmi.w	r8, #0
 80052a4:	bf58      	it	pl
 80052a6:	9305      	strpl	r3, [sp, #20]
 80052a8:	f1ba 0f00 	cmp.w	sl, #0
 80052ac:	db3e      	blt.n	800532c <_dtoa_r+0x224>
 80052ae:	2300      	movs	r3, #0
 80052b0:	44d0      	add	r8, sl
 80052b2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80052b6:	9307      	str	r3, [sp, #28]
 80052b8:	9b06      	ldr	r3, [sp, #24]
 80052ba:	2b09      	cmp	r3, #9
 80052bc:	f200 8090 	bhi.w	80053e0 <_dtoa_r+0x2d8>
 80052c0:	2b05      	cmp	r3, #5
 80052c2:	bfc4      	itt	gt
 80052c4:	3b04      	subgt	r3, #4
 80052c6:	9306      	strgt	r3, [sp, #24]
 80052c8:	9b06      	ldr	r3, [sp, #24]
 80052ca:	f1a3 0302 	sub.w	r3, r3, #2
 80052ce:	bfcc      	ite	gt
 80052d0:	2500      	movgt	r5, #0
 80052d2:	2501      	movle	r5, #1
 80052d4:	2b03      	cmp	r3, #3
 80052d6:	f200 808f 	bhi.w	80053f8 <_dtoa_r+0x2f0>
 80052da:	e8df f003 	tbb	[pc, r3]
 80052de:	7f7d      	.short	0x7f7d
 80052e0:	7131      	.short	0x7131
 80052e2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80052e6:	441d      	add	r5, r3
 80052e8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80052ec:	2820      	cmp	r0, #32
 80052ee:	dd13      	ble.n	8005318 <_dtoa_r+0x210>
 80052f0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80052f4:	9b00      	ldr	r3, [sp, #0]
 80052f6:	fa08 f800 	lsl.w	r8, r8, r0
 80052fa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80052fe:	fa23 f000 	lsr.w	r0, r3, r0
 8005302:	ea48 0000 	orr.w	r0, r8, r0
 8005306:	f7fb f905 	bl	8000514 <__aeabi_ui2d>
 800530a:	2301      	movs	r3, #1
 800530c:	4682      	mov	sl, r0
 800530e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005312:	3d01      	subs	r5, #1
 8005314:	9313      	str	r3, [sp, #76]	; 0x4c
 8005316:	e772      	b.n	80051fe <_dtoa_r+0xf6>
 8005318:	9b00      	ldr	r3, [sp, #0]
 800531a:	f1c0 0020 	rsb	r0, r0, #32
 800531e:	fa03 f000 	lsl.w	r0, r3, r0
 8005322:	e7f0      	b.n	8005306 <_dtoa_r+0x1fe>
 8005324:	2301      	movs	r3, #1
 8005326:	e7b1      	b.n	800528c <_dtoa_r+0x184>
 8005328:	900f      	str	r0, [sp, #60]	; 0x3c
 800532a:	e7b0      	b.n	800528e <_dtoa_r+0x186>
 800532c:	9b05      	ldr	r3, [sp, #20]
 800532e:	eba3 030a 	sub.w	r3, r3, sl
 8005332:	9305      	str	r3, [sp, #20]
 8005334:	f1ca 0300 	rsb	r3, sl, #0
 8005338:	9307      	str	r3, [sp, #28]
 800533a:	2300      	movs	r3, #0
 800533c:	930e      	str	r3, [sp, #56]	; 0x38
 800533e:	e7bb      	b.n	80052b8 <_dtoa_r+0x1b0>
 8005340:	2301      	movs	r3, #1
 8005342:	930a      	str	r3, [sp, #40]	; 0x28
 8005344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005346:	2b00      	cmp	r3, #0
 8005348:	dd59      	ble.n	80053fe <_dtoa_r+0x2f6>
 800534a:	9302      	str	r3, [sp, #8]
 800534c:	4699      	mov	r9, r3
 800534e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005350:	2200      	movs	r2, #0
 8005352:	6072      	str	r2, [r6, #4]
 8005354:	2204      	movs	r2, #4
 8005356:	f102 0014 	add.w	r0, r2, #20
 800535a:	4298      	cmp	r0, r3
 800535c:	6871      	ldr	r1, [r6, #4]
 800535e:	d953      	bls.n	8005408 <_dtoa_r+0x300>
 8005360:	4620      	mov	r0, r4
 8005362:	f000 fcaa 	bl	8005cba <_Balloc>
 8005366:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005368:	6030      	str	r0, [r6, #0]
 800536a:	f1b9 0f0e 	cmp.w	r9, #14
 800536e:	f8d3 b000 	ldr.w	fp, [r3]
 8005372:	f200 80e6 	bhi.w	8005542 <_dtoa_r+0x43a>
 8005376:	2d00      	cmp	r5, #0
 8005378:	f000 80e3 	beq.w	8005542 <_dtoa_r+0x43a>
 800537c:	ed9d 7b00 	vldr	d7, [sp]
 8005380:	f1ba 0f00 	cmp.w	sl, #0
 8005384:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005388:	dd74      	ble.n	8005474 <_dtoa_r+0x36c>
 800538a:	4a2a      	ldr	r2, [pc, #168]	; (8005434 <_dtoa_r+0x32c>)
 800538c:	f00a 030f 	and.w	r3, sl, #15
 8005390:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005394:	ed93 7b00 	vldr	d7, [r3]
 8005398:	ea4f 162a 	mov.w	r6, sl, asr #4
 800539c:	06f0      	lsls	r0, r6, #27
 800539e:	ed8d 7b08 	vstr	d7, [sp, #32]
 80053a2:	d565      	bpl.n	8005470 <_dtoa_r+0x368>
 80053a4:	4b24      	ldr	r3, [pc, #144]	; (8005438 <_dtoa_r+0x330>)
 80053a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80053ae:	f7fb fa55 	bl	800085c <__aeabi_ddiv>
 80053b2:	e9cd 0100 	strd	r0, r1, [sp]
 80053b6:	f006 060f 	and.w	r6, r6, #15
 80053ba:	2503      	movs	r5, #3
 80053bc:	4f1e      	ldr	r7, [pc, #120]	; (8005438 <_dtoa_r+0x330>)
 80053be:	e04c      	b.n	800545a <_dtoa_r+0x352>
 80053c0:	2301      	movs	r3, #1
 80053c2:	930a      	str	r3, [sp, #40]	; 0x28
 80053c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053c6:	4453      	add	r3, sl
 80053c8:	f103 0901 	add.w	r9, r3, #1
 80053cc:	9302      	str	r3, [sp, #8]
 80053ce:	464b      	mov	r3, r9
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	bfb8      	it	lt
 80053d4:	2301      	movlt	r3, #1
 80053d6:	e7ba      	b.n	800534e <_dtoa_r+0x246>
 80053d8:	2300      	movs	r3, #0
 80053da:	e7b2      	b.n	8005342 <_dtoa_r+0x23a>
 80053dc:	2300      	movs	r3, #0
 80053de:	e7f0      	b.n	80053c2 <_dtoa_r+0x2ba>
 80053e0:	2501      	movs	r5, #1
 80053e2:	2300      	movs	r3, #0
 80053e4:	9306      	str	r3, [sp, #24]
 80053e6:	950a      	str	r5, [sp, #40]	; 0x28
 80053e8:	f04f 33ff 	mov.w	r3, #4294967295
 80053ec:	9302      	str	r3, [sp, #8]
 80053ee:	4699      	mov	r9, r3
 80053f0:	2200      	movs	r2, #0
 80053f2:	2312      	movs	r3, #18
 80053f4:	920b      	str	r2, [sp, #44]	; 0x2c
 80053f6:	e7aa      	b.n	800534e <_dtoa_r+0x246>
 80053f8:	2301      	movs	r3, #1
 80053fa:	930a      	str	r3, [sp, #40]	; 0x28
 80053fc:	e7f4      	b.n	80053e8 <_dtoa_r+0x2e0>
 80053fe:	2301      	movs	r3, #1
 8005400:	9302      	str	r3, [sp, #8]
 8005402:	4699      	mov	r9, r3
 8005404:	461a      	mov	r2, r3
 8005406:	e7f5      	b.n	80053f4 <_dtoa_r+0x2ec>
 8005408:	3101      	adds	r1, #1
 800540a:	6071      	str	r1, [r6, #4]
 800540c:	0052      	lsls	r2, r2, #1
 800540e:	e7a2      	b.n	8005356 <_dtoa_r+0x24e>
 8005410:	636f4361 	.word	0x636f4361
 8005414:	3fd287a7 	.word	0x3fd287a7
 8005418:	8b60c8b3 	.word	0x8b60c8b3
 800541c:	3fc68a28 	.word	0x3fc68a28
 8005420:	509f79fb 	.word	0x509f79fb
 8005424:	3fd34413 	.word	0x3fd34413
 8005428:	7ff00000 	.word	0x7ff00000
 800542c:	08007304 	.word	0x08007304
 8005430:	3ff80000 	.word	0x3ff80000
 8005434:	08007208 	.word	0x08007208
 8005438:	080071e0 	.word	0x080071e0
 800543c:	080071db 	.word	0x080071db
 8005440:	07f1      	lsls	r1, r6, #31
 8005442:	d508      	bpl.n	8005456 <_dtoa_r+0x34e>
 8005444:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800544c:	f7fb f8dc 	bl	8000608 <__aeabi_dmul>
 8005450:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005454:	3501      	adds	r5, #1
 8005456:	1076      	asrs	r6, r6, #1
 8005458:	3708      	adds	r7, #8
 800545a:	2e00      	cmp	r6, #0
 800545c:	d1f0      	bne.n	8005440 <_dtoa_r+0x338>
 800545e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005462:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005466:	f7fb f9f9 	bl	800085c <__aeabi_ddiv>
 800546a:	e9cd 0100 	strd	r0, r1, [sp]
 800546e:	e01a      	b.n	80054a6 <_dtoa_r+0x39e>
 8005470:	2502      	movs	r5, #2
 8005472:	e7a3      	b.n	80053bc <_dtoa_r+0x2b4>
 8005474:	f000 80a0 	beq.w	80055b8 <_dtoa_r+0x4b0>
 8005478:	f1ca 0600 	rsb	r6, sl, #0
 800547c:	4b9f      	ldr	r3, [pc, #636]	; (80056fc <_dtoa_r+0x5f4>)
 800547e:	4fa0      	ldr	r7, [pc, #640]	; (8005700 <_dtoa_r+0x5f8>)
 8005480:	f006 020f 	and.w	r2, r6, #15
 8005484:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005490:	f7fb f8ba 	bl	8000608 <__aeabi_dmul>
 8005494:	e9cd 0100 	strd	r0, r1, [sp]
 8005498:	1136      	asrs	r6, r6, #4
 800549a:	2300      	movs	r3, #0
 800549c:	2502      	movs	r5, #2
 800549e:	2e00      	cmp	r6, #0
 80054a0:	d17f      	bne.n	80055a2 <_dtoa_r+0x49a>
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1e1      	bne.n	800546a <_dtoa_r+0x362>
 80054a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 8087 	beq.w	80055bc <_dtoa_r+0x4b4>
 80054ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 80054b2:	2200      	movs	r2, #0
 80054b4:	4b93      	ldr	r3, [pc, #588]	; (8005704 <_dtoa_r+0x5fc>)
 80054b6:	4630      	mov	r0, r6
 80054b8:	4639      	mov	r1, r7
 80054ba:	f7fb fb17 	bl	8000aec <__aeabi_dcmplt>
 80054be:	2800      	cmp	r0, #0
 80054c0:	d07c      	beq.n	80055bc <_dtoa_r+0x4b4>
 80054c2:	f1b9 0f00 	cmp.w	r9, #0
 80054c6:	d079      	beq.n	80055bc <_dtoa_r+0x4b4>
 80054c8:	9b02      	ldr	r3, [sp, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	dd35      	ble.n	800553a <_dtoa_r+0x432>
 80054ce:	f10a 33ff 	add.w	r3, sl, #4294967295
 80054d2:	9308      	str	r3, [sp, #32]
 80054d4:	4639      	mov	r1, r7
 80054d6:	2200      	movs	r2, #0
 80054d8:	4b8b      	ldr	r3, [pc, #556]	; (8005708 <_dtoa_r+0x600>)
 80054da:	4630      	mov	r0, r6
 80054dc:	f7fb f894 	bl	8000608 <__aeabi_dmul>
 80054e0:	e9cd 0100 	strd	r0, r1, [sp]
 80054e4:	9f02      	ldr	r7, [sp, #8]
 80054e6:	3501      	adds	r5, #1
 80054e8:	4628      	mov	r0, r5
 80054ea:	f7fb f823 	bl	8000534 <__aeabi_i2d>
 80054ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054f2:	f7fb f889 	bl	8000608 <__aeabi_dmul>
 80054f6:	2200      	movs	r2, #0
 80054f8:	4b84      	ldr	r3, [pc, #528]	; (800570c <_dtoa_r+0x604>)
 80054fa:	f7fa fecf 	bl	800029c <__adddf3>
 80054fe:	4605      	mov	r5, r0
 8005500:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005504:	2f00      	cmp	r7, #0
 8005506:	d15d      	bne.n	80055c4 <_dtoa_r+0x4bc>
 8005508:	2200      	movs	r2, #0
 800550a:	4b81      	ldr	r3, [pc, #516]	; (8005710 <_dtoa_r+0x608>)
 800550c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005510:	f7fa fec2 	bl	8000298 <__aeabi_dsub>
 8005514:	462a      	mov	r2, r5
 8005516:	4633      	mov	r3, r6
 8005518:	e9cd 0100 	strd	r0, r1, [sp]
 800551c:	f7fb fb04 	bl	8000b28 <__aeabi_dcmpgt>
 8005520:	2800      	cmp	r0, #0
 8005522:	f040 8288 	bne.w	8005a36 <_dtoa_r+0x92e>
 8005526:	462a      	mov	r2, r5
 8005528:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800552c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005530:	f7fb fadc 	bl	8000aec <__aeabi_dcmplt>
 8005534:	2800      	cmp	r0, #0
 8005536:	f040 827c 	bne.w	8005a32 <_dtoa_r+0x92a>
 800553a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800553e:	e9cd 2300 	strd	r2, r3, [sp]
 8005542:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005544:	2b00      	cmp	r3, #0
 8005546:	f2c0 8150 	blt.w	80057ea <_dtoa_r+0x6e2>
 800554a:	f1ba 0f0e 	cmp.w	sl, #14
 800554e:	f300 814c 	bgt.w	80057ea <_dtoa_r+0x6e2>
 8005552:	4b6a      	ldr	r3, [pc, #424]	; (80056fc <_dtoa_r+0x5f4>)
 8005554:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005558:	ed93 7b00 	vldr	d7, [r3]
 800555c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800555e:	2b00      	cmp	r3, #0
 8005560:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005564:	f280 80d8 	bge.w	8005718 <_dtoa_r+0x610>
 8005568:	f1b9 0f00 	cmp.w	r9, #0
 800556c:	f300 80d4 	bgt.w	8005718 <_dtoa_r+0x610>
 8005570:	f040 825e 	bne.w	8005a30 <_dtoa_r+0x928>
 8005574:	2200      	movs	r2, #0
 8005576:	4b66      	ldr	r3, [pc, #408]	; (8005710 <_dtoa_r+0x608>)
 8005578:	ec51 0b17 	vmov	r0, r1, d7
 800557c:	f7fb f844 	bl	8000608 <__aeabi_dmul>
 8005580:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005584:	f7fb fac6 	bl	8000b14 <__aeabi_dcmpge>
 8005588:	464f      	mov	r7, r9
 800558a:	464e      	mov	r6, r9
 800558c:	2800      	cmp	r0, #0
 800558e:	f040 8234 	bne.w	80059fa <_dtoa_r+0x8f2>
 8005592:	2331      	movs	r3, #49	; 0x31
 8005594:	f10b 0501 	add.w	r5, fp, #1
 8005598:	f88b 3000 	strb.w	r3, [fp]
 800559c:	f10a 0a01 	add.w	sl, sl, #1
 80055a0:	e22f      	b.n	8005a02 <_dtoa_r+0x8fa>
 80055a2:	07f2      	lsls	r2, r6, #31
 80055a4:	d505      	bpl.n	80055b2 <_dtoa_r+0x4aa>
 80055a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055aa:	f7fb f82d 	bl	8000608 <__aeabi_dmul>
 80055ae:	3501      	adds	r5, #1
 80055b0:	2301      	movs	r3, #1
 80055b2:	1076      	asrs	r6, r6, #1
 80055b4:	3708      	adds	r7, #8
 80055b6:	e772      	b.n	800549e <_dtoa_r+0x396>
 80055b8:	2502      	movs	r5, #2
 80055ba:	e774      	b.n	80054a6 <_dtoa_r+0x39e>
 80055bc:	f8cd a020 	str.w	sl, [sp, #32]
 80055c0:	464f      	mov	r7, r9
 80055c2:	e791      	b.n	80054e8 <_dtoa_r+0x3e0>
 80055c4:	4b4d      	ldr	r3, [pc, #308]	; (80056fc <_dtoa_r+0x5f4>)
 80055c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80055ca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80055ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d047      	beq.n	8005664 <_dtoa_r+0x55c>
 80055d4:	4602      	mov	r2, r0
 80055d6:	460b      	mov	r3, r1
 80055d8:	2000      	movs	r0, #0
 80055da:	494e      	ldr	r1, [pc, #312]	; (8005714 <_dtoa_r+0x60c>)
 80055dc:	f7fb f93e 	bl	800085c <__aeabi_ddiv>
 80055e0:	462a      	mov	r2, r5
 80055e2:	4633      	mov	r3, r6
 80055e4:	f7fa fe58 	bl	8000298 <__aeabi_dsub>
 80055e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80055ec:	465d      	mov	r5, fp
 80055ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055f2:	f7fb fab9 	bl	8000b68 <__aeabi_d2iz>
 80055f6:	4606      	mov	r6, r0
 80055f8:	f7fa ff9c 	bl	8000534 <__aeabi_i2d>
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005604:	f7fa fe48 	bl	8000298 <__aeabi_dsub>
 8005608:	3630      	adds	r6, #48	; 0x30
 800560a:	f805 6b01 	strb.w	r6, [r5], #1
 800560e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005612:	e9cd 0100 	strd	r0, r1, [sp]
 8005616:	f7fb fa69 	bl	8000aec <__aeabi_dcmplt>
 800561a:	2800      	cmp	r0, #0
 800561c:	d163      	bne.n	80056e6 <_dtoa_r+0x5de>
 800561e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005622:	2000      	movs	r0, #0
 8005624:	4937      	ldr	r1, [pc, #220]	; (8005704 <_dtoa_r+0x5fc>)
 8005626:	f7fa fe37 	bl	8000298 <__aeabi_dsub>
 800562a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800562e:	f7fb fa5d 	bl	8000aec <__aeabi_dcmplt>
 8005632:	2800      	cmp	r0, #0
 8005634:	f040 80b7 	bne.w	80057a6 <_dtoa_r+0x69e>
 8005638:	eba5 030b 	sub.w	r3, r5, fp
 800563c:	429f      	cmp	r7, r3
 800563e:	f77f af7c 	ble.w	800553a <_dtoa_r+0x432>
 8005642:	2200      	movs	r2, #0
 8005644:	4b30      	ldr	r3, [pc, #192]	; (8005708 <_dtoa_r+0x600>)
 8005646:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800564a:	f7fa ffdd 	bl	8000608 <__aeabi_dmul>
 800564e:	2200      	movs	r2, #0
 8005650:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005654:	4b2c      	ldr	r3, [pc, #176]	; (8005708 <_dtoa_r+0x600>)
 8005656:	e9dd 0100 	ldrd	r0, r1, [sp]
 800565a:	f7fa ffd5 	bl	8000608 <__aeabi_dmul>
 800565e:	e9cd 0100 	strd	r0, r1, [sp]
 8005662:	e7c4      	b.n	80055ee <_dtoa_r+0x4e6>
 8005664:	462a      	mov	r2, r5
 8005666:	4633      	mov	r3, r6
 8005668:	f7fa ffce 	bl	8000608 <__aeabi_dmul>
 800566c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005670:	eb0b 0507 	add.w	r5, fp, r7
 8005674:	465e      	mov	r6, fp
 8005676:	e9dd 0100 	ldrd	r0, r1, [sp]
 800567a:	f7fb fa75 	bl	8000b68 <__aeabi_d2iz>
 800567e:	4607      	mov	r7, r0
 8005680:	f7fa ff58 	bl	8000534 <__aeabi_i2d>
 8005684:	3730      	adds	r7, #48	; 0x30
 8005686:	4602      	mov	r2, r0
 8005688:	460b      	mov	r3, r1
 800568a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800568e:	f7fa fe03 	bl	8000298 <__aeabi_dsub>
 8005692:	f806 7b01 	strb.w	r7, [r6], #1
 8005696:	42ae      	cmp	r6, r5
 8005698:	e9cd 0100 	strd	r0, r1, [sp]
 800569c:	f04f 0200 	mov.w	r2, #0
 80056a0:	d126      	bne.n	80056f0 <_dtoa_r+0x5e8>
 80056a2:	4b1c      	ldr	r3, [pc, #112]	; (8005714 <_dtoa_r+0x60c>)
 80056a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056a8:	f7fa fdf8 	bl	800029c <__adddf3>
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056b4:	f7fb fa38 	bl	8000b28 <__aeabi_dcmpgt>
 80056b8:	2800      	cmp	r0, #0
 80056ba:	d174      	bne.n	80057a6 <_dtoa_r+0x69e>
 80056bc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80056c0:	2000      	movs	r0, #0
 80056c2:	4914      	ldr	r1, [pc, #80]	; (8005714 <_dtoa_r+0x60c>)
 80056c4:	f7fa fde8 	bl	8000298 <__aeabi_dsub>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056d0:	f7fb fa0c 	bl	8000aec <__aeabi_dcmplt>
 80056d4:	2800      	cmp	r0, #0
 80056d6:	f43f af30 	beq.w	800553a <_dtoa_r+0x432>
 80056da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80056de:	2b30      	cmp	r3, #48	; 0x30
 80056e0:	f105 32ff 	add.w	r2, r5, #4294967295
 80056e4:	d002      	beq.n	80056ec <_dtoa_r+0x5e4>
 80056e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80056ea:	e04a      	b.n	8005782 <_dtoa_r+0x67a>
 80056ec:	4615      	mov	r5, r2
 80056ee:	e7f4      	b.n	80056da <_dtoa_r+0x5d2>
 80056f0:	4b05      	ldr	r3, [pc, #20]	; (8005708 <_dtoa_r+0x600>)
 80056f2:	f7fa ff89 	bl	8000608 <__aeabi_dmul>
 80056f6:	e9cd 0100 	strd	r0, r1, [sp]
 80056fa:	e7bc      	b.n	8005676 <_dtoa_r+0x56e>
 80056fc:	08007208 	.word	0x08007208
 8005700:	080071e0 	.word	0x080071e0
 8005704:	3ff00000 	.word	0x3ff00000
 8005708:	40240000 	.word	0x40240000
 800570c:	401c0000 	.word	0x401c0000
 8005710:	40140000 	.word	0x40140000
 8005714:	3fe00000 	.word	0x3fe00000
 8005718:	e9dd 6700 	ldrd	r6, r7, [sp]
 800571c:	465d      	mov	r5, fp
 800571e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005722:	4630      	mov	r0, r6
 8005724:	4639      	mov	r1, r7
 8005726:	f7fb f899 	bl	800085c <__aeabi_ddiv>
 800572a:	f7fb fa1d 	bl	8000b68 <__aeabi_d2iz>
 800572e:	4680      	mov	r8, r0
 8005730:	f7fa ff00 	bl	8000534 <__aeabi_i2d>
 8005734:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005738:	f7fa ff66 	bl	8000608 <__aeabi_dmul>
 800573c:	4602      	mov	r2, r0
 800573e:	460b      	mov	r3, r1
 8005740:	4630      	mov	r0, r6
 8005742:	4639      	mov	r1, r7
 8005744:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005748:	f7fa fda6 	bl	8000298 <__aeabi_dsub>
 800574c:	f805 6b01 	strb.w	r6, [r5], #1
 8005750:	eba5 060b 	sub.w	r6, r5, fp
 8005754:	45b1      	cmp	r9, r6
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	d139      	bne.n	80057d0 <_dtoa_r+0x6c8>
 800575c:	f7fa fd9e 	bl	800029c <__adddf3>
 8005760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005764:	4606      	mov	r6, r0
 8005766:	460f      	mov	r7, r1
 8005768:	f7fb f9de 	bl	8000b28 <__aeabi_dcmpgt>
 800576c:	b9c8      	cbnz	r0, 80057a2 <_dtoa_r+0x69a>
 800576e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005772:	4630      	mov	r0, r6
 8005774:	4639      	mov	r1, r7
 8005776:	f7fb f9af 	bl	8000ad8 <__aeabi_dcmpeq>
 800577a:	b110      	cbz	r0, 8005782 <_dtoa_r+0x67a>
 800577c:	f018 0f01 	tst.w	r8, #1
 8005780:	d10f      	bne.n	80057a2 <_dtoa_r+0x69a>
 8005782:	9904      	ldr	r1, [sp, #16]
 8005784:	4620      	mov	r0, r4
 8005786:	f000 facc 	bl	8005d22 <_Bfree>
 800578a:	2300      	movs	r3, #0
 800578c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800578e:	702b      	strb	r3, [r5, #0]
 8005790:	f10a 0301 	add.w	r3, sl, #1
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 8241 	beq.w	8005c20 <_dtoa_r+0xb18>
 800579e:	601d      	str	r5, [r3, #0]
 80057a0:	e23e      	b.n	8005c20 <_dtoa_r+0xb18>
 80057a2:	f8cd a020 	str.w	sl, [sp, #32]
 80057a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80057aa:	2a39      	cmp	r2, #57	; 0x39
 80057ac:	f105 33ff 	add.w	r3, r5, #4294967295
 80057b0:	d108      	bne.n	80057c4 <_dtoa_r+0x6bc>
 80057b2:	459b      	cmp	fp, r3
 80057b4:	d10a      	bne.n	80057cc <_dtoa_r+0x6c4>
 80057b6:	9b08      	ldr	r3, [sp, #32]
 80057b8:	3301      	adds	r3, #1
 80057ba:	9308      	str	r3, [sp, #32]
 80057bc:	2330      	movs	r3, #48	; 0x30
 80057be:	f88b 3000 	strb.w	r3, [fp]
 80057c2:	465b      	mov	r3, fp
 80057c4:	781a      	ldrb	r2, [r3, #0]
 80057c6:	3201      	adds	r2, #1
 80057c8:	701a      	strb	r2, [r3, #0]
 80057ca:	e78c      	b.n	80056e6 <_dtoa_r+0x5de>
 80057cc:	461d      	mov	r5, r3
 80057ce:	e7ea      	b.n	80057a6 <_dtoa_r+0x69e>
 80057d0:	2200      	movs	r2, #0
 80057d2:	4b9b      	ldr	r3, [pc, #620]	; (8005a40 <_dtoa_r+0x938>)
 80057d4:	f7fa ff18 	bl	8000608 <__aeabi_dmul>
 80057d8:	2200      	movs	r2, #0
 80057da:	2300      	movs	r3, #0
 80057dc:	4606      	mov	r6, r0
 80057de:	460f      	mov	r7, r1
 80057e0:	f7fb f97a 	bl	8000ad8 <__aeabi_dcmpeq>
 80057e4:	2800      	cmp	r0, #0
 80057e6:	d09a      	beq.n	800571e <_dtoa_r+0x616>
 80057e8:	e7cb      	b.n	8005782 <_dtoa_r+0x67a>
 80057ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057ec:	2a00      	cmp	r2, #0
 80057ee:	f000 808b 	beq.w	8005908 <_dtoa_r+0x800>
 80057f2:	9a06      	ldr	r2, [sp, #24]
 80057f4:	2a01      	cmp	r2, #1
 80057f6:	dc6e      	bgt.n	80058d6 <_dtoa_r+0x7ce>
 80057f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80057fa:	2a00      	cmp	r2, #0
 80057fc:	d067      	beq.n	80058ce <_dtoa_r+0x7c6>
 80057fe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005802:	9f07      	ldr	r7, [sp, #28]
 8005804:	9d05      	ldr	r5, [sp, #20]
 8005806:	9a05      	ldr	r2, [sp, #20]
 8005808:	2101      	movs	r1, #1
 800580a:	441a      	add	r2, r3
 800580c:	4620      	mov	r0, r4
 800580e:	9205      	str	r2, [sp, #20]
 8005810:	4498      	add	r8, r3
 8005812:	f000 fb26 	bl	8005e62 <__i2b>
 8005816:	4606      	mov	r6, r0
 8005818:	2d00      	cmp	r5, #0
 800581a:	dd0c      	ble.n	8005836 <_dtoa_r+0x72e>
 800581c:	f1b8 0f00 	cmp.w	r8, #0
 8005820:	dd09      	ble.n	8005836 <_dtoa_r+0x72e>
 8005822:	4545      	cmp	r5, r8
 8005824:	9a05      	ldr	r2, [sp, #20]
 8005826:	462b      	mov	r3, r5
 8005828:	bfa8      	it	ge
 800582a:	4643      	movge	r3, r8
 800582c:	1ad2      	subs	r2, r2, r3
 800582e:	9205      	str	r2, [sp, #20]
 8005830:	1aed      	subs	r5, r5, r3
 8005832:	eba8 0803 	sub.w	r8, r8, r3
 8005836:	9b07      	ldr	r3, [sp, #28]
 8005838:	b1eb      	cbz	r3, 8005876 <_dtoa_r+0x76e>
 800583a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800583c:	2b00      	cmp	r3, #0
 800583e:	d067      	beq.n	8005910 <_dtoa_r+0x808>
 8005840:	b18f      	cbz	r7, 8005866 <_dtoa_r+0x75e>
 8005842:	4631      	mov	r1, r6
 8005844:	463a      	mov	r2, r7
 8005846:	4620      	mov	r0, r4
 8005848:	f000 fbaa 	bl	8005fa0 <__pow5mult>
 800584c:	9a04      	ldr	r2, [sp, #16]
 800584e:	4601      	mov	r1, r0
 8005850:	4606      	mov	r6, r0
 8005852:	4620      	mov	r0, r4
 8005854:	f000 fb0e 	bl	8005e74 <__multiply>
 8005858:	9904      	ldr	r1, [sp, #16]
 800585a:	9008      	str	r0, [sp, #32]
 800585c:	4620      	mov	r0, r4
 800585e:	f000 fa60 	bl	8005d22 <_Bfree>
 8005862:	9b08      	ldr	r3, [sp, #32]
 8005864:	9304      	str	r3, [sp, #16]
 8005866:	9b07      	ldr	r3, [sp, #28]
 8005868:	1bda      	subs	r2, r3, r7
 800586a:	d004      	beq.n	8005876 <_dtoa_r+0x76e>
 800586c:	9904      	ldr	r1, [sp, #16]
 800586e:	4620      	mov	r0, r4
 8005870:	f000 fb96 	bl	8005fa0 <__pow5mult>
 8005874:	9004      	str	r0, [sp, #16]
 8005876:	2101      	movs	r1, #1
 8005878:	4620      	mov	r0, r4
 800587a:	f000 faf2 	bl	8005e62 <__i2b>
 800587e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005880:	4607      	mov	r7, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 81d0 	beq.w	8005c28 <_dtoa_r+0xb20>
 8005888:	461a      	mov	r2, r3
 800588a:	4601      	mov	r1, r0
 800588c:	4620      	mov	r0, r4
 800588e:	f000 fb87 	bl	8005fa0 <__pow5mult>
 8005892:	9b06      	ldr	r3, [sp, #24]
 8005894:	2b01      	cmp	r3, #1
 8005896:	4607      	mov	r7, r0
 8005898:	dc40      	bgt.n	800591c <_dtoa_r+0x814>
 800589a:	9b00      	ldr	r3, [sp, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d139      	bne.n	8005914 <_dtoa_r+0x80c>
 80058a0:	9b01      	ldr	r3, [sp, #4]
 80058a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d136      	bne.n	8005918 <_dtoa_r+0x810>
 80058aa:	9b01      	ldr	r3, [sp, #4]
 80058ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058b0:	0d1b      	lsrs	r3, r3, #20
 80058b2:	051b      	lsls	r3, r3, #20
 80058b4:	b12b      	cbz	r3, 80058c2 <_dtoa_r+0x7ba>
 80058b6:	9b05      	ldr	r3, [sp, #20]
 80058b8:	3301      	adds	r3, #1
 80058ba:	9305      	str	r3, [sp, #20]
 80058bc:	f108 0801 	add.w	r8, r8, #1
 80058c0:	2301      	movs	r3, #1
 80058c2:	9307      	str	r3, [sp, #28]
 80058c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d12a      	bne.n	8005920 <_dtoa_r+0x818>
 80058ca:	2001      	movs	r0, #1
 80058cc:	e030      	b.n	8005930 <_dtoa_r+0x828>
 80058ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80058d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80058d4:	e795      	b.n	8005802 <_dtoa_r+0x6fa>
 80058d6:	9b07      	ldr	r3, [sp, #28]
 80058d8:	f109 37ff 	add.w	r7, r9, #4294967295
 80058dc:	42bb      	cmp	r3, r7
 80058de:	bfbf      	itttt	lt
 80058e0:	9b07      	ldrlt	r3, [sp, #28]
 80058e2:	9707      	strlt	r7, [sp, #28]
 80058e4:	1afa      	sublt	r2, r7, r3
 80058e6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80058e8:	bfbb      	ittet	lt
 80058ea:	189b      	addlt	r3, r3, r2
 80058ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 80058ee:	1bdf      	subge	r7, r3, r7
 80058f0:	2700      	movlt	r7, #0
 80058f2:	f1b9 0f00 	cmp.w	r9, #0
 80058f6:	bfb5      	itete	lt
 80058f8:	9b05      	ldrlt	r3, [sp, #20]
 80058fa:	9d05      	ldrge	r5, [sp, #20]
 80058fc:	eba3 0509 	sublt.w	r5, r3, r9
 8005900:	464b      	movge	r3, r9
 8005902:	bfb8      	it	lt
 8005904:	2300      	movlt	r3, #0
 8005906:	e77e      	b.n	8005806 <_dtoa_r+0x6fe>
 8005908:	9f07      	ldr	r7, [sp, #28]
 800590a:	9d05      	ldr	r5, [sp, #20]
 800590c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800590e:	e783      	b.n	8005818 <_dtoa_r+0x710>
 8005910:	9a07      	ldr	r2, [sp, #28]
 8005912:	e7ab      	b.n	800586c <_dtoa_r+0x764>
 8005914:	2300      	movs	r3, #0
 8005916:	e7d4      	b.n	80058c2 <_dtoa_r+0x7ba>
 8005918:	9b00      	ldr	r3, [sp, #0]
 800591a:	e7d2      	b.n	80058c2 <_dtoa_r+0x7ba>
 800591c:	2300      	movs	r3, #0
 800591e:	9307      	str	r3, [sp, #28]
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005926:	6918      	ldr	r0, [r3, #16]
 8005928:	f000 fa4d 	bl	8005dc6 <__hi0bits>
 800592c:	f1c0 0020 	rsb	r0, r0, #32
 8005930:	4440      	add	r0, r8
 8005932:	f010 001f 	ands.w	r0, r0, #31
 8005936:	d047      	beq.n	80059c8 <_dtoa_r+0x8c0>
 8005938:	f1c0 0320 	rsb	r3, r0, #32
 800593c:	2b04      	cmp	r3, #4
 800593e:	dd3b      	ble.n	80059b8 <_dtoa_r+0x8b0>
 8005940:	9b05      	ldr	r3, [sp, #20]
 8005942:	f1c0 001c 	rsb	r0, r0, #28
 8005946:	4403      	add	r3, r0
 8005948:	9305      	str	r3, [sp, #20]
 800594a:	4405      	add	r5, r0
 800594c:	4480      	add	r8, r0
 800594e:	9b05      	ldr	r3, [sp, #20]
 8005950:	2b00      	cmp	r3, #0
 8005952:	dd05      	ble.n	8005960 <_dtoa_r+0x858>
 8005954:	461a      	mov	r2, r3
 8005956:	9904      	ldr	r1, [sp, #16]
 8005958:	4620      	mov	r0, r4
 800595a:	f000 fb6f 	bl	800603c <__lshift>
 800595e:	9004      	str	r0, [sp, #16]
 8005960:	f1b8 0f00 	cmp.w	r8, #0
 8005964:	dd05      	ble.n	8005972 <_dtoa_r+0x86a>
 8005966:	4639      	mov	r1, r7
 8005968:	4642      	mov	r2, r8
 800596a:	4620      	mov	r0, r4
 800596c:	f000 fb66 	bl	800603c <__lshift>
 8005970:	4607      	mov	r7, r0
 8005972:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005974:	b353      	cbz	r3, 80059cc <_dtoa_r+0x8c4>
 8005976:	4639      	mov	r1, r7
 8005978:	9804      	ldr	r0, [sp, #16]
 800597a:	f000 fbb3 	bl	80060e4 <__mcmp>
 800597e:	2800      	cmp	r0, #0
 8005980:	da24      	bge.n	80059cc <_dtoa_r+0x8c4>
 8005982:	2300      	movs	r3, #0
 8005984:	220a      	movs	r2, #10
 8005986:	9904      	ldr	r1, [sp, #16]
 8005988:	4620      	mov	r0, r4
 800598a:	f000 f9e1 	bl	8005d50 <__multadd>
 800598e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005990:	9004      	str	r0, [sp, #16]
 8005992:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005996:	2b00      	cmp	r3, #0
 8005998:	f000 814d 	beq.w	8005c36 <_dtoa_r+0xb2e>
 800599c:	2300      	movs	r3, #0
 800599e:	4631      	mov	r1, r6
 80059a0:	220a      	movs	r2, #10
 80059a2:	4620      	mov	r0, r4
 80059a4:	f000 f9d4 	bl	8005d50 <__multadd>
 80059a8:	9b02      	ldr	r3, [sp, #8]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	4606      	mov	r6, r0
 80059ae:	dc4f      	bgt.n	8005a50 <_dtoa_r+0x948>
 80059b0:	9b06      	ldr	r3, [sp, #24]
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	dd4c      	ble.n	8005a50 <_dtoa_r+0x948>
 80059b6:	e011      	b.n	80059dc <_dtoa_r+0x8d4>
 80059b8:	d0c9      	beq.n	800594e <_dtoa_r+0x846>
 80059ba:	9a05      	ldr	r2, [sp, #20]
 80059bc:	331c      	adds	r3, #28
 80059be:	441a      	add	r2, r3
 80059c0:	9205      	str	r2, [sp, #20]
 80059c2:	441d      	add	r5, r3
 80059c4:	4498      	add	r8, r3
 80059c6:	e7c2      	b.n	800594e <_dtoa_r+0x846>
 80059c8:	4603      	mov	r3, r0
 80059ca:	e7f6      	b.n	80059ba <_dtoa_r+0x8b2>
 80059cc:	f1b9 0f00 	cmp.w	r9, #0
 80059d0:	dc38      	bgt.n	8005a44 <_dtoa_r+0x93c>
 80059d2:	9b06      	ldr	r3, [sp, #24]
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	dd35      	ble.n	8005a44 <_dtoa_r+0x93c>
 80059d8:	f8cd 9008 	str.w	r9, [sp, #8]
 80059dc:	9b02      	ldr	r3, [sp, #8]
 80059de:	b963      	cbnz	r3, 80059fa <_dtoa_r+0x8f2>
 80059e0:	4639      	mov	r1, r7
 80059e2:	2205      	movs	r2, #5
 80059e4:	4620      	mov	r0, r4
 80059e6:	f000 f9b3 	bl	8005d50 <__multadd>
 80059ea:	4601      	mov	r1, r0
 80059ec:	4607      	mov	r7, r0
 80059ee:	9804      	ldr	r0, [sp, #16]
 80059f0:	f000 fb78 	bl	80060e4 <__mcmp>
 80059f4:	2800      	cmp	r0, #0
 80059f6:	f73f adcc 	bgt.w	8005592 <_dtoa_r+0x48a>
 80059fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059fc:	465d      	mov	r5, fp
 80059fe:	ea6f 0a03 	mvn.w	sl, r3
 8005a02:	f04f 0900 	mov.w	r9, #0
 8005a06:	4639      	mov	r1, r7
 8005a08:	4620      	mov	r0, r4
 8005a0a:	f000 f98a 	bl	8005d22 <_Bfree>
 8005a0e:	2e00      	cmp	r6, #0
 8005a10:	f43f aeb7 	beq.w	8005782 <_dtoa_r+0x67a>
 8005a14:	f1b9 0f00 	cmp.w	r9, #0
 8005a18:	d005      	beq.n	8005a26 <_dtoa_r+0x91e>
 8005a1a:	45b1      	cmp	r9, r6
 8005a1c:	d003      	beq.n	8005a26 <_dtoa_r+0x91e>
 8005a1e:	4649      	mov	r1, r9
 8005a20:	4620      	mov	r0, r4
 8005a22:	f000 f97e 	bl	8005d22 <_Bfree>
 8005a26:	4631      	mov	r1, r6
 8005a28:	4620      	mov	r0, r4
 8005a2a:	f000 f97a 	bl	8005d22 <_Bfree>
 8005a2e:	e6a8      	b.n	8005782 <_dtoa_r+0x67a>
 8005a30:	2700      	movs	r7, #0
 8005a32:	463e      	mov	r6, r7
 8005a34:	e7e1      	b.n	80059fa <_dtoa_r+0x8f2>
 8005a36:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005a3a:	463e      	mov	r6, r7
 8005a3c:	e5a9      	b.n	8005592 <_dtoa_r+0x48a>
 8005a3e:	bf00      	nop
 8005a40:	40240000 	.word	0x40240000
 8005a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a46:	f8cd 9008 	str.w	r9, [sp, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f000 80fa 	beq.w	8005c44 <_dtoa_r+0xb3c>
 8005a50:	2d00      	cmp	r5, #0
 8005a52:	dd05      	ble.n	8005a60 <_dtoa_r+0x958>
 8005a54:	4631      	mov	r1, r6
 8005a56:	462a      	mov	r2, r5
 8005a58:	4620      	mov	r0, r4
 8005a5a:	f000 faef 	bl	800603c <__lshift>
 8005a5e:	4606      	mov	r6, r0
 8005a60:	9b07      	ldr	r3, [sp, #28]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d04c      	beq.n	8005b00 <_dtoa_r+0x9f8>
 8005a66:	6871      	ldr	r1, [r6, #4]
 8005a68:	4620      	mov	r0, r4
 8005a6a:	f000 f926 	bl	8005cba <_Balloc>
 8005a6e:	6932      	ldr	r2, [r6, #16]
 8005a70:	3202      	adds	r2, #2
 8005a72:	4605      	mov	r5, r0
 8005a74:	0092      	lsls	r2, r2, #2
 8005a76:	f106 010c 	add.w	r1, r6, #12
 8005a7a:	300c      	adds	r0, #12
 8005a7c:	f000 f912 	bl	8005ca4 <memcpy>
 8005a80:	2201      	movs	r2, #1
 8005a82:	4629      	mov	r1, r5
 8005a84:	4620      	mov	r0, r4
 8005a86:	f000 fad9 	bl	800603c <__lshift>
 8005a8a:	9b00      	ldr	r3, [sp, #0]
 8005a8c:	f8cd b014 	str.w	fp, [sp, #20]
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	46b1      	mov	r9, r6
 8005a96:	9307      	str	r3, [sp, #28]
 8005a98:	4606      	mov	r6, r0
 8005a9a:	4639      	mov	r1, r7
 8005a9c:	9804      	ldr	r0, [sp, #16]
 8005a9e:	f7ff faa6 	bl	8004fee <quorem>
 8005aa2:	4649      	mov	r1, r9
 8005aa4:	4605      	mov	r5, r0
 8005aa6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005aaa:	9804      	ldr	r0, [sp, #16]
 8005aac:	f000 fb1a 	bl	80060e4 <__mcmp>
 8005ab0:	4632      	mov	r2, r6
 8005ab2:	9000      	str	r0, [sp, #0]
 8005ab4:	4639      	mov	r1, r7
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	f000 fb2e 	bl	8006118 <__mdiff>
 8005abc:	68c3      	ldr	r3, [r0, #12]
 8005abe:	4602      	mov	r2, r0
 8005ac0:	bb03      	cbnz	r3, 8005b04 <_dtoa_r+0x9fc>
 8005ac2:	4601      	mov	r1, r0
 8005ac4:	9008      	str	r0, [sp, #32]
 8005ac6:	9804      	ldr	r0, [sp, #16]
 8005ac8:	f000 fb0c 	bl	80060e4 <__mcmp>
 8005acc:	9a08      	ldr	r2, [sp, #32]
 8005ace:	4603      	mov	r3, r0
 8005ad0:	4611      	mov	r1, r2
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	9308      	str	r3, [sp, #32]
 8005ad6:	f000 f924 	bl	8005d22 <_Bfree>
 8005ada:	9b08      	ldr	r3, [sp, #32]
 8005adc:	b9a3      	cbnz	r3, 8005b08 <_dtoa_r+0xa00>
 8005ade:	9a06      	ldr	r2, [sp, #24]
 8005ae0:	b992      	cbnz	r2, 8005b08 <_dtoa_r+0xa00>
 8005ae2:	9a07      	ldr	r2, [sp, #28]
 8005ae4:	b982      	cbnz	r2, 8005b08 <_dtoa_r+0xa00>
 8005ae6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005aea:	d029      	beq.n	8005b40 <_dtoa_r+0xa38>
 8005aec:	9b00      	ldr	r3, [sp, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	dd01      	ble.n	8005af6 <_dtoa_r+0x9ee>
 8005af2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005af6:	9b05      	ldr	r3, [sp, #20]
 8005af8:	1c5d      	adds	r5, r3, #1
 8005afa:	f883 8000 	strb.w	r8, [r3]
 8005afe:	e782      	b.n	8005a06 <_dtoa_r+0x8fe>
 8005b00:	4630      	mov	r0, r6
 8005b02:	e7c2      	b.n	8005a8a <_dtoa_r+0x982>
 8005b04:	2301      	movs	r3, #1
 8005b06:	e7e3      	b.n	8005ad0 <_dtoa_r+0x9c8>
 8005b08:	9a00      	ldr	r2, [sp, #0]
 8005b0a:	2a00      	cmp	r2, #0
 8005b0c:	db04      	blt.n	8005b18 <_dtoa_r+0xa10>
 8005b0e:	d125      	bne.n	8005b5c <_dtoa_r+0xa54>
 8005b10:	9a06      	ldr	r2, [sp, #24]
 8005b12:	bb1a      	cbnz	r2, 8005b5c <_dtoa_r+0xa54>
 8005b14:	9a07      	ldr	r2, [sp, #28]
 8005b16:	bb0a      	cbnz	r2, 8005b5c <_dtoa_r+0xa54>
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	ddec      	ble.n	8005af6 <_dtoa_r+0x9ee>
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	9904      	ldr	r1, [sp, #16]
 8005b20:	4620      	mov	r0, r4
 8005b22:	f000 fa8b 	bl	800603c <__lshift>
 8005b26:	4639      	mov	r1, r7
 8005b28:	9004      	str	r0, [sp, #16]
 8005b2a:	f000 fadb 	bl	80060e4 <__mcmp>
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	dc03      	bgt.n	8005b3a <_dtoa_r+0xa32>
 8005b32:	d1e0      	bne.n	8005af6 <_dtoa_r+0x9ee>
 8005b34:	f018 0f01 	tst.w	r8, #1
 8005b38:	d0dd      	beq.n	8005af6 <_dtoa_r+0x9ee>
 8005b3a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005b3e:	d1d8      	bne.n	8005af2 <_dtoa_r+0x9ea>
 8005b40:	9b05      	ldr	r3, [sp, #20]
 8005b42:	9a05      	ldr	r2, [sp, #20]
 8005b44:	1c5d      	adds	r5, r3, #1
 8005b46:	2339      	movs	r3, #57	; 0x39
 8005b48:	7013      	strb	r3, [r2, #0]
 8005b4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005b4e:	2b39      	cmp	r3, #57	; 0x39
 8005b50:	f105 32ff 	add.w	r2, r5, #4294967295
 8005b54:	d04f      	beq.n	8005bf6 <_dtoa_r+0xaee>
 8005b56:	3301      	adds	r3, #1
 8005b58:	7013      	strb	r3, [r2, #0]
 8005b5a:	e754      	b.n	8005a06 <_dtoa_r+0x8fe>
 8005b5c:	9a05      	ldr	r2, [sp, #20]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f102 0501 	add.w	r5, r2, #1
 8005b64:	dd06      	ble.n	8005b74 <_dtoa_r+0xa6c>
 8005b66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005b6a:	d0e9      	beq.n	8005b40 <_dtoa_r+0xa38>
 8005b6c:	f108 0801 	add.w	r8, r8, #1
 8005b70:	9b05      	ldr	r3, [sp, #20]
 8005b72:	e7c2      	b.n	8005afa <_dtoa_r+0x9f2>
 8005b74:	9a02      	ldr	r2, [sp, #8]
 8005b76:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005b7a:	eba5 030b 	sub.w	r3, r5, fp
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d021      	beq.n	8005bc6 <_dtoa_r+0xabe>
 8005b82:	2300      	movs	r3, #0
 8005b84:	220a      	movs	r2, #10
 8005b86:	9904      	ldr	r1, [sp, #16]
 8005b88:	4620      	mov	r0, r4
 8005b8a:	f000 f8e1 	bl	8005d50 <__multadd>
 8005b8e:	45b1      	cmp	r9, r6
 8005b90:	9004      	str	r0, [sp, #16]
 8005b92:	f04f 0300 	mov.w	r3, #0
 8005b96:	f04f 020a 	mov.w	r2, #10
 8005b9a:	4649      	mov	r1, r9
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	d105      	bne.n	8005bac <_dtoa_r+0xaa4>
 8005ba0:	f000 f8d6 	bl	8005d50 <__multadd>
 8005ba4:	4681      	mov	r9, r0
 8005ba6:	4606      	mov	r6, r0
 8005ba8:	9505      	str	r5, [sp, #20]
 8005baa:	e776      	b.n	8005a9a <_dtoa_r+0x992>
 8005bac:	f000 f8d0 	bl	8005d50 <__multadd>
 8005bb0:	4631      	mov	r1, r6
 8005bb2:	4681      	mov	r9, r0
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	220a      	movs	r2, #10
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f000 f8c9 	bl	8005d50 <__multadd>
 8005bbe:	4606      	mov	r6, r0
 8005bc0:	e7f2      	b.n	8005ba8 <_dtoa_r+0xaa0>
 8005bc2:	f04f 0900 	mov.w	r9, #0
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	9904      	ldr	r1, [sp, #16]
 8005bca:	4620      	mov	r0, r4
 8005bcc:	f000 fa36 	bl	800603c <__lshift>
 8005bd0:	4639      	mov	r1, r7
 8005bd2:	9004      	str	r0, [sp, #16]
 8005bd4:	f000 fa86 	bl	80060e4 <__mcmp>
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	dcb6      	bgt.n	8005b4a <_dtoa_r+0xa42>
 8005bdc:	d102      	bne.n	8005be4 <_dtoa_r+0xadc>
 8005bde:	f018 0f01 	tst.w	r8, #1
 8005be2:	d1b2      	bne.n	8005b4a <_dtoa_r+0xa42>
 8005be4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005be8:	2b30      	cmp	r3, #48	; 0x30
 8005bea:	f105 32ff 	add.w	r2, r5, #4294967295
 8005bee:	f47f af0a 	bne.w	8005a06 <_dtoa_r+0x8fe>
 8005bf2:	4615      	mov	r5, r2
 8005bf4:	e7f6      	b.n	8005be4 <_dtoa_r+0xadc>
 8005bf6:	4593      	cmp	fp, r2
 8005bf8:	d105      	bne.n	8005c06 <_dtoa_r+0xafe>
 8005bfa:	2331      	movs	r3, #49	; 0x31
 8005bfc:	f10a 0a01 	add.w	sl, sl, #1
 8005c00:	f88b 3000 	strb.w	r3, [fp]
 8005c04:	e6ff      	b.n	8005a06 <_dtoa_r+0x8fe>
 8005c06:	4615      	mov	r5, r2
 8005c08:	e79f      	b.n	8005b4a <_dtoa_r+0xa42>
 8005c0a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005c70 <_dtoa_r+0xb68>
 8005c0e:	e007      	b.n	8005c20 <_dtoa_r+0xb18>
 8005c10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c12:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005c74 <_dtoa_r+0xb6c>
 8005c16:	b11b      	cbz	r3, 8005c20 <_dtoa_r+0xb18>
 8005c18:	f10b 0308 	add.w	r3, fp, #8
 8005c1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005c1e:	6013      	str	r3, [r2, #0]
 8005c20:	4658      	mov	r0, fp
 8005c22:	b017      	add	sp, #92	; 0x5c
 8005c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c28:	9b06      	ldr	r3, [sp, #24]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	f77f ae35 	ble.w	800589a <_dtoa_r+0x792>
 8005c30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c32:	9307      	str	r3, [sp, #28]
 8005c34:	e649      	b.n	80058ca <_dtoa_r+0x7c2>
 8005c36:	9b02      	ldr	r3, [sp, #8]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	dc03      	bgt.n	8005c44 <_dtoa_r+0xb3c>
 8005c3c:	9b06      	ldr	r3, [sp, #24]
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	f73f aecc 	bgt.w	80059dc <_dtoa_r+0x8d4>
 8005c44:	465d      	mov	r5, fp
 8005c46:	4639      	mov	r1, r7
 8005c48:	9804      	ldr	r0, [sp, #16]
 8005c4a:	f7ff f9d0 	bl	8004fee <quorem>
 8005c4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005c52:	f805 8b01 	strb.w	r8, [r5], #1
 8005c56:	9a02      	ldr	r2, [sp, #8]
 8005c58:	eba5 030b 	sub.w	r3, r5, fp
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	ddb0      	ble.n	8005bc2 <_dtoa_r+0xaba>
 8005c60:	2300      	movs	r3, #0
 8005c62:	220a      	movs	r2, #10
 8005c64:	9904      	ldr	r1, [sp, #16]
 8005c66:	4620      	mov	r0, r4
 8005c68:	f000 f872 	bl	8005d50 <__multadd>
 8005c6c:	9004      	str	r0, [sp, #16]
 8005c6e:	e7ea      	b.n	8005c46 <_dtoa_r+0xb3e>
 8005c70:	08007303 	.word	0x08007303
 8005c74:	080071d2 	.word	0x080071d2

08005c78 <_localeconv_r>:
 8005c78:	4b04      	ldr	r3, [pc, #16]	; (8005c8c <_localeconv_r+0x14>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6a18      	ldr	r0, [r3, #32]
 8005c7e:	4b04      	ldr	r3, [pc, #16]	; (8005c90 <_localeconv_r+0x18>)
 8005c80:	2800      	cmp	r0, #0
 8005c82:	bf08      	it	eq
 8005c84:	4618      	moveq	r0, r3
 8005c86:	30f0      	adds	r0, #240	; 0xf0
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	2000000c 	.word	0x2000000c
 8005c90:	20000070 	.word	0x20000070

08005c94 <malloc>:
 8005c94:	4b02      	ldr	r3, [pc, #8]	; (8005ca0 <malloc+0xc>)
 8005c96:	4601      	mov	r1, r0
 8005c98:	6818      	ldr	r0, [r3, #0]
 8005c9a:	f000 bb45 	b.w	8006328 <_malloc_r>
 8005c9e:	bf00      	nop
 8005ca0:	2000000c 	.word	0x2000000c

08005ca4 <memcpy>:
 8005ca4:	b510      	push	{r4, lr}
 8005ca6:	1e43      	subs	r3, r0, #1
 8005ca8:	440a      	add	r2, r1
 8005caa:	4291      	cmp	r1, r2
 8005cac:	d100      	bne.n	8005cb0 <memcpy+0xc>
 8005cae:	bd10      	pop	{r4, pc}
 8005cb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cb8:	e7f7      	b.n	8005caa <memcpy+0x6>

08005cba <_Balloc>:
 8005cba:	b570      	push	{r4, r5, r6, lr}
 8005cbc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	460e      	mov	r6, r1
 8005cc2:	b93d      	cbnz	r5, 8005cd4 <_Balloc+0x1a>
 8005cc4:	2010      	movs	r0, #16
 8005cc6:	f7ff ffe5 	bl	8005c94 <malloc>
 8005cca:	6260      	str	r0, [r4, #36]	; 0x24
 8005ccc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005cd0:	6005      	str	r5, [r0, #0]
 8005cd2:	60c5      	str	r5, [r0, #12]
 8005cd4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005cd6:	68eb      	ldr	r3, [r5, #12]
 8005cd8:	b183      	cbz	r3, 8005cfc <_Balloc+0x42>
 8005cda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005ce2:	b9b8      	cbnz	r0, 8005d14 <_Balloc+0x5a>
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	fa01 f506 	lsl.w	r5, r1, r6
 8005cea:	1d6a      	adds	r2, r5, #5
 8005cec:	0092      	lsls	r2, r2, #2
 8005cee:	4620      	mov	r0, r4
 8005cf0:	f000 fabe 	bl	8006270 <_calloc_r>
 8005cf4:	b160      	cbz	r0, 8005d10 <_Balloc+0x56>
 8005cf6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005cfa:	e00e      	b.n	8005d1a <_Balloc+0x60>
 8005cfc:	2221      	movs	r2, #33	; 0x21
 8005cfe:	2104      	movs	r1, #4
 8005d00:	4620      	mov	r0, r4
 8005d02:	f000 fab5 	bl	8006270 <_calloc_r>
 8005d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d08:	60e8      	str	r0, [r5, #12]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1e4      	bne.n	8005cda <_Balloc+0x20>
 8005d10:	2000      	movs	r0, #0
 8005d12:	bd70      	pop	{r4, r5, r6, pc}
 8005d14:	6802      	ldr	r2, [r0, #0]
 8005d16:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d20:	e7f7      	b.n	8005d12 <_Balloc+0x58>

08005d22 <_Bfree>:
 8005d22:	b570      	push	{r4, r5, r6, lr}
 8005d24:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005d26:	4606      	mov	r6, r0
 8005d28:	460d      	mov	r5, r1
 8005d2a:	b93c      	cbnz	r4, 8005d3c <_Bfree+0x1a>
 8005d2c:	2010      	movs	r0, #16
 8005d2e:	f7ff ffb1 	bl	8005c94 <malloc>
 8005d32:	6270      	str	r0, [r6, #36]	; 0x24
 8005d34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d38:	6004      	str	r4, [r0, #0]
 8005d3a:	60c4      	str	r4, [r0, #12]
 8005d3c:	b13d      	cbz	r5, 8005d4e <_Bfree+0x2c>
 8005d3e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005d40:	686a      	ldr	r2, [r5, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d48:	6029      	str	r1, [r5, #0]
 8005d4a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005d4e:	bd70      	pop	{r4, r5, r6, pc}

08005d50 <__multadd>:
 8005d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d54:	690d      	ldr	r5, [r1, #16]
 8005d56:	461f      	mov	r7, r3
 8005d58:	4606      	mov	r6, r0
 8005d5a:	460c      	mov	r4, r1
 8005d5c:	f101 0c14 	add.w	ip, r1, #20
 8005d60:	2300      	movs	r3, #0
 8005d62:	f8dc 0000 	ldr.w	r0, [ip]
 8005d66:	b281      	uxth	r1, r0
 8005d68:	fb02 7101 	mla	r1, r2, r1, r7
 8005d6c:	0c0f      	lsrs	r7, r1, #16
 8005d6e:	0c00      	lsrs	r0, r0, #16
 8005d70:	fb02 7000 	mla	r0, r2, r0, r7
 8005d74:	b289      	uxth	r1, r1
 8005d76:	3301      	adds	r3, #1
 8005d78:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005d7c:	429d      	cmp	r5, r3
 8005d7e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005d82:	f84c 1b04 	str.w	r1, [ip], #4
 8005d86:	dcec      	bgt.n	8005d62 <__multadd+0x12>
 8005d88:	b1d7      	cbz	r7, 8005dc0 <__multadd+0x70>
 8005d8a:	68a3      	ldr	r3, [r4, #8]
 8005d8c:	42ab      	cmp	r3, r5
 8005d8e:	dc12      	bgt.n	8005db6 <__multadd+0x66>
 8005d90:	6861      	ldr	r1, [r4, #4]
 8005d92:	4630      	mov	r0, r6
 8005d94:	3101      	adds	r1, #1
 8005d96:	f7ff ff90 	bl	8005cba <_Balloc>
 8005d9a:	6922      	ldr	r2, [r4, #16]
 8005d9c:	3202      	adds	r2, #2
 8005d9e:	f104 010c 	add.w	r1, r4, #12
 8005da2:	4680      	mov	r8, r0
 8005da4:	0092      	lsls	r2, r2, #2
 8005da6:	300c      	adds	r0, #12
 8005da8:	f7ff ff7c 	bl	8005ca4 <memcpy>
 8005dac:	4621      	mov	r1, r4
 8005dae:	4630      	mov	r0, r6
 8005db0:	f7ff ffb7 	bl	8005d22 <_Bfree>
 8005db4:	4644      	mov	r4, r8
 8005db6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005dba:	3501      	adds	r5, #1
 8005dbc:	615f      	str	r7, [r3, #20]
 8005dbe:	6125      	str	r5, [r4, #16]
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005dc6 <__hi0bits>:
 8005dc6:	0c02      	lsrs	r2, r0, #16
 8005dc8:	0412      	lsls	r2, r2, #16
 8005dca:	4603      	mov	r3, r0
 8005dcc:	b9b2      	cbnz	r2, 8005dfc <__hi0bits+0x36>
 8005dce:	0403      	lsls	r3, r0, #16
 8005dd0:	2010      	movs	r0, #16
 8005dd2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005dd6:	bf04      	itt	eq
 8005dd8:	021b      	lsleq	r3, r3, #8
 8005dda:	3008      	addeq	r0, #8
 8005ddc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005de0:	bf04      	itt	eq
 8005de2:	011b      	lsleq	r3, r3, #4
 8005de4:	3004      	addeq	r0, #4
 8005de6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005dea:	bf04      	itt	eq
 8005dec:	009b      	lsleq	r3, r3, #2
 8005dee:	3002      	addeq	r0, #2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	db06      	blt.n	8005e02 <__hi0bits+0x3c>
 8005df4:	005b      	lsls	r3, r3, #1
 8005df6:	d503      	bpl.n	8005e00 <__hi0bits+0x3a>
 8005df8:	3001      	adds	r0, #1
 8005dfa:	4770      	bx	lr
 8005dfc:	2000      	movs	r0, #0
 8005dfe:	e7e8      	b.n	8005dd2 <__hi0bits+0xc>
 8005e00:	2020      	movs	r0, #32
 8005e02:	4770      	bx	lr

08005e04 <__lo0bits>:
 8005e04:	6803      	ldr	r3, [r0, #0]
 8005e06:	f013 0207 	ands.w	r2, r3, #7
 8005e0a:	4601      	mov	r1, r0
 8005e0c:	d00b      	beq.n	8005e26 <__lo0bits+0x22>
 8005e0e:	07da      	lsls	r2, r3, #31
 8005e10:	d423      	bmi.n	8005e5a <__lo0bits+0x56>
 8005e12:	0798      	lsls	r0, r3, #30
 8005e14:	bf49      	itett	mi
 8005e16:	085b      	lsrmi	r3, r3, #1
 8005e18:	089b      	lsrpl	r3, r3, #2
 8005e1a:	2001      	movmi	r0, #1
 8005e1c:	600b      	strmi	r3, [r1, #0]
 8005e1e:	bf5c      	itt	pl
 8005e20:	600b      	strpl	r3, [r1, #0]
 8005e22:	2002      	movpl	r0, #2
 8005e24:	4770      	bx	lr
 8005e26:	b298      	uxth	r0, r3
 8005e28:	b9a8      	cbnz	r0, 8005e56 <__lo0bits+0x52>
 8005e2a:	0c1b      	lsrs	r3, r3, #16
 8005e2c:	2010      	movs	r0, #16
 8005e2e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005e32:	bf04      	itt	eq
 8005e34:	0a1b      	lsreq	r3, r3, #8
 8005e36:	3008      	addeq	r0, #8
 8005e38:	071a      	lsls	r2, r3, #28
 8005e3a:	bf04      	itt	eq
 8005e3c:	091b      	lsreq	r3, r3, #4
 8005e3e:	3004      	addeq	r0, #4
 8005e40:	079a      	lsls	r2, r3, #30
 8005e42:	bf04      	itt	eq
 8005e44:	089b      	lsreq	r3, r3, #2
 8005e46:	3002      	addeq	r0, #2
 8005e48:	07da      	lsls	r2, r3, #31
 8005e4a:	d402      	bmi.n	8005e52 <__lo0bits+0x4e>
 8005e4c:	085b      	lsrs	r3, r3, #1
 8005e4e:	d006      	beq.n	8005e5e <__lo0bits+0x5a>
 8005e50:	3001      	adds	r0, #1
 8005e52:	600b      	str	r3, [r1, #0]
 8005e54:	4770      	bx	lr
 8005e56:	4610      	mov	r0, r2
 8005e58:	e7e9      	b.n	8005e2e <__lo0bits+0x2a>
 8005e5a:	2000      	movs	r0, #0
 8005e5c:	4770      	bx	lr
 8005e5e:	2020      	movs	r0, #32
 8005e60:	4770      	bx	lr

08005e62 <__i2b>:
 8005e62:	b510      	push	{r4, lr}
 8005e64:	460c      	mov	r4, r1
 8005e66:	2101      	movs	r1, #1
 8005e68:	f7ff ff27 	bl	8005cba <_Balloc>
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	6144      	str	r4, [r0, #20]
 8005e70:	6102      	str	r2, [r0, #16]
 8005e72:	bd10      	pop	{r4, pc}

08005e74 <__multiply>:
 8005e74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e78:	4614      	mov	r4, r2
 8005e7a:	690a      	ldr	r2, [r1, #16]
 8005e7c:	6923      	ldr	r3, [r4, #16]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	bfb8      	it	lt
 8005e82:	460b      	movlt	r3, r1
 8005e84:	4688      	mov	r8, r1
 8005e86:	bfbc      	itt	lt
 8005e88:	46a0      	movlt	r8, r4
 8005e8a:	461c      	movlt	r4, r3
 8005e8c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005e90:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005e94:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005e98:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005e9c:	eb07 0609 	add.w	r6, r7, r9
 8005ea0:	42b3      	cmp	r3, r6
 8005ea2:	bfb8      	it	lt
 8005ea4:	3101      	addlt	r1, #1
 8005ea6:	f7ff ff08 	bl	8005cba <_Balloc>
 8005eaa:	f100 0514 	add.w	r5, r0, #20
 8005eae:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005eb2:	462b      	mov	r3, r5
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	4573      	cmp	r3, lr
 8005eb8:	d316      	bcc.n	8005ee8 <__multiply+0x74>
 8005eba:	f104 0214 	add.w	r2, r4, #20
 8005ebe:	f108 0114 	add.w	r1, r8, #20
 8005ec2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005ec6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	9b00      	ldr	r3, [sp, #0]
 8005ece:	9201      	str	r2, [sp, #4]
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d80c      	bhi.n	8005eee <__multiply+0x7a>
 8005ed4:	2e00      	cmp	r6, #0
 8005ed6:	dd03      	ble.n	8005ee0 <__multiply+0x6c>
 8005ed8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d05d      	beq.n	8005f9c <__multiply+0x128>
 8005ee0:	6106      	str	r6, [r0, #16]
 8005ee2:	b003      	add	sp, #12
 8005ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ee8:	f843 2b04 	str.w	r2, [r3], #4
 8005eec:	e7e3      	b.n	8005eb6 <__multiply+0x42>
 8005eee:	f8b2 b000 	ldrh.w	fp, [r2]
 8005ef2:	f1bb 0f00 	cmp.w	fp, #0
 8005ef6:	d023      	beq.n	8005f40 <__multiply+0xcc>
 8005ef8:	4689      	mov	r9, r1
 8005efa:	46ac      	mov	ip, r5
 8005efc:	f04f 0800 	mov.w	r8, #0
 8005f00:	f859 4b04 	ldr.w	r4, [r9], #4
 8005f04:	f8dc a000 	ldr.w	sl, [ip]
 8005f08:	b2a3      	uxth	r3, r4
 8005f0a:	fa1f fa8a 	uxth.w	sl, sl
 8005f0e:	fb0b a303 	mla	r3, fp, r3, sl
 8005f12:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005f16:	f8dc 4000 	ldr.w	r4, [ip]
 8005f1a:	4443      	add	r3, r8
 8005f1c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005f20:	fb0b 840a 	mla	r4, fp, sl, r8
 8005f24:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005f28:	46e2      	mov	sl, ip
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005f30:	454f      	cmp	r7, r9
 8005f32:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005f36:	f84a 3b04 	str.w	r3, [sl], #4
 8005f3a:	d82b      	bhi.n	8005f94 <__multiply+0x120>
 8005f3c:	f8cc 8004 	str.w	r8, [ip, #4]
 8005f40:	9b01      	ldr	r3, [sp, #4]
 8005f42:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005f46:	3204      	adds	r2, #4
 8005f48:	f1ba 0f00 	cmp.w	sl, #0
 8005f4c:	d020      	beq.n	8005f90 <__multiply+0x11c>
 8005f4e:	682b      	ldr	r3, [r5, #0]
 8005f50:	4689      	mov	r9, r1
 8005f52:	46a8      	mov	r8, r5
 8005f54:	f04f 0b00 	mov.w	fp, #0
 8005f58:	f8b9 c000 	ldrh.w	ip, [r9]
 8005f5c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005f60:	fb0a 440c 	mla	r4, sl, ip, r4
 8005f64:	445c      	add	r4, fp
 8005f66:	46c4      	mov	ip, r8
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005f6e:	f84c 3b04 	str.w	r3, [ip], #4
 8005f72:	f859 3b04 	ldr.w	r3, [r9], #4
 8005f76:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005f7a:	0c1b      	lsrs	r3, r3, #16
 8005f7c:	fb0a b303 	mla	r3, sl, r3, fp
 8005f80:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005f84:	454f      	cmp	r7, r9
 8005f86:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005f8a:	d805      	bhi.n	8005f98 <__multiply+0x124>
 8005f8c:	f8c8 3004 	str.w	r3, [r8, #4]
 8005f90:	3504      	adds	r5, #4
 8005f92:	e79b      	b.n	8005ecc <__multiply+0x58>
 8005f94:	46d4      	mov	ip, sl
 8005f96:	e7b3      	b.n	8005f00 <__multiply+0x8c>
 8005f98:	46e0      	mov	r8, ip
 8005f9a:	e7dd      	b.n	8005f58 <__multiply+0xe4>
 8005f9c:	3e01      	subs	r6, #1
 8005f9e:	e799      	b.n	8005ed4 <__multiply+0x60>

08005fa0 <__pow5mult>:
 8005fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fa4:	4615      	mov	r5, r2
 8005fa6:	f012 0203 	ands.w	r2, r2, #3
 8005faa:	4606      	mov	r6, r0
 8005fac:	460f      	mov	r7, r1
 8005fae:	d007      	beq.n	8005fc0 <__pow5mult+0x20>
 8005fb0:	3a01      	subs	r2, #1
 8005fb2:	4c21      	ldr	r4, [pc, #132]	; (8006038 <__pow5mult+0x98>)
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005fba:	f7ff fec9 	bl	8005d50 <__multadd>
 8005fbe:	4607      	mov	r7, r0
 8005fc0:	10ad      	asrs	r5, r5, #2
 8005fc2:	d035      	beq.n	8006030 <__pow5mult+0x90>
 8005fc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005fc6:	b93c      	cbnz	r4, 8005fd8 <__pow5mult+0x38>
 8005fc8:	2010      	movs	r0, #16
 8005fca:	f7ff fe63 	bl	8005c94 <malloc>
 8005fce:	6270      	str	r0, [r6, #36]	; 0x24
 8005fd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005fd4:	6004      	str	r4, [r0, #0]
 8005fd6:	60c4      	str	r4, [r0, #12]
 8005fd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005fdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005fe0:	b94c      	cbnz	r4, 8005ff6 <__pow5mult+0x56>
 8005fe2:	f240 2171 	movw	r1, #625	; 0x271
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	f7ff ff3b 	bl	8005e62 <__i2b>
 8005fec:	2300      	movs	r3, #0
 8005fee:	f8c8 0008 	str.w	r0, [r8, #8]
 8005ff2:	4604      	mov	r4, r0
 8005ff4:	6003      	str	r3, [r0, #0]
 8005ff6:	f04f 0800 	mov.w	r8, #0
 8005ffa:	07eb      	lsls	r3, r5, #31
 8005ffc:	d50a      	bpl.n	8006014 <__pow5mult+0x74>
 8005ffe:	4639      	mov	r1, r7
 8006000:	4622      	mov	r2, r4
 8006002:	4630      	mov	r0, r6
 8006004:	f7ff ff36 	bl	8005e74 <__multiply>
 8006008:	4639      	mov	r1, r7
 800600a:	4681      	mov	r9, r0
 800600c:	4630      	mov	r0, r6
 800600e:	f7ff fe88 	bl	8005d22 <_Bfree>
 8006012:	464f      	mov	r7, r9
 8006014:	106d      	asrs	r5, r5, #1
 8006016:	d00b      	beq.n	8006030 <__pow5mult+0x90>
 8006018:	6820      	ldr	r0, [r4, #0]
 800601a:	b938      	cbnz	r0, 800602c <__pow5mult+0x8c>
 800601c:	4622      	mov	r2, r4
 800601e:	4621      	mov	r1, r4
 8006020:	4630      	mov	r0, r6
 8006022:	f7ff ff27 	bl	8005e74 <__multiply>
 8006026:	6020      	str	r0, [r4, #0]
 8006028:	f8c0 8000 	str.w	r8, [r0]
 800602c:	4604      	mov	r4, r0
 800602e:	e7e4      	b.n	8005ffa <__pow5mult+0x5a>
 8006030:	4638      	mov	r0, r7
 8006032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006036:	bf00      	nop
 8006038:	080072d0 	.word	0x080072d0

0800603c <__lshift>:
 800603c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006040:	460c      	mov	r4, r1
 8006042:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006046:	6923      	ldr	r3, [r4, #16]
 8006048:	6849      	ldr	r1, [r1, #4]
 800604a:	eb0a 0903 	add.w	r9, sl, r3
 800604e:	68a3      	ldr	r3, [r4, #8]
 8006050:	4607      	mov	r7, r0
 8006052:	4616      	mov	r6, r2
 8006054:	f109 0501 	add.w	r5, r9, #1
 8006058:	42ab      	cmp	r3, r5
 800605a:	db32      	blt.n	80060c2 <__lshift+0x86>
 800605c:	4638      	mov	r0, r7
 800605e:	f7ff fe2c 	bl	8005cba <_Balloc>
 8006062:	2300      	movs	r3, #0
 8006064:	4680      	mov	r8, r0
 8006066:	f100 0114 	add.w	r1, r0, #20
 800606a:	461a      	mov	r2, r3
 800606c:	4553      	cmp	r3, sl
 800606e:	db2b      	blt.n	80060c8 <__lshift+0x8c>
 8006070:	6920      	ldr	r0, [r4, #16]
 8006072:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006076:	f104 0314 	add.w	r3, r4, #20
 800607a:	f016 021f 	ands.w	r2, r6, #31
 800607e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006082:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006086:	d025      	beq.n	80060d4 <__lshift+0x98>
 8006088:	f1c2 0e20 	rsb	lr, r2, #32
 800608c:	2000      	movs	r0, #0
 800608e:	681e      	ldr	r6, [r3, #0]
 8006090:	468a      	mov	sl, r1
 8006092:	4096      	lsls	r6, r2
 8006094:	4330      	orrs	r0, r6
 8006096:	f84a 0b04 	str.w	r0, [sl], #4
 800609a:	f853 0b04 	ldr.w	r0, [r3], #4
 800609e:	459c      	cmp	ip, r3
 80060a0:	fa20 f00e 	lsr.w	r0, r0, lr
 80060a4:	d814      	bhi.n	80060d0 <__lshift+0x94>
 80060a6:	6048      	str	r0, [r1, #4]
 80060a8:	b108      	cbz	r0, 80060ae <__lshift+0x72>
 80060aa:	f109 0502 	add.w	r5, r9, #2
 80060ae:	3d01      	subs	r5, #1
 80060b0:	4638      	mov	r0, r7
 80060b2:	f8c8 5010 	str.w	r5, [r8, #16]
 80060b6:	4621      	mov	r1, r4
 80060b8:	f7ff fe33 	bl	8005d22 <_Bfree>
 80060bc:	4640      	mov	r0, r8
 80060be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060c2:	3101      	adds	r1, #1
 80060c4:	005b      	lsls	r3, r3, #1
 80060c6:	e7c7      	b.n	8006058 <__lshift+0x1c>
 80060c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80060cc:	3301      	adds	r3, #1
 80060ce:	e7cd      	b.n	800606c <__lshift+0x30>
 80060d0:	4651      	mov	r1, sl
 80060d2:	e7dc      	b.n	800608e <__lshift+0x52>
 80060d4:	3904      	subs	r1, #4
 80060d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80060da:	f841 2f04 	str.w	r2, [r1, #4]!
 80060de:	459c      	cmp	ip, r3
 80060e0:	d8f9      	bhi.n	80060d6 <__lshift+0x9a>
 80060e2:	e7e4      	b.n	80060ae <__lshift+0x72>

080060e4 <__mcmp>:
 80060e4:	6903      	ldr	r3, [r0, #16]
 80060e6:	690a      	ldr	r2, [r1, #16]
 80060e8:	1a9b      	subs	r3, r3, r2
 80060ea:	b530      	push	{r4, r5, lr}
 80060ec:	d10c      	bne.n	8006108 <__mcmp+0x24>
 80060ee:	0092      	lsls	r2, r2, #2
 80060f0:	3014      	adds	r0, #20
 80060f2:	3114      	adds	r1, #20
 80060f4:	1884      	adds	r4, r0, r2
 80060f6:	4411      	add	r1, r2
 80060f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80060fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006100:	4295      	cmp	r5, r2
 8006102:	d003      	beq.n	800610c <__mcmp+0x28>
 8006104:	d305      	bcc.n	8006112 <__mcmp+0x2e>
 8006106:	2301      	movs	r3, #1
 8006108:	4618      	mov	r0, r3
 800610a:	bd30      	pop	{r4, r5, pc}
 800610c:	42a0      	cmp	r0, r4
 800610e:	d3f3      	bcc.n	80060f8 <__mcmp+0x14>
 8006110:	e7fa      	b.n	8006108 <__mcmp+0x24>
 8006112:	f04f 33ff 	mov.w	r3, #4294967295
 8006116:	e7f7      	b.n	8006108 <__mcmp+0x24>

08006118 <__mdiff>:
 8006118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800611c:	460d      	mov	r5, r1
 800611e:	4607      	mov	r7, r0
 8006120:	4611      	mov	r1, r2
 8006122:	4628      	mov	r0, r5
 8006124:	4614      	mov	r4, r2
 8006126:	f7ff ffdd 	bl	80060e4 <__mcmp>
 800612a:	1e06      	subs	r6, r0, #0
 800612c:	d108      	bne.n	8006140 <__mdiff+0x28>
 800612e:	4631      	mov	r1, r6
 8006130:	4638      	mov	r0, r7
 8006132:	f7ff fdc2 	bl	8005cba <_Balloc>
 8006136:	2301      	movs	r3, #1
 8006138:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800613c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006140:	bfa4      	itt	ge
 8006142:	4623      	movge	r3, r4
 8006144:	462c      	movge	r4, r5
 8006146:	4638      	mov	r0, r7
 8006148:	6861      	ldr	r1, [r4, #4]
 800614a:	bfa6      	itte	ge
 800614c:	461d      	movge	r5, r3
 800614e:	2600      	movge	r6, #0
 8006150:	2601      	movlt	r6, #1
 8006152:	f7ff fdb2 	bl	8005cba <_Balloc>
 8006156:	692b      	ldr	r3, [r5, #16]
 8006158:	60c6      	str	r6, [r0, #12]
 800615a:	6926      	ldr	r6, [r4, #16]
 800615c:	f105 0914 	add.w	r9, r5, #20
 8006160:	f104 0214 	add.w	r2, r4, #20
 8006164:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006168:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800616c:	f100 0514 	add.w	r5, r0, #20
 8006170:	f04f 0e00 	mov.w	lr, #0
 8006174:	f852 ab04 	ldr.w	sl, [r2], #4
 8006178:	f859 4b04 	ldr.w	r4, [r9], #4
 800617c:	fa1e f18a 	uxtah	r1, lr, sl
 8006180:	b2a3      	uxth	r3, r4
 8006182:	1ac9      	subs	r1, r1, r3
 8006184:	0c23      	lsrs	r3, r4, #16
 8006186:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800618a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800618e:	b289      	uxth	r1, r1
 8006190:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006194:	45c8      	cmp	r8, r9
 8006196:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800619a:	4694      	mov	ip, r2
 800619c:	f845 3b04 	str.w	r3, [r5], #4
 80061a0:	d8e8      	bhi.n	8006174 <__mdiff+0x5c>
 80061a2:	45bc      	cmp	ip, r7
 80061a4:	d304      	bcc.n	80061b0 <__mdiff+0x98>
 80061a6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80061aa:	b183      	cbz	r3, 80061ce <__mdiff+0xb6>
 80061ac:	6106      	str	r6, [r0, #16]
 80061ae:	e7c5      	b.n	800613c <__mdiff+0x24>
 80061b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80061b4:	fa1e f381 	uxtah	r3, lr, r1
 80061b8:	141a      	asrs	r2, r3, #16
 80061ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80061be:	b29b      	uxth	r3, r3
 80061c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061c4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80061c8:	f845 3b04 	str.w	r3, [r5], #4
 80061cc:	e7e9      	b.n	80061a2 <__mdiff+0x8a>
 80061ce:	3e01      	subs	r6, #1
 80061d0:	e7e9      	b.n	80061a6 <__mdiff+0x8e>

080061d2 <__d2b>:
 80061d2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80061d6:	460e      	mov	r6, r1
 80061d8:	2101      	movs	r1, #1
 80061da:	ec59 8b10 	vmov	r8, r9, d0
 80061de:	4615      	mov	r5, r2
 80061e0:	f7ff fd6b 	bl	8005cba <_Balloc>
 80061e4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80061e8:	4607      	mov	r7, r0
 80061ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80061ee:	bb34      	cbnz	r4, 800623e <__d2b+0x6c>
 80061f0:	9301      	str	r3, [sp, #4]
 80061f2:	f1b8 0300 	subs.w	r3, r8, #0
 80061f6:	d027      	beq.n	8006248 <__d2b+0x76>
 80061f8:	a802      	add	r0, sp, #8
 80061fa:	f840 3d08 	str.w	r3, [r0, #-8]!
 80061fe:	f7ff fe01 	bl	8005e04 <__lo0bits>
 8006202:	9900      	ldr	r1, [sp, #0]
 8006204:	b1f0      	cbz	r0, 8006244 <__d2b+0x72>
 8006206:	9a01      	ldr	r2, [sp, #4]
 8006208:	f1c0 0320 	rsb	r3, r0, #32
 800620c:	fa02 f303 	lsl.w	r3, r2, r3
 8006210:	430b      	orrs	r3, r1
 8006212:	40c2      	lsrs	r2, r0
 8006214:	617b      	str	r3, [r7, #20]
 8006216:	9201      	str	r2, [sp, #4]
 8006218:	9b01      	ldr	r3, [sp, #4]
 800621a:	61bb      	str	r3, [r7, #24]
 800621c:	2b00      	cmp	r3, #0
 800621e:	bf14      	ite	ne
 8006220:	2102      	movne	r1, #2
 8006222:	2101      	moveq	r1, #1
 8006224:	6139      	str	r1, [r7, #16]
 8006226:	b1c4      	cbz	r4, 800625a <__d2b+0x88>
 8006228:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800622c:	4404      	add	r4, r0
 800622e:	6034      	str	r4, [r6, #0]
 8006230:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006234:	6028      	str	r0, [r5, #0]
 8006236:	4638      	mov	r0, r7
 8006238:	b003      	add	sp, #12
 800623a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800623e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006242:	e7d5      	b.n	80061f0 <__d2b+0x1e>
 8006244:	6179      	str	r1, [r7, #20]
 8006246:	e7e7      	b.n	8006218 <__d2b+0x46>
 8006248:	a801      	add	r0, sp, #4
 800624a:	f7ff fddb 	bl	8005e04 <__lo0bits>
 800624e:	9b01      	ldr	r3, [sp, #4]
 8006250:	617b      	str	r3, [r7, #20]
 8006252:	2101      	movs	r1, #1
 8006254:	6139      	str	r1, [r7, #16]
 8006256:	3020      	adds	r0, #32
 8006258:	e7e5      	b.n	8006226 <__d2b+0x54>
 800625a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800625e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006262:	6030      	str	r0, [r6, #0]
 8006264:	6918      	ldr	r0, [r3, #16]
 8006266:	f7ff fdae 	bl	8005dc6 <__hi0bits>
 800626a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800626e:	e7e1      	b.n	8006234 <__d2b+0x62>

08006270 <_calloc_r>:
 8006270:	b538      	push	{r3, r4, r5, lr}
 8006272:	fb02 f401 	mul.w	r4, r2, r1
 8006276:	4621      	mov	r1, r4
 8006278:	f000 f856 	bl	8006328 <_malloc_r>
 800627c:	4605      	mov	r5, r0
 800627e:	b118      	cbz	r0, 8006288 <_calloc_r+0x18>
 8006280:	4622      	mov	r2, r4
 8006282:	2100      	movs	r1, #0
 8006284:	f7fe f9f4 	bl	8004670 <memset>
 8006288:	4628      	mov	r0, r5
 800628a:	bd38      	pop	{r3, r4, r5, pc}

0800628c <_free_r>:
 800628c:	b538      	push	{r3, r4, r5, lr}
 800628e:	4605      	mov	r5, r0
 8006290:	2900      	cmp	r1, #0
 8006292:	d045      	beq.n	8006320 <_free_r+0x94>
 8006294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006298:	1f0c      	subs	r4, r1, #4
 800629a:	2b00      	cmp	r3, #0
 800629c:	bfb8      	it	lt
 800629e:	18e4      	addlt	r4, r4, r3
 80062a0:	f000 fec3 	bl	800702a <__malloc_lock>
 80062a4:	4a1f      	ldr	r2, [pc, #124]	; (8006324 <_free_r+0x98>)
 80062a6:	6813      	ldr	r3, [r2, #0]
 80062a8:	4610      	mov	r0, r2
 80062aa:	b933      	cbnz	r3, 80062ba <_free_r+0x2e>
 80062ac:	6063      	str	r3, [r4, #4]
 80062ae:	6014      	str	r4, [r2, #0]
 80062b0:	4628      	mov	r0, r5
 80062b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062b6:	f000 beb9 	b.w	800702c <__malloc_unlock>
 80062ba:	42a3      	cmp	r3, r4
 80062bc:	d90c      	bls.n	80062d8 <_free_r+0x4c>
 80062be:	6821      	ldr	r1, [r4, #0]
 80062c0:	1862      	adds	r2, r4, r1
 80062c2:	4293      	cmp	r3, r2
 80062c4:	bf04      	itt	eq
 80062c6:	681a      	ldreq	r2, [r3, #0]
 80062c8:	685b      	ldreq	r3, [r3, #4]
 80062ca:	6063      	str	r3, [r4, #4]
 80062cc:	bf04      	itt	eq
 80062ce:	1852      	addeq	r2, r2, r1
 80062d0:	6022      	streq	r2, [r4, #0]
 80062d2:	6004      	str	r4, [r0, #0]
 80062d4:	e7ec      	b.n	80062b0 <_free_r+0x24>
 80062d6:	4613      	mov	r3, r2
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	b10a      	cbz	r2, 80062e0 <_free_r+0x54>
 80062dc:	42a2      	cmp	r2, r4
 80062de:	d9fa      	bls.n	80062d6 <_free_r+0x4a>
 80062e0:	6819      	ldr	r1, [r3, #0]
 80062e2:	1858      	adds	r0, r3, r1
 80062e4:	42a0      	cmp	r0, r4
 80062e6:	d10b      	bne.n	8006300 <_free_r+0x74>
 80062e8:	6820      	ldr	r0, [r4, #0]
 80062ea:	4401      	add	r1, r0
 80062ec:	1858      	adds	r0, r3, r1
 80062ee:	4282      	cmp	r2, r0
 80062f0:	6019      	str	r1, [r3, #0]
 80062f2:	d1dd      	bne.n	80062b0 <_free_r+0x24>
 80062f4:	6810      	ldr	r0, [r2, #0]
 80062f6:	6852      	ldr	r2, [r2, #4]
 80062f8:	605a      	str	r2, [r3, #4]
 80062fa:	4401      	add	r1, r0
 80062fc:	6019      	str	r1, [r3, #0]
 80062fe:	e7d7      	b.n	80062b0 <_free_r+0x24>
 8006300:	d902      	bls.n	8006308 <_free_r+0x7c>
 8006302:	230c      	movs	r3, #12
 8006304:	602b      	str	r3, [r5, #0]
 8006306:	e7d3      	b.n	80062b0 <_free_r+0x24>
 8006308:	6820      	ldr	r0, [r4, #0]
 800630a:	1821      	adds	r1, r4, r0
 800630c:	428a      	cmp	r2, r1
 800630e:	bf04      	itt	eq
 8006310:	6811      	ldreq	r1, [r2, #0]
 8006312:	6852      	ldreq	r2, [r2, #4]
 8006314:	6062      	str	r2, [r4, #4]
 8006316:	bf04      	itt	eq
 8006318:	1809      	addeq	r1, r1, r0
 800631a:	6021      	streq	r1, [r4, #0]
 800631c:	605c      	str	r4, [r3, #4]
 800631e:	e7c7      	b.n	80062b0 <_free_r+0x24>
 8006320:	bd38      	pop	{r3, r4, r5, pc}
 8006322:	bf00      	nop
 8006324:	200001fc 	.word	0x200001fc

08006328 <_malloc_r>:
 8006328:	b570      	push	{r4, r5, r6, lr}
 800632a:	1ccd      	adds	r5, r1, #3
 800632c:	f025 0503 	bic.w	r5, r5, #3
 8006330:	3508      	adds	r5, #8
 8006332:	2d0c      	cmp	r5, #12
 8006334:	bf38      	it	cc
 8006336:	250c      	movcc	r5, #12
 8006338:	2d00      	cmp	r5, #0
 800633a:	4606      	mov	r6, r0
 800633c:	db01      	blt.n	8006342 <_malloc_r+0x1a>
 800633e:	42a9      	cmp	r1, r5
 8006340:	d903      	bls.n	800634a <_malloc_r+0x22>
 8006342:	230c      	movs	r3, #12
 8006344:	6033      	str	r3, [r6, #0]
 8006346:	2000      	movs	r0, #0
 8006348:	bd70      	pop	{r4, r5, r6, pc}
 800634a:	f000 fe6e 	bl	800702a <__malloc_lock>
 800634e:	4a21      	ldr	r2, [pc, #132]	; (80063d4 <_malloc_r+0xac>)
 8006350:	6814      	ldr	r4, [r2, #0]
 8006352:	4621      	mov	r1, r4
 8006354:	b991      	cbnz	r1, 800637c <_malloc_r+0x54>
 8006356:	4c20      	ldr	r4, [pc, #128]	; (80063d8 <_malloc_r+0xb0>)
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	b91b      	cbnz	r3, 8006364 <_malloc_r+0x3c>
 800635c:	4630      	mov	r0, r6
 800635e:	f000 fc91 	bl	8006c84 <_sbrk_r>
 8006362:	6020      	str	r0, [r4, #0]
 8006364:	4629      	mov	r1, r5
 8006366:	4630      	mov	r0, r6
 8006368:	f000 fc8c 	bl	8006c84 <_sbrk_r>
 800636c:	1c43      	adds	r3, r0, #1
 800636e:	d124      	bne.n	80063ba <_malloc_r+0x92>
 8006370:	230c      	movs	r3, #12
 8006372:	6033      	str	r3, [r6, #0]
 8006374:	4630      	mov	r0, r6
 8006376:	f000 fe59 	bl	800702c <__malloc_unlock>
 800637a:	e7e4      	b.n	8006346 <_malloc_r+0x1e>
 800637c:	680b      	ldr	r3, [r1, #0]
 800637e:	1b5b      	subs	r3, r3, r5
 8006380:	d418      	bmi.n	80063b4 <_malloc_r+0x8c>
 8006382:	2b0b      	cmp	r3, #11
 8006384:	d90f      	bls.n	80063a6 <_malloc_r+0x7e>
 8006386:	600b      	str	r3, [r1, #0]
 8006388:	50cd      	str	r5, [r1, r3]
 800638a:	18cc      	adds	r4, r1, r3
 800638c:	4630      	mov	r0, r6
 800638e:	f000 fe4d 	bl	800702c <__malloc_unlock>
 8006392:	f104 000b 	add.w	r0, r4, #11
 8006396:	1d23      	adds	r3, r4, #4
 8006398:	f020 0007 	bic.w	r0, r0, #7
 800639c:	1ac3      	subs	r3, r0, r3
 800639e:	d0d3      	beq.n	8006348 <_malloc_r+0x20>
 80063a0:	425a      	negs	r2, r3
 80063a2:	50e2      	str	r2, [r4, r3]
 80063a4:	e7d0      	b.n	8006348 <_malloc_r+0x20>
 80063a6:	428c      	cmp	r4, r1
 80063a8:	684b      	ldr	r3, [r1, #4]
 80063aa:	bf16      	itet	ne
 80063ac:	6063      	strne	r3, [r4, #4]
 80063ae:	6013      	streq	r3, [r2, #0]
 80063b0:	460c      	movne	r4, r1
 80063b2:	e7eb      	b.n	800638c <_malloc_r+0x64>
 80063b4:	460c      	mov	r4, r1
 80063b6:	6849      	ldr	r1, [r1, #4]
 80063b8:	e7cc      	b.n	8006354 <_malloc_r+0x2c>
 80063ba:	1cc4      	adds	r4, r0, #3
 80063bc:	f024 0403 	bic.w	r4, r4, #3
 80063c0:	42a0      	cmp	r0, r4
 80063c2:	d005      	beq.n	80063d0 <_malloc_r+0xa8>
 80063c4:	1a21      	subs	r1, r4, r0
 80063c6:	4630      	mov	r0, r6
 80063c8:	f000 fc5c 	bl	8006c84 <_sbrk_r>
 80063cc:	3001      	adds	r0, #1
 80063ce:	d0cf      	beq.n	8006370 <_malloc_r+0x48>
 80063d0:	6025      	str	r5, [r4, #0]
 80063d2:	e7db      	b.n	800638c <_malloc_r+0x64>
 80063d4:	200001fc 	.word	0x200001fc
 80063d8:	20000200 	.word	0x20000200

080063dc <__ssputs_r>:
 80063dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063e0:	688e      	ldr	r6, [r1, #8]
 80063e2:	429e      	cmp	r6, r3
 80063e4:	4682      	mov	sl, r0
 80063e6:	460c      	mov	r4, r1
 80063e8:	4690      	mov	r8, r2
 80063ea:	4699      	mov	r9, r3
 80063ec:	d837      	bhi.n	800645e <__ssputs_r+0x82>
 80063ee:	898a      	ldrh	r2, [r1, #12]
 80063f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063f4:	d031      	beq.n	800645a <__ssputs_r+0x7e>
 80063f6:	6825      	ldr	r5, [r4, #0]
 80063f8:	6909      	ldr	r1, [r1, #16]
 80063fa:	1a6f      	subs	r7, r5, r1
 80063fc:	6965      	ldr	r5, [r4, #20]
 80063fe:	2302      	movs	r3, #2
 8006400:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006404:	fb95 f5f3 	sdiv	r5, r5, r3
 8006408:	f109 0301 	add.w	r3, r9, #1
 800640c:	443b      	add	r3, r7
 800640e:	429d      	cmp	r5, r3
 8006410:	bf38      	it	cc
 8006412:	461d      	movcc	r5, r3
 8006414:	0553      	lsls	r3, r2, #21
 8006416:	d530      	bpl.n	800647a <__ssputs_r+0x9e>
 8006418:	4629      	mov	r1, r5
 800641a:	f7ff ff85 	bl	8006328 <_malloc_r>
 800641e:	4606      	mov	r6, r0
 8006420:	b950      	cbnz	r0, 8006438 <__ssputs_r+0x5c>
 8006422:	230c      	movs	r3, #12
 8006424:	f8ca 3000 	str.w	r3, [sl]
 8006428:	89a3      	ldrh	r3, [r4, #12]
 800642a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800642e:	81a3      	strh	r3, [r4, #12]
 8006430:	f04f 30ff 	mov.w	r0, #4294967295
 8006434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006438:	463a      	mov	r2, r7
 800643a:	6921      	ldr	r1, [r4, #16]
 800643c:	f7ff fc32 	bl	8005ca4 <memcpy>
 8006440:	89a3      	ldrh	r3, [r4, #12]
 8006442:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800644a:	81a3      	strh	r3, [r4, #12]
 800644c:	6126      	str	r6, [r4, #16]
 800644e:	6165      	str	r5, [r4, #20]
 8006450:	443e      	add	r6, r7
 8006452:	1bed      	subs	r5, r5, r7
 8006454:	6026      	str	r6, [r4, #0]
 8006456:	60a5      	str	r5, [r4, #8]
 8006458:	464e      	mov	r6, r9
 800645a:	454e      	cmp	r6, r9
 800645c:	d900      	bls.n	8006460 <__ssputs_r+0x84>
 800645e:	464e      	mov	r6, r9
 8006460:	4632      	mov	r2, r6
 8006462:	4641      	mov	r1, r8
 8006464:	6820      	ldr	r0, [r4, #0]
 8006466:	f000 fdc7 	bl	8006ff8 <memmove>
 800646a:	68a3      	ldr	r3, [r4, #8]
 800646c:	1b9b      	subs	r3, r3, r6
 800646e:	60a3      	str	r3, [r4, #8]
 8006470:	6823      	ldr	r3, [r4, #0]
 8006472:	441e      	add	r6, r3
 8006474:	6026      	str	r6, [r4, #0]
 8006476:	2000      	movs	r0, #0
 8006478:	e7dc      	b.n	8006434 <__ssputs_r+0x58>
 800647a:	462a      	mov	r2, r5
 800647c:	f000 fdd7 	bl	800702e <_realloc_r>
 8006480:	4606      	mov	r6, r0
 8006482:	2800      	cmp	r0, #0
 8006484:	d1e2      	bne.n	800644c <__ssputs_r+0x70>
 8006486:	6921      	ldr	r1, [r4, #16]
 8006488:	4650      	mov	r0, sl
 800648a:	f7ff feff 	bl	800628c <_free_r>
 800648e:	e7c8      	b.n	8006422 <__ssputs_r+0x46>

08006490 <_svfiprintf_r>:
 8006490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006494:	461d      	mov	r5, r3
 8006496:	898b      	ldrh	r3, [r1, #12]
 8006498:	061f      	lsls	r7, r3, #24
 800649a:	b09d      	sub	sp, #116	; 0x74
 800649c:	4680      	mov	r8, r0
 800649e:	460c      	mov	r4, r1
 80064a0:	4616      	mov	r6, r2
 80064a2:	d50f      	bpl.n	80064c4 <_svfiprintf_r+0x34>
 80064a4:	690b      	ldr	r3, [r1, #16]
 80064a6:	b96b      	cbnz	r3, 80064c4 <_svfiprintf_r+0x34>
 80064a8:	2140      	movs	r1, #64	; 0x40
 80064aa:	f7ff ff3d 	bl	8006328 <_malloc_r>
 80064ae:	6020      	str	r0, [r4, #0]
 80064b0:	6120      	str	r0, [r4, #16]
 80064b2:	b928      	cbnz	r0, 80064c0 <_svfiprintf_r+0x30>
 80064b4:	230c      	movs	r3, #12
 80064b6:	f8c8 3000 	str.w	r3, [r8]
 80064ba:	f04f 30ff 	mov.w	r0, #4294967295
 80064be:	e0c8      	b.n	8006652 <_svfiprintf_r+0x1c2>
 80064c0:	2340      	movs	r3, #64	; 0x40
 80064c2:	6163      	str	r3, [r4, #20]
 80064c4:	2300      	movs	r3, #0
 80064c6:	9309      	str	r3, [sp, #36]	; 0x24
 80064c8:	2320      	movs	r3, #32
 80064ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064ce:	2330      	movs	r3, #48	; 0x30
 80064d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064d4:	9503      	str	r5, [sp, #12]
 80064d6:	f04f 0b01 	mov.w	fp, #1
 80064da:	4637      	mov	r7, r6
 80064dc:	463d      	mov	r5, r7
 80064de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80064e2:	b10b      	cbz	r3, 80064e8 <_svfiprintf_r+0x58>
 80064e4:	2b25      	cmp	r3, #37	; 0x25
 80064e6:	d13e      	bne.n	8006566 <_svfiprintf_r+0xd6>
 80064e8:	ebb7 0a06 	subs.w	sl, r7, r6
 80064ec:	d00b      	beq.n	8006506 <_svfiprintf_r+0x76>
 80064ee:	4653      	mov	r3, sl
 80064f0:	4632      	mov	r2, r6
 80064f2:	4621      	mov	r1, r4
 80064f4:	4640      	mov	r0, r8
 80064f6:	f7ff ff71 	bl	80063dc <__ssputs_r>
 80064fa:	3001      	adds	r0, #1
 80064fc:	f000 80a4 	beq.w	8006648 <_svfiprintf_r+0x1b8>
 8006500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006502:	4453      	add	r3, sl
 8006504:	9309      	str	r3, [sp, #36]	; 0x24
 8006506:	783b      	ldrb	r3, [r7, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 809d 	beq.w	8006648 <_svfiprintf_r+0x1b8>
 800650e:	2300      	movs	r3, #0
 8006510:	f04f 32ff 	mov.w	r2, #4294967295
 8006514:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006518:	9304      	str	r3, [sp, #16]
 800651a:	9307      	str	r3, [sp, #28]
 800651c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006520:	931a      	str	r3, [sp, #104]	; 0x68
 8006522:	462f      	mov	r7, r5
 8006524:	2205      	movs	r2, #5
 8006526:	f817 1b01 	ldrb.w	r1, [r7], #1
 800652a:	4850      	ldr	r0, [pc, #320]	; (800666c <_svfiprintf_r+0x1dc>)
 800652c:	f7f9 fe60 	bl	80001f0 <memchr>
 8006530:	9b04      	ldr	r3, [sp, #16]
 8006532:	b9d0      	cbnz	r0, 800656a <_svfiprintf_r+0xda>
 8006534:	06d9      	lsls	r1, r3, #27
 8006536:	bf44      	itt	mi
 8006538:	2220      	movmi	r2, #32
 800653a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800653e:	071a      	lsls	r2, r3, #28
 8006540:	bf44      	itt	mi
 8006542:	222b      	movmi	r2, #43	; 0x2b
 8006544:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006548:	782a      	ldrb	r2, [r5, #0]
 800654a:	2a2a      	cmp	r2, #42	; 0x2a
 800654c:	d015      	beq.n	800657a <_svfiprintf_r+0xea>
 800654e:	9a07      	ldr	r2, [sp, #28]
 8006550:	462f      	mov	r7, r5
 8006552:	2000      	movs	r0, #0
 8006554:	250a      	movs	r5, #10
 8006556:	4639      	mov	r1, r7
 8006558:	f811 3b01 	ldrb.w	r3, [r1], #1
 800655c:	3b30      	subs	r3, #48	; 0x30
 800655e:	2b09      	cmp	r3, #9
 8006560:	d94d      	bls.n	80065fe <_svfiprintf_r+0x16e>
 8006562:	b1b8      	cbz	r0, 8006594 <_svfiprintf_r+0x104>
 8006564:	e00f      	b.n	8006586 <_svfiprintf_r+0xf6>
 8006566:	462f      	mov	r7, r5
 8006568:	e7b8      	b.n	80064dc <_svfiprintf_r+0x4c>
 800656a:	4a40      	ldr	r2, [pc, #256]	; (800666c <_svfiprintf_r+0x1dc>)
 800656c:	1a80      	subs	r0, r0, r2
 800656e:	fa0b f000 	lsl.w	r0, fp, r0
 8006572:	4318      	orrs	r0, r3
 8006574:	9004      	str	r0, [sp, #16]
 8006576:	463d      	mov	r5, r7
 8006578:	e7d3      	b.n	8006522 <_svfiprintf_r+0x92>
 800657a:	9a03      	ldr	r2, [sp, #12]
 800657c:	1d11      	adds	r1, r2, #4
 800657e:	6812      	ldr	r2, [r2, #0]
 8006580:	9103      	str	r1, [sp, #12]
 8006582:	2a00      	cmp	r2, #0
 8006584:	db01      	blt.n	800658a <_svfiprintf_r+0xfa>
 8006586:	9207      	str	r2, [sp, #28]
 8006588:	e004      	b.n	8006594 <_svfiprintf_r+0x104>
 800658a:	4252      	negs	r2, r2
 800658c:	f043 0302 	orr.w	r3, r3, #2
 8006590:	9207      	str	r2, [sp, #28]
 8006592:	9304      	str	r3, [sp, #16]
 8006594:	783b      	ldrb	r3, [r7, #0]
 8006596:	2b2e      	cmp	r3, #46	; 0x2e
 8006598:	d10c      	bne.n	80065b4 <_svfiprintf_r+0x124>
 800659a:	787b      	ldrb	r3, [r7, #1]
 800659c:	2b2a      	cmp	r3, #42	; 0x2a
 800659e:	d133      	bne.n	8006608 <_svfiprintf_r+0x178>
 80065a0:	9b03      	ldr	r3, [sp, #12]
 80065a2:	1d1a      	adds	r2, r3, #4
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	9203      	str	r2, [sp, #12]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	bfb8      	it	lt
 80065ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80065b0:	3702      	adds	r7, #2
 80065b2:	9305      	str	r3, [sp, #20]
 80065b4:	4d2e      	ldr	r5, [pc, #184]	; (8006670 <_svfiprintf_r+0x1e0>)
 80065b6:	7839      	ldrb	r1, [r7, #0]
 80065b8:	2203      	movs	r2, #3
 80065ba:	4628      	mov	r0, r5
 80065bc:	f7f9 fe18 	bl	80001f0 <memchr>
 80065c0:	b138      	cbz	r0, 80065d2 <_svfiprintf_r+0x142>
 80065c2:	2340      	movs	r3, #64	; 0x40
 80065c4:	1b40      	subs	r0, r0, r5
 80065c6:	fa03 f000 	lsl.w	r0, r3, r0
 80065ca:	9b04      	ldr	r3, [sp, #16]
 80065cc:	4303      	orrs	r3, r0
 80065ce:	3701      	adds	r7, #1
 80065d0:	9304      	str	r3, [sp, #16]
 80065d2:	7839      	ldrb	r1, [r7, #0]
 80065d4:	4827      	ldr	r0, [pc, #156]	; (8006674 <_svfiprintf_r+0x1e4>)
 80065d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065da:	2206      	movs	r2, #6
 80065dc:	1c7e      	adds	r6, r7, #1
 80065de:	f7f9 fe07 	bl	80001f0 <memchr>
 80065e2:	2800      	cmp	r0, #0
 80065e4:	d038      	beq.n	8006658 <_svfiprintf_r+0x1c8>
 80065e6:	4b24      	ldr	r3, [pc, #144]	; (8006678 <_svfiprintf_r+0x1e8>)
 80065e8:	bb13      	cbnz	r3, 8006630 <_svfiprintf_r+0x1a0>
 80065ea:	9b03      	ldr	r3, [sp, #12]
 80065ec:	3307      	adds	r3, #7
 80065ee:	f023 0307 	bic.w	r3, r3, #7
 80065f2:	3308      	adds	r3, #8
 80065f4:	9303      	str	r3, [sp, #12]
 80065f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065f8:	444b      	add	r3, r9
 80065fa:	9309      	str	r3, [sp, #36]	; 0x24
 80065fc:	e76d      	b.n	80064da <_svfiprintf_r+0x4a>
 80065fe:	fb05 3202 	mla	r2, r5, r2, r3
 8006602:	2001      	movs	r0, #1
 8006604:	460f      	mov	r7, r1
 8006606:	e7a6      	b.n	8006556 <_svfiprintf_r+0xc6>
 8006608:	2300      	movs	r3, #0
 800660a:	3701      	adds	r7, #1
 800660c:	9305      	str	r3, [sp, #20]
 800660e:	4619      	mov	r1, r3
 8006610:	250a      	movs	r5, #10
 8006612:	4638      	mov	r0, r7
 8006614:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006618:	3a30      	subs	r2, #48	; 0x30
 800661a:	2a09      	cmp	r2, #9
 800661c:	d903      	bls.n	8006626 <_svfiprintf_r+0x196>
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0c8      	beq.n	80065b4 <_svfiprintf_r+0x124>
 8006622:	9105      	str	r1, [sp, #20]
 8006624:	e7c6      	b.n	80065b4 <_svfiprintf_r+0x124>
 8006626:	fb05 2101 	mla	r1, r5, r1, r2
 800662a:	2301      	movs	r3, #1
 800662c:	4607      	mov	r7, r0
 800662e:	e7f0      	b.n	8006612 <_svfiprintf_r+0x182>
 8006630:	ab03      	add	r3, sp, #12
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	4622      	mov	r2, r4
 8006636:	4b11      	ldr	r3, [pc, #68]	; (800667c <_svfiprintf_r+0x1ec>)
 8006638:	a904      	add	r1, sp, #16
 800663a:	4640      	mov	r0, r8
 800663c:	f7fe f8b4 	bl	80047a8 <_printf_float>
 8006640:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006644:	4681      	mov	r9, r0
 8006646:	d1d6      	bne.n	80065f6 <_svfiprintf_r+0x166>
 8006648:	89a3      	ldrh	r3, [r4, #12]
 800664a:	065b      	lsls	r3, r3, #25
 800664c:	f53f af35 	bmi.w	80064ba <_svfiprintf_r+0x2a>
 8006650:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006652:	b01d      	add	sp, #116	; 0x74
 8006654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006658:	ab03      	add	r3, sp, #12
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	4622      	mov	r2, r4
 800665e:	4b07      	ldr	r3, [pc, #28]	; (800667c <_svfiprintf_r+0x1ec>)
 8006660:	a904      	add	r1, sp, #16
 8006662:	4640      	mov	r0, r8
 8006664:	f7fe fb56 	bl	8004d14 <_printf_i>
 8006668:	e7ea      	b.n	8006640 <_svfiprintf_r+0x1b0>
 800666a:	bf00      	nop
 800666c:	080072dc 	.word	0x080072dc
 8006670:	080072e2 	.word	0x080072e2
 8006674:	080072e6 	.word	0x080072e6
 8006678:	080047a9 	.word	0x080047a9
 800667c:	080063dd 	.word	0x080063dd

08006680 <_sungetc_r>:
 8006680:	b538      	push	{r3, r4, r5, lr}
 8006682:	1c4b      	adds	r3, r1, #1
 8006684:	4614      	mov	r4, r2
 8006686:	d103      	bne.n	8006690 <_sungetc_r+0x10>
 8006688:	f04f 35ff 	mov.w	r5, #4294967295
 800668c:	4628      	mov	r0, r5
 800668e:	bd38      	pop	{r3, r4, r5, pc}
 8006690:	8993      	ldrh	r3, [r2, #12]
 8006692:	f023 0320 	bic.w	r3, r3, #32
 8006696:	8193      	strh	r3, [r2, #12]
 8006698:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800669a:	6852      	ldr	r2, [r2, #4]
 800669c:	b2cd      	uxtb	r5, r1
 800669e:	b18b      	cbz	r3, 80066c4 <_sungetc_r+0x44>
 80066a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066a2:	4293      	cmp	r3, r2
 80066a4:	dd08      	ble.n	80066b8 <_sungetc_r+0x38>
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	1e5a      	subs	r2, r3, #1
 80066aa:	6022      	str	r2, [r4, #0]
 80066ac:	f803 5c01 	strb.w	r5, [r3, #-1]
 80066b0:	6863      	ldr	r3, [r4, #4]
 80066b2:	3301      	adds	r3, #1
 80066b4:	6063      	str	r3, [r4, #4]
 80066b6:	e7e9      	b.n	800668c <_sungetc_r+0xc>
 80066b8:	4621      	mov	r1, r4
 80066ba:	f000 fc3f 	bl	8006f3c <__submore>
 80066be:	2800      	cmp	r0, #0
 80066c0:	d0f1      	beq.n	80066a6 <_sungetc_r+0x26>
 80066c2:	e7e1      	b.n	8006688 <_sungetc_r+0x8>
 80066c4:	6921      	ldr	r1, [r4, #16]
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	b151      	cbz	r1, 80066e0 <_sungetc_r+0x60>
 80066ca:	4299      	cmp	r1, r3
 80066cc:	d208      	bcs.n	80066e0 <_sungetc_r+0x60>
 80066ce:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80066d2:	42a9      	cmp	r1, r5
 80066d4:	d104      	bne.n	80066e0 <_sungetc_r+0x60>
 80066d6:	3b01      	subs	r3, #1
 80066d8:	3201      	adds	r2, #1
 80066da:	6023      	str	r3, [r4, #0]
 80066dc:	6062      	str	r2, [r4, #4]
 80066de:	e7d5      	b.n	800668c <_sungetc_r+0xc>
 80066e0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80066e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066e8:	6363      	str	r3, [r4, #52]	; 0x34
 80066ea:	2303      	movs	r3, #3
 80066ec:	63a3      	str	r3, [r4, #56]	; 0x38
 80066ee:	4623      	mov	r3, r4
 80066f0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80066f4:	6023      	str	r3, [r4, #0]
 80066f6:	2301      	movs	r3, #1
 80066f8:	e7dc      	b.n	80066b4 <_sungetc_r+0x34>

080066fa <__ssrefill_r>:
 80066fa:	b510      	push	{r4, lr}
 80066fc:	460c      	mov	r4, r1
 80066fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006700:	b169      	cbz	r1, 800671e <__ssrefill_r+0x24>
 8006702:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006706:	4299      	cmp	r1, r3
 8006708:	d001      	beq.n	800670e <__ssrefill_r+0x14>
 800670a:	f7ff fdbf 	bl	800628c <_free_r>
 800670e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006710:	6063      	str	r3, [r4, #4]
 8006712:	2000      	movs	r0, #0
 8006714:	6360      	str	r0, [r4, #52]	; 0x34
 8006716:	b113      	cbz	r3, 800671e <__ssrefill_r+0x24>
 8006718:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800671a:	6023      	str	r3, [r4, #0]
 800671c:	bd10      	pop	{r4, pc}
 800671e:	6923      	ldr	r3, [r4, #16]
 8006720:	6023      	str	r3, [r4, #0]
 8006722:	2300      	movs	r3, #0
 8006724:	6063      	str	r3, [r4, #4]
 8006726:	89a3      	ldrh	r3, [r4, #12]
 8006728:	f043 0320 	orr.w	r3, r3, #32
 800672c:	81a3      	strh	r3, [r4, #12]
 800672e:	f04f 30ff 	mov.w	r0, #4294967295
 8006732:	e7f3      	b.n	800671c <__ssrefill_r+0x22>

08006734 <__ssvfiscanf_r>:
 8006734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006738:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800673c:	460c      	mov	r4, r1
 800673e:	2100      	movs	r1, #0
 8006740:	9144      	str	r1, [sp, #272]	; 0x110
 8006742:	9145      	str	r1, [sp, #276]	; 0x114
 8006744:	499f      	ldr	r1, [pc, #636]	; (80069c4 <__ssvfiscanf_r+0x290>)
 8006746:	91a0      	str	r1, [sp, #640]	; 0x280
 8006748:	f10d 0804 	add.w	r8, sp, #4
 800674c:	499e      	ldr	r1, [pc, #632]	; (80069c8 <__ssvfiscanf_r+0x294>)
 800674e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80069cc <__ssvfiscanf_r+0x298>
 8006752:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006756:	4606      	mov	r6, r0
 8006758:	4692      	mov	sl, r2
 800675a:	91a1      	str	r1, [sp, #644]	; 0x284
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	270a      	movs	r7, #10
 8006760:	f89a 3000 	ldrb.w	r3, [sl]
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 812a 	beq.w	80069be <__ssvfiscanf_r+0x28a>
 800676a:	4655      	mov	r5, sl
 800676c:	f000 fc24 	bl	8006fb8 <__locale_ctype_ptr>
 8006770:	f815 bb01 	ldrb.w	fp, [r5], #1
 8006774:	4458      	add	r0, fp
 8006776:	7843      	ldrb	r3, [r0, #1]
 8006778:	f013 0308 	ands.w	r3, r3, #8
 800677c:	d01c      	beq.n	80067b8 <__ssvfiscanf_r+0x84>
 800677e:	6863      	ldr	r3, [r4, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	dd12      	ble.n	80067aa <__ssvfiscanf_r+0x76>
 8006784:	f000 fc18 	bl	8006fb8 <__locale_ctype_ptr>
 8006788:	6823      	ldr	r3, [r4, #0]
 800678a:	781a      	ldrb	r2, [r3, #0]
 800678c:	4410      	add	r0, r2
 800678e:	7842      	ldrb	r2, [r0, #1]
 8006790:	0712      	lsls	r2, r2, #28
 8006792:	d401      	bmi.n	8006798 <__ssvfiscanf_r+0x64>
 8006794:	46aa      	mov	sl, r5
 8006796:	e7e3      	b.n	8006760 <__ssvfiscanf_r+0x2c>
 8006798:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800679a:	3201      	adds	r2, #1
 800679c:	9245      	str	r2, [sp, #276]	; 0x114
 800679e:	6862      	ldr	r2, [r4, #4]
 80067a0:	3301      	adds	r3, #1
 80067a2:	3a01      	subs	r2, #1
 80067a4:	6062      	str	r2, [r4, #4]
 80067a6:	6023      	str	r3, [r4, #0]
 80067a8:	e7e9      	b.n	800677e <__ssvfiscanf_r+0x4a>
 80067aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80067ac:	4621      	mov	r1, r4
 80067ae:	4630      	mov	r0, r6
 80067b0:	4798      	blx	r3
 80067b2:	2800      	cmp	r0, #0
 80067b4:	d0e6      	beq.n	8006784 <__ssvfiscanf_r+0x50>
 80067b6:	e7ed      	b.n	8006794 <__ssvfiscanf_r+0x60>
 80067b8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80067bc:	f040 8082 	bne.w	80068c4 <__ssvfiscanf_r+0x190>
 80067c0:	9343      	str	r3, [sp, #268]	; 0x10c
 80067c2:	9341      	str	r3, [sp, #260]	; 0x104
 80067c4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80067c8:	2b2a      	cmp	r3, #42	; 0x2a
 80067ca:	d103      	bne.n	80067d4 <__ssvfiscanf_r+0xa0>
 80067cc:	2310      	movs	r3, #16
 80067ce:	9341      	str	r3, [sp, #260]	; 0x104
 80067d0:	f10a 0502 	add.w	r5, sl, #2
 80067d4:	46aa      	mov	sl, r5
 80067d6:	f815 1b01 	ldrb.w	r1, [r5], #1
 80067da:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80067de:	2a09      	cmp	r2, #9
 80067e0:	d922      	bls.n	8006828 <__ssvfiscanf_r+0xf4>
 80067e2:	2203      	movs	r2, #3
 80067e4:	4879      	ldr	r0, [pc, #484]	; (80069cc <__ssvfiscanf_r+0x298>)
 80067e6:	f7f9 fd03 	bl	80001f0 <memchr>
 80067ea:	b138      	cbz	r0, 80067fc <__ssvfiscanf_r+0xc8>
 80067ec:	eba0 0309 	sub.w	r3, r0, r9
 80067f0:	2001      	movs	r0, #1
 80067f2:	4098      	lsls	r0, r3
 80067f4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80067f6:	4318      	orrs	r0, r3
 80067f8:	9041      	str	r0, [sp, #260]	; 0x104
 80067fa:	46aa      	mov	sl, r5
 80067fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006800:	2b67      	cmp	r3, #103	; 0x67
 8006802:	f10a 0501 	add.w	r5, sl, #1
 8006806:	d82b      	bhi.n	8006860 <__ssvfiscanf_r+0x12c>
 8006808:	2b65      	cmp	r3, #101	; 0x65
 800680a:	f080 809f 	bcs.w	800694c <__ssvfiscanf_r+0x218>
 800680e:	2b47      	cmp	r3, #71	; 0x47
 8006810:	d810      	bhi.n	8006834 <__ssvfiscanf_r+0x100>
 8006812:	2b45      	cmp	r3, #69	; 0x45
 8006814:	f080 809a 	bcs.w	800694c <__ssvfiscanf_r+0x218>
 8006818:	2b00      	cmp	r3, #0
 800681a:	d06c      	beq.n	80068f6 <__ssvfiscanf_r+0x1c2>
 800681c:	2b25      	cmp	r3, #37	; 0x25
 800681e:	d051      	beq.n	80068c4 <__ssvfiscanf_r+0x190>
 8006820:	2303      	movs	r3, #3
 8006822:	9347      	str	r3, [sp, #284]	; 0x11c
 8006824:	9742      	str	r7, [sp, #264]	; 0x108
 8006826:	e027      	b.n	8006878 <__ssvfiscanf_r+0x144>
 8006828:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800682a:	fb07 1303 	mla	r3, r7, r3, r1
 800682e:	3b30      	subs	r3, #48	; 0x30
 8006830:	9343      	str	r3, [sp, #268]	; 0x10c
 8006832:	e7cf      	b.n	80067d4 <__ssvfiscanf_r+0xa0>
 8006834:	2b5b      	cmp	r3, #91	; 0x5b
 8006836:	d06a      	beq.n	800690e <__ssvfiscanf_r+0x1da>
 8006838:	d80c      	bhi.n	8006854 <__ssvfiscanf_r+0x120>
 800683a:	2b58      	cmp	r3, #88	; 0x58
 800683c:	d1f0      	bne.n	8006820 <__ssvfiscanf_r+0xec>
 800683e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006844:	9241      	str	r2, [sp, #260]	; 0x104
 8006846:	2210      	movs	r2, #16
 8006848:	9242      	str	r2, [sp, #264]	; 0x108
 800684a:	2b6e      	cmp	r3, #110	; 0x6e
 800684c:	bf8c      	ite	hi
 800684e:	2304      	movhi	r3, #4
 8006850:	2303      	movls	r3, #3
 8006852:	e010      	b.n	8006876 <__ssvfiscanf_r+0x142>
 8006854:	2b63      	cmp	r3, #99	; 0x63
 8006856:	d065      	beq.n	8006924 <__ssvfiscanf_r+0x1f0>
 8006858:	2b64      	cmp	r3, #100	; 0x64
 800685a:	d1e1      	bne.n	8006820 <__ssvfiscanf_r+0xec>
 800685c:	9742      	str	r7, [sp, #264]	; 0x108
 800685e:	e7f4      	b.n	800684a <__ssvfiscanf_r+0x116>
 8006860:	2b70      	cmp	r3, #112	; 0x70
 8006862:	d04b      	beq.n	80068fc <__ssvfiscanf_r+0x1c8>
 8006864:	d826      	bhi.n	80068b4 <__ssvfiscanf_r+0x180>
 8006866:	2b6e      	cmp	r3, #110	; 0x6e
 8006868:	d062      	beq.n	8006930 <__ssvfiscanf_r+0x1fc>
 800686a:	d84c      	bhi.n	8006906 <__ssvfiscanf_r+0x1d2>
 800686c:	2b69      	cmp	r3, #105	; 0x69
 800686e:	d1d7      	bne.n	8006820 <__ssvfiscanf_r+0xec>
 8006870:	2300      	movs	r3, #0
 8006872:	9342      	str	r3, [sp, #264]	; 0x108
 8006874:	2303      	movs	r3, #3
 8006876:	9347      	str	r3, [sp, #284]	; 0x11c
 8006878:	6863      	ldr	r3, [r4, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	dd68      	ble.n	8006950 <__ssvfiscanf_r+0x21c>
 800687e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006880:	0659      	lsls	r1, r3, #25
 8006882:	d407      	bmi.n	8006894 <__ssvfiscanf_r+0x160>
 8006884:	f000 fb98 	bl	8006fb8 <__locale_ctype_ptr>
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	781a      	ldrb	r2, [r3, #0]
 800688c:	4410      	add	r0, r2
 800688e:	7842      	ldrb	r2, [r0, #1]
 8006890:	0712      	lsls	r2, r2, #28
 8006892:	d464      	bmi.n	800695e <__ssvfiscanf_r+0x22a>
 8006894:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006896:	2b02      	cmp	r3, #2
 8006898:	dc73      	bgt.n	8006982 <__ssvfiscanf_r+0x24e>
 800689a:	466b      	mov	r3, sp
 800689c:	4622      	mov	r2, r4
 800689e:	a941      	add	r1, sp, #260	; 0x104
 80068a0:	4630      	mov	r0, r6
 80068a2:	f000 f897 	bl	80069d4 <_scanf_chars>
 80068a6:	2801      	cmp	r0, #1
 80068a8:	f000 8089 	beq.w	80069be <__ssvfiscanf_r+0x28a>
 80068ac:	2802      	cmp	r0, #2
 80068ae:	f47f af71 	bne.w	8006794 <__ssvfiscanf_r+0x60>
 80068b2:	e01d      	b.n	80068f0 <__ssvfiscanf_r+0x1bc>
 80068b4:	2b75      	cmp	r3, #117	; 0x75
 80068b6:	d0d1      	beq.n	800685c <__ssvfiscanf_r+0x128>
 80068b8:	2b78      	cmp	r3, #120	; 0x78
 80068ba:	d0c0      	beq.n	800683e <__ssvfiscanf_r+0x10a>
 80068bc:	2b73      	cmp	r3, #115	; 0x73
 80068be:	d1af      	bne.n	8006820 <__ssvfiscanf_r+0xec>
 80068c0:	2302      	movs	r3, #2
 80068c2:	e7d8      	b.n	8006876 <__ssvfiscanf_r+0x142>
 80068c4:	6863      	ldr	r3, [r4, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	dd0c      	ble.n	80068e4 <__ssvfiscanf_r+0x1b0>
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	781a      	ldrb	r2, [r3, #0]
 80068ce:	455a      	cmp	r2, fp
 80068d0:	d175      	bne.n	80069be <__ssvfiscanf_r+0x28a>
 80068d2:	3301      	adds	r3, #1
 80068d4:	6862      	ldr	r2, [r4, #4]
 80068d6:	6023      	str	r3, [r4, #0]
 80068d8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80068da:	3a01      	subs	r2, #1
 80068dc:	3301      	adds	r3, #1
 80068de:	6062      	str	r2, [r4, #4]
 80068e0:	9345      	str	r3, [sp, #276]	; 0x114
 80068e2:	e757      	b.n	8006794 <__ssvfiscanf_r+0x60>
 80068e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80068e6:	4621      	mov	r1, r4
 80068e8:	4630      	mov	r0, r6
 80068ea:	4798      	blx	r3
 80068ec:	2800      	cmp	r0, #0
 80068ee:	d0ec      	beq.n	80068ca <__ssvfiscanf_r+0x196>
 80068f0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80068f2:	2800      	cmp	r0, #0
 80068f4:	d159      	bne.n	80069aa <__ssvfiscanf_r+0x276>
 80068f6:	f04f 30ff 	mov.w	r0, #4294967295
 80068fa:	e05c      	b.n	80069b6 <__ssvfiscanf_r+0x282>
 80068fc:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80068fe:	f042 0220 	orr.w	r2, r2, #32
 8006902:	9241      	str	r2, [sp, #260]	; 0x104
 8006904:	e79b      	b.n	800683e <__ssvfiscanf_r+0x10a>
 8006906:	2308      	movs	r3, #8
 8006908:	9342      	str	r3, [sp, #264]	; 0x108
 800690a:	2304      	movs	r3, #4
 800690c:	e7b3      	b.n	8006876 <__ssvfiscanf_r+0x142>
 800690e:	4629      	mov	r1, r5
 8006910:	4640      	mov	r0, r8
 8006912:	f000 f9c7 	bl	8006ca4 <__sccl>
 8006916:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800691c:	9341      	str	r3, [sp, #260]	; 0x104
 800691e:	4605      	mov	r5, r0
 8006920:	2301      	movs	r3, #1
 8006922:	e7a8      	b.n	8006876 <__ssvfiscanf_r+0x142>
 8006924:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800692a:	9341      	str	r3, [sp, #260]	; 0x104
 800692c:	2300      	movs	r3, #0
 800692e:	e7a2      	b.n	8006876 <__ssvfiscanf_r+0x142>
 8006930:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006932:	06c3      	lsls	r3, r0, #27
 8006934:	f53f af2e 	bmi.w	8006794 <__ssvfiscanf_r+0x60>
 8006938:	9b00      	ldr	r3, [sp, #0]
 800693a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800693c:	1d19      	adds	r1, r3, #4
 800693e:	9100      	str	r1, [sp, #0]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	07c0      	lsls	r0, r0, #31
 8006944:	bf4c      	ite	mi
 8006946:	801a      	strhmi	r2, [r3, #0]
 8006948:	601a      	strpl	r2, [r3, #0]
 800694a:	e723      	b.n	8006794 <__ssvfiscanf_r+0x60>
 800694c:	2305      	movs	r3, #5
 800694e:	e792      	b.n	8006876 <__ssvfiscanf_r+0x142>
 8006950:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006952:	4621      	mov	r1, r4
 8006954:	4630      	mov	r0, r6
 8006956:	4798      	blx	r3
 8006958:	2800      	cmp	r0, #0
 800695a:	d090      	beq.n	800687e <__ssvfiscanf_r+0x14a>
 800695c:	e7c8      	b.n	80068f0 <__ssvfiscanf_r+0x1bc>
 800695e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006960:	3201      	adds	r2, #1
 8006962:	9245      	str	r2, [sp, #276]	; 0x114
 8006964:	6862      	ldr	r2, [r4, #4]
 8006966:	3a01      	subs	r2, #1
 8006968:	2a00      	cmp	r2, #0
 800696a:	6062      	str	r2, [r4, #4]
 800696c:	dd02      	ble.n	8006974 <__ssvfiscanf_r+0x240>
 800696e:	3301      	adds	r3, #1
 8006970:	6023      	str	r3, [r4, #0]
 8006972:	e787      	b.n	8006884 <__ssvfiscanf_r+0x150>
 8006974:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006976:	4621      	mov	r1, r4
 8006978:	4630      	mov	r0, r6
 800697a:	4798      	blx	r3
 800697c:	2800      	cmp	r0, #0
 800697e:	d081      	beq.n	8006884 <__ssvfiscanf_r+0x150>
 8006980:	e7b6      	b.n	80068f0 <__ssvfiscanf_r+0x1bc>
 8006982:	2b04      	cmp	r3, #4
 8006984:	dc06      	bgt.n	8006994 <__ssvfiscanf_r+0x260>
 8006986:	466b      	mov	r3, sp
 8006988:	4622      	mov	r2, r4
 800698a:	a941      	add	r1, sp, #260	; 0x104
 800698c:	4630      	mov	r0, r6
 800698e:	f000 f885 	bl	8006a9c <_scanf_i>
 8006992:	e788      	b.n	80068a6 <__ssvfiscanf_r+0x172>
 8006994:	4b0e      	ldr	r3, [pc, #56]	; (80069d0 <__ssvfiscanf_r+0x29c>)
 8006996:	2b00      	cmp	r3, #0
 8006998:	f43f aefc 	beq.w	8006794 <__ssvfiscanf_r+0x60>
 800699c:	466b      	mov	r3, sp
 800699e:	4622      	mov	r2, r4
 80069a0:	a941      	add	r1, sp, #260	; 0x104
 80069a2:	4630      	mov	r0, r6
 80069a4:	f3af 8000 	nop.w
 80069a8:	e77d      	b.n	80068a6 <__ssvfiscanf_r+0x172>
 80069aa:	89a3      	ldrh	r3, [r4, #12]
 80069ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 80069b0:	bf18      	it	ne
 80069b2:	f04f 30ff 	movne.w	r0, #4294967295
 80069b6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80069ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069be:	9844      	ldr	r0, [sp, #272]	; 0x110
 80069c0:	e7f9      	b.n	80069b6 <__ssvfiscanf_r+0x282>
 80069c2:	bf00      	nop
 80069c4:	08006681 	.word	0x08006681
 80069c8:	080066fb 	.word	0x080066fb
 80069cc:	080072e2 	.word	0x080072e2
 80069d0:	00000000 	.word	0x00000000

080069d4 <_scanf_chars>:
 80069d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069d8:	4615      	mov	r5, r2
 80069da:	688a      	ldr	r2, [r1, #8]
 80069dc:	4680      	mov	r8, r0
 80069de:	460c      	mov	r4, r1
 80069e0:	b932      	cbnz	r2, 80069f0 <_scanf_chars+0x1c>
 80069e2:	698a      	ldr	r2, [r1, #24]
 80069e4:	2a00      	cmp	r2, #0
 80069e6:	bf14      	ite	ne
 80069e8:	f04f 32ff 	movne.w	r2, #4294967295
 80069ec:	2201      	moveq	r2, #1
 80069ee:	608a      	str	r2, [r1, #8]
 80069f0:	6822      	ldr	r2, [r4, #0]
 80069f2:	06d1      	lsls	r1, r2, #27
 80069f4:	bf5f      	itttt	pl
 80069f6:	681a      	ldrpl	r2, [r3, #0]
 80069f8:	1d11      	addpl	r1, r2, #4
 80069fa:	6019      	strpl	r1, [r3, #0]
 80069fc:	6817      	ldrpl	r7, [r2, #0]
 80069fe:	2600      	movs	r6, #0
 8006a00:	69a3      	ldr	r3, [r4, #24]
 8006a02:	b1db      	cbz	r3, 8006a3c <_scanf_chars+0x68>
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d107      	bne.n	8006a18 <_scanf_chars+0x44>
 8006a08:	682b      	ldr	r3, [r5, #0]
 8006a0a:	6962      	ldr	r2, [r4, #20]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	5cd3      	ldrb	r3, [r2, r3]
 8006a10:	b9a3      	cbnz	r3, 8006a3c <_scanf_chars+0x68>
 8006a12:	2e00      	cmp	r6, #0
 8006a14:	d132      	bne.n	8006a7c <_scanf_chars+0xa8>
 8006a16:	e006      	b.n	8006a26 <_scanf_chars+0x52>
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d007      	beq.n	8006a2c <_scanf_chars+0x58>
 8006a1c:	2e00      	cmp	r6, #0
 8006a1e:	d12d      	bne.n	8006a7c <_scanf_chars+0xa8>
 8006a20:	69a3      	ldr	r3, [r4, #24]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d12a      	bne.n	8006a7c <_scanf_chars+0xa8>
 8006a26:	2001      	movs	r0, #1
 8006a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a2c:	f000 fac4 	bl	8006fb8 <__locale_ctype_ptr>
 8006a30:	682b      	ldr	r3, [r5, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	4418      	add	r0, r3
 8006a36:	7843      	ldrb	r3, [r0, #1]
 8006a38:	071b      	lsls	r3, r3, #28
 8006a3a:	d4ef      	bmi.n	8006a1c <_scanf_chars+0x48>
 8006a3c:	6823      	ldr	r3, [r4, #0]
 8006a3e:	06da      	lsls	r2, r3, #27
 8006a40:	bf5e      	ittt	pl
 8006a42:	682b      	ldrpl	r3, [r5, #0]
 8006a44:	781b      	ldrbpl	r3, [r3, #0]
 8006a46:	703b      	strbpl	r3, [r7, #0]
 8006a48:	682a      	ldr	r2, [r5, #0]
 8006a4a:	686b      	ldr	r3, [r5, #4]
 8006a4c:	f102 0201 	add.w	r2, r2, #1
 8006a50:	602a      	str	r2, [r5, #0]
 8006a52:	68a2      	ldr	r2, [r4, #8]
 8006a54:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a58:	f102 32ff 	add.w	r2, r2, #4294967295
 8006a5c:	606b      	str	r3, [r5, #4]
 8006a5e:	f106 0601 	add.w	r6, r6, #1
 8006a62:	bf58      	it	pl
 8006a64:	3701      	addpl	r7, #1
 8006a66:	60a2      	str	r2, [r4, #8]
 8006a68:	b142      	cbz	r2, 8006a7c <_scanf_chars+0xa8>
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	dcc8      	bgt.n	8006a00 <_scanf_chars+0x2c>
 8006a6e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006a72:	4629      	mov	r1, r5
 8006a74:	4640      	mov	r0, r8
 8006a76:	4798      	blx	r3
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	d0c1      	beq.n	8006a00 <_scanf_chars+0x2c>
 8006a7c:	6823      	ldr	r3, [r4, #0]
 8006a7e:	f013 0310 	ands.w	r3, r3, #16
 8006a82:	d105      	bne.n	8006a90 <_scanf_chars+0xbc>
 8006a84:	68e2      	ldr	r2, [r4, #12]
 8006a86:	3201      	adds	r2, #1
 8006a88:	60e2      	str	r2, [r4, #12]
 8006a8a:	69a2      	ldr	r2, [r4, #24]
 8006a8c:	b102      	cbz	r2, 8006a90 <_scanf_chars+0xbc>
 8006a8e:	703b      	strb	r3, [r7, #0]
 8006a90:	6923      	ldr	r3, [r4, #16]
 8006a92:	441e      	add	r6, r3
 8006a94:	6126      	str	r6, [r4, #16]
 8006a96:	2000      	movs	r0, #0
 8006a98:	e7c6      	b.n	8006a28 <_scanf_chars+0x54>
	...

08006a9c <_scanf_i>:
 8006a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa0:	469a      	mov	sl, r3
 8006aa2:	4b74      	ldr	r3, [pc, #464]	; (8006c74 <_scanf_i+0x1d8>)
 8006aa4:	460c      	mov	r4, r1
 8006aa6:	4683      	mov	fp, r0
 8006aa8:	4616      	mov	r6, r2
 8006aaa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006aae:	b087      	sub	sp, #28
 8006ab0:	ab03      	add	r3, sp, #12
 8006ab2:	68a7      	ldr	r7, [r4, #8]
 8006ab4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006ab8:	4b6f      	ldr	r3, [pc, #444]	; (8006c78 <_scanf_i+0x1dc>)
 8006aba:	69a1      	ldr	r1, [r4, #24]
 8006abc:	4a6f      	ldr	r2, [pc, #444]	; (8006c7c <_scanf_i+0x1e0>)
 8006abe:	2903      	cmp	r1, #3
 8006ac0:	bf08      	it	eq
 8006ac2:	461a      	moveq	r2, r3
 8006ac4:	1e7b      	subs	r3, r7, #1
 8006ac6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8006aca:	bf84      	itt	hi
 8006acc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006ad0:	60a3      	strhi	r3, [r4, #8]
 8006ad2:	6823      	ldr	r3, [r4, #0]
 8006ad4:	9200      	str	r2, [sp, #0]
 8006ad6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006ada:	bf88      	it	hi
 8006adc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006ae0:	f104 091c 	add.w	r9, r4, #28
 8006ae4:	6023      	str	r3, [r4, #0]
 8006ae6:	bf8c      	ite	hi
 8006ae8:	197f      	addhi	r7, r7, r5
 8006aea:	2700      	movls	r7, #0
 8006aec:	464b      	mov	r3, r9
 8006aee:	f04f 0800 	mov.w	r8, #0
 8006af2:	9301      	str	r3, [sp, #4]
 8006af4:	6831      	ldr	r1, [r6, #0]
 8006af6:	ab03      	add	r3, sp, #12
 8006af8:	2202      	movs	r2, #2
 8006afa:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006afe:	7809      	ldrb	r1, [r1, #0]
 8006b00:	f7f9 fb76 	bl	80001f0 <memchr>
 8006b04:	9b01      	ldr	r3, [sp, #4]
 8006b06:	b330      	cbz	r0, 8006b56 <_scanf_i+0xba>
 8006b08:	f1b8 0f01 	cmp.w	r8, #1
 8006b0c:	d15a      	bne.n	8006bc4 <_scanf_i+0x128>
 8006b0e:	6862      	ldr	r2, [r4, #4]
 8006b10:	b92a      	cbnz	r2, 8006b1e <_scanf_i+0x82>
 8006b12:	6822      	ldr	r2, [r4, #0]
 8006b14:	2108      	movs	r1, #8
 8006b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b1a:	6061      	str	r1, [r4, #4]
 8006b1c:	6022      	str	r2, [r4, #0]
 8006b1e:	6822      	ldr	r2, [r4, #0]
 8006b20:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006b24:	6022      	str	r2, [r4, #0]
 8006b26:	68a2      	ldr	r2, [r4, #8]
 8006b28:	1e51      	subs	r1, r2, #1
 8006b2a:	60a1      	str	r1, [r4, #8]
 8006b2c:	b19a      	cbz	r2, 8006b56 <_scanf_i+0xba>
 8006b2e:	6832      	ldr	r2, [r6, #0]
 8006b30:	1c51      	adds	r1, r2, #1
 8006b32:	6031      	str	r1, [r6, #0]
 8006b34:	7812      	ldrb	r2, [r2, #0]
 8006b36:	701a      	strb	r2, [r3, #0]
 8006b38:	1c5d      	adds	r5, r3, #1
 8006b3a:	6873      	ldr	r3, [r6, #4]
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	6073      	str	r3, [r6, #4]
 8006b42:	dc07      	bgt.n	8006b54 <_scanf_i+0xb8>
 8006b44:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006b48:	4631      	mov	r1, r6
 8006b4a:	4658      	mov	r0, fp
 8006b4c:	4798      	blx	r3
 8006b4e:	2800      	cmp	r0, #0
 8006b50:	f040 8086 	bne.w	8006c60 <_scanf_i+0x1c4>
 8006b54:	462b      	mov	r3, r5
 8006b56:	f108 0801 	add.w	r8, r8, #1
 8006b5a:	f1b8 0f03 	cmp.w	r8, #3
 8006b5e:	d1c8      	bne.n	8006af2 <_scanf_i+0x56>
 8006b60:	6862      	ldr	r2, [r4, #4]
 8006b62:	b90a      	cbnz	r2, 8006b68 <_scanf_i+0xcc>
 8006b64:	220a      	movs	r2, #10
 8006b66:	6062      	str	r2, [r4, #4]
 8006b68:	6862      	ldr	r2, [r4, #4]
 8006b6a:	4945      	ldr	r1, [pc, #276]	; (8006c80 <_scanf_i+0x1e4>)
 8006b6c:	6960      	ldr	r0, [r4, #20]
 8006b6e:	9301      	str	r3, [sp, #4]
 8006b70:	1a89      	subs	r1, r1, r2
 8006b72:	f000 f897 	bl	8006ca4 <__sccl>
 8006b76:	9b01      	ldr	r3, [sp, #4]
 8006b78:	f04f 0800 	mov.w	r8, #0
 8006b7c:	461d      	mov	r5, r3
 8006b7e:	68a3      	ldr	r3, [r4, #8]
 8006b80:	6822      	ldr	r2, [r4, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d03a      	beq.n	8006bfc <_scanf_i+0x160>
 8006b86:	6831      	ldr	r1, [r6, #0]
 8006b88:	6960      	ldr	r0, [r4, #20]
 8006b8a:	f891 c000 	ldrb.w	ip, [r1]
 8006b8e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006b92:	2800      	cmp	r0, #0
 8006b94:	d032      	beq.n	8006bfc <_scanf_i+0x160>
 8006b96:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006b9a:	d121      	bne.n	8006be0 <_scanf_i+0x144>
 8006b9c:	0510      	lsls	r0, r2, #20
 8006b9e:	d51f      	bpl.n	8006be0 <_scanf_i+0x144>
 8006ba0:	f108 0801 	add.w	r8, r8, #1
 8006ba4:	b117      	cbz	r7, 8006bac <_scanf_i+0x110>
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	3f01      	subs	r7, #1
 8006baa:	60a3      	str	r3, [r4, #8]
 8006bac:	6873      	ldr	r3, [r6, #4]
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	6073      	str	r3, [r6, #4]
 8006bb4:	dd1b      	ble.n	8006bee <_scanf_i+0x152>
 8006bb6:	6833      	ldr	r3, [r6, #0]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	6033      	str	r3, [r6, #0]
 8006bbc:	68a3      	ldr	r3, [r4, #8]
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	60a3      	str	r3, [r4, #8]
 8006bc2:	e7dc      	b.n	8006b7e <_scanf_i+0xe2>
 8006bc4:	f1b8 0f02 	cmp.w	r8, #2
 8006bc8:	d1ad      	bne.n	8006b26 <_scanf_i+0x8a>
 8006bca:	6822      	ldr	r2, [r4, #0]
 8006bcc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006bd0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006bd4:	d1bf      	bne.n	8006b56 <_scanf_i+0xba>
 8006bd6:	2110      	movs	r1, #16
 8006bd8:	6061      	str	r1, [r4, #4]
 8006bda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bde:	e7a1      	b.n	8006b24 <_scanf_i+0x88>
 8006be0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006be4:	6022      	str	r2, [r4, #0]
 8006be6:	780b      	ldrb	r3, [r1, #0]
 8006be8:	702b      	strb	r3, [r5, #0]
 8006bea:	3501      	adds	r5, #1
 8006bec:	e7de      	b.n	8006bac <_scanf_i+0x110>
 8006bee:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006bf2:	4631      	mov	r1, r6
 8006bf4:	4658      	mov	r0, fp
 8006bf6:	4798      	blx	r3
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	d0df      	beq.n	8006bbc <_scanf_i+0x120>
 8006bfc:	6823      	ldr	r3, [r4, #0]
 8006bfe:	05d9      	lsls	r1, r3, #23
 8006c00:	d50c      	bpl.n	8006c1c <_scanf_i+0x180>
 8006c02:	454d      	cmp	r5, r9
 8006c04:	d908      	bls.n	8006c18 <_scanf_i+0x17c>
 8006c06:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006c0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c0e:	4632      	mov	r2, r6
 8006c10:	4658      	mov	r0, fp
 8006c12:	4798      	blx	r3
 8006c14:	1e6f      	subs	r7, r5, #1
 8006c16:	463d      	mov	r5, r7
 8006c18:	454d      	cmp	r5, r9
 8006c1a:	d029      	beq.n	8006c70 <_scanf_i+0x1d4>
 8006c1c:	6822      	ldr	r2, [r4, #0]
 8006c1e:	f012 0210 	ands.w	r2, r2, #16
 8006c22:	d113      	bne.n	8006c4c <_scanf_i+0x1b0>
 8006c24:	702a      	strb	r2, [r5, #0]
 8006c26:	6863      	ldr	r3, [r4, #4]
 8006c28:	9e00      	ldr	r6, [sp, #0]
 8006c2a:	4649      	mov	r1, r9
 8006c2c:	4658      	mov	r0, fp
 8006c2e:	47b0      	blx	r6
 8006c30:	f8da 3000 	ldr.w	r3, [sl]
 8006c34:	6821      	ldr	r1, [r4, #0]
 8006c36:	1d1a      	adds	r2, r3, #4
 8006c38:	f8ca 2000 	str.w	r2, [sl]
 8006c3c:	f011 0f20 	tst.w	r1, #32
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	d010      	beq.n	8006c66 <_scanf_i+0x1ca>
 8006c44:	6018      	str	r0, [r3, #0]
 8006c46:	68e3      	ldr	r3, [r4, #12]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	60e3      	str	r3, [r4, #12]
 8006c4c:	eba5 0509 	sub.w	r5, r5, r9
 8006c50:	44a8      	add	r8, r5
 8006c52:	6925      	ldr	r5, [r4, #16]
 8006c54:	4445      	add	r5, r8
 8006c56:	6125      	str	r5, [r4, #16]
 8006c58:	2000      	movs	r0, #0
 8006c5a:	b007      	add	sp, #28
 8006c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c60:	f04f 0800 	mov.w	r8, #0
 8006c64:	e7ca      	b.n	8006bfc <_scanf_i+0x160>
 8006c66:	07ca      	lsls	r2, r1, #31
 8006c68:	bf4c      	ite	mi
 8006c6a:	8018      	strhmi	r0, [r3, #0]
 8006c6c:	6018      	strpl	r0, [r3, #0]
 8006c6e:	e7ea      	b.n	8006c46 <_scanf_i+0x1aa>
 8006c70:	2001      	movs	r0, #1
 8006c72:	e7f2      	b.n	8006c5a <_scanf_i+0x1be>
 8006c74:	0800717c 	.word	0x0800717c
 8006c78:	08006e01 	.word	0x08006e01
 8006c7c:	08006f19 	.word	0x08006f19
 8006c80:	080072fd 	.word	0x080072fd

08006c84 <_sbrk_r>:
 8006c84:	b538      	push	{r3, r4, r5, lr}
 8006c86:	4c06      	ldr	r4, [pc, #24]	; (8006ca0 <_sbrk_r+0x1c>)
 8006c88:	2300      	movs	r3, #0
 8006c8a:	4605      	mov	r5, r0
 8006c8c:	4608      	mov	r0, r1
 8006c8e:	6023      	str	r3, [r4, #0]
 8006c90:	f7fa fd68 	bl	8001764 <_sbrk>
 8006c94:	1c43      	adds	r3, r0, #1
 8006c96:	d102      	bne.n	8006c9e <_sbrk_r+0x1a>
 8006c98:	6823      	ldr	r3, [r4, #0]
 8006c9a:	b103      	cbz	r3, 8006c9e <_sbrk_r+0x1a>
 8006c9c:	602b      	str	r3, [r5, #0]
 8006c9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ca0:	200003b8 	.word	0x200003b8

08006ca4 <__sccl>:
 8006ca4:	b570      	push	{r4, r5, r6, lr}
 8006ca6:	780b      	ldrb	r3, [r1, #0]
 8006ca8:	2b5e      	cmp	r3, #94	; 0x5e
 8006caa:	bf13      	iteet	ne
 8006cac:	1c4a      	addne	r2, r1, #1
 8006cae:	1c8a      	addeq	r2, r1, #2
 8006cb0:	784b      	ldrbeq	r3, [r1, #1]
 8006cb2:	2100      	movne	r1, #0
 8006cb4:	bf08      	it	eq
 8006cb6:	2101      	moveq	r1, #1
 8006cb8:	1e44      	subs	r4, r0, #1
 8006cba:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8006cbe:	f804 1f01 	strb.w	r1, [r4, #1]!
 8006cc2:	42ac      	cmp	r4, r5
 8006cc4:	d1fb      	bne.n	8006cbe <__sccl+0x1a>
 8006cc6:	b913      	cbnz	r3, 8006cce <__sccl+0x2a>
 8006cc8:	3a01      	subs	r2, #1
 8006cca:	4610      	mov	r0, r2
 8006ccc:	bd70      	pop	{r4, r5, r6, pc}
 8006cce:	f081 0401 	eor.w	r4, r1, #1
 8006cd2:	54c4      	strb	r4, [r0, r3]
 8006cd4:	1c51      	adds	r1, r2, #1
 8006cd6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8006cda:	2d2d      	cmp	r5, #45	; 0x2d
 8006cdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8006ce0:	460a      	mov	r2, r1
 8006ce2:	d006      	beq.n	8006cf2 <__sccl+0x4e>
 8006ce4:	2d5d      	cmp	r5, #93	; 0x5d
 8006ce6:	d0f0      	beq.n	8006cca <__sccl+0x26>
 8006ce8:	b90d      	cbnz	r5, 8006cee <__sccl+0x4a>
 8006cea:	4632      	mov	r2, r6
 8006cec:	e7ed      	b.n	8006cca <__sccl+0x26>
 8006cee:	462b      	mov	r3, r5
 8006cf0:	e7ef      	b.n	8006cd2 <__sccl+0x2e>
 8006cf2:	780e      	ldrb	r6, [r1, #0]
 8006cf4:	2e5d      	cmp	r6, #93	; 0x5d
 8006cf6:	d0fa      	beq.n	8006cee <__sccl+0x4a>
 8006cf8:	42b3      	cmp	r3, r6
 8006cfa:	dcf8      	bgt.n	8006cee <__sccl+0x4a>
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	429e      	cmp	r6, r3
 8006d00:	54c4      	strb	r4, [r0, r3]
 8006d02:	dcfb      	bgt.n	8006cfc <__sccl+0x58>
 8006d04:	3102      	adds	r1, #2
 8006d06:	e7e6      	b.n	8006cd6 <__sccl+0x32>

08006d08 <_strtol_l.isra.0>:
 8006d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d0c:	4680      	mov	r8, r0
 8006d0e:	4689      	mov	r9, r1
 8006d10:	4692      	mov	sl, r2
 8006d12:	461e      	mov	r6, r3
 8006d14:	460f      	mov	r7, r1
 8006d16:	463d      	mov	r5, r7
 8006d18:	9808      	ldr	r0, [sp, #32]
 8006d1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d1e:	f000 f947 	bl	8006fb0 <__locale_ctype_ptr_l>
 8006d22:	4420      	add	r0, r4
 8006d24:	7843      	ldrb	r3, [r0, #1]
 8006d26:	f013 0308 	ands.w	r3, r3, #8
 8006d2a:	d132      	bne.n	8006d92 <_strtol_l.isra.0+0x8a>
 8006d2c:	2c2d      	cmp	r4, #45	; 0x2d
 8006d2e:	d132      	bne.n	8006d96 <_strtol_l.isra.0+0x8e>
 8006d30:	787c      	ldrb	r4, [r7, #1]
 8006d32:	1cbd      	adds	r5, r7, #2
 8006d34:	2201      	movs	r2, #1
 8006d36:	2e00      	cmp	r6, #0
 8006d38:	d05d      	beq.n	8006df6 <_strtol_l.isra.0+0xee>
 8006d3a:	2e10      	cmp	r6, #16
 8006d3c:	d109      	bne.n	8006d52 <_strtol_l.isra.0+0x4a>
 8006d3e:	2c30      	cmp	r4, #48	; 0x30
 8006d40:	d107      	bne.n	8006d52 <_strtol_l.isra.0+0x4a>
 8006d42:	782b      	ldrb	r3, [r5, #0]
 8006d44:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006d48:	2b58      	cmp	r3, #88	; 0x58
 8006d4a:	d14f      	bne.n	8006dec <_strtol_l.isra.0+0xe4>
 8006d4c:	786c      	ldrb	r4, [r5, #1]
 8006d4e:	2610      	movs	r6, #16
 8006d50:	3502      	adds	r5, #2
 8006d52:	2a00      	cmp	r2, #0
 8006d54:	bf14      	ite	ne
 8006d56:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006d5a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006d5e:	2700      	movs	r7, #0
 8006d60:	fbb1 fcf6 	udiv	ip, r1, r6
 8006d64:	4638      	mov	r0, r7
 8006d66:	fb06 1e1c 	mls	lr, r6, ip, r1
 8006d6a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006d6e:	2b09      	cmp	r3, #9
 8006d70:	d817      	bhi.n	8006da2 <_strtol_l.isra.0+0x9a>
 8006d72:	461c      	mov	r4, r3
 8006d74:	42a6      	cmp	r6, r4
 8006d76:	dd23      	ble.n	8006dc0 <_strtol_l.isra.0+0xb8>
 8006d78:	1c7b      	adds	r3, r7, #1
 8006d7a:	d007      	beq.n	8006d8c <_strtol_l.isra.0+0x84>
 8006d7c:	4584      	cmp	ip, r0
 8006d7e:	d31c      	bcc.n	8006dba <_strtol_l.isra.0+0xb2>
 8006d80:	d101      	bne.n	8006d86 <_strtol_l.isra.0+0x7e>
 8006d82:	45a6      	cmp	lr, r4
 8006d84:	db19      	blt.n	8006dba <_strtol_l.isra.0+0xb2>
 8006d86:	fb00 4006 	mla	r0, r0, r6, r4
 8006d8a:	2701      	movs	r7, #1
 8006d8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d90:	e7eb      	b.n	8006d6a <_strtol_l.isra.0+0x62>
 8006d92:	462f      	mov	r7, r5
 8006d94:	e7bf      	b.n	8006d16 <_strtol_l.isra.0+0xe>
 8006d96:	2c2b      	cmp	r4, #43	; 0x2b
 8006d98:	bf04      	itt	eq
 8006d9a:	1cbd      	addeq	r5, r7, #2
 8006d9c:	787c      	ldrbeq	r4, [r7, #1]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	e7c9      	b.n	8006d36 <_strtol_l.isra.0+0x2e>
 8006da2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006da6:	2b19      	cmp	r3, #25
 8006da8:	d801      	bhi.n	8006dae <_strtol_l.isra.0+0xa6>
 8006daa:	3c37      	subs	r4, #55	; 0x37
 8006dac:	e7e2      	b.n	8006d74 <_strtol_l.isra.0+0x6c>
 8006dae:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006db2:	2b19      	cmp	r3, #25
 8006db4:	d804      	bhi.n	8006dc0 <_strtol_l.isra.0+0xb8>
 8006db6:	3c57      	subs	r4, #87	; 0x57
 8006db8:	e7dc      	b.n	8006d74 <_strtol_l.isra.0+0x6c>
 8006dba:	f04f 37ff 	mov.w	r7, #4294967295
 8006dbe:	e7e5      	b.n	8006d8c <_strtol_l.isra.0+0x84>
 8006dc0:	1c7b      	adds	r3, r7, #1
 8006dc2:	d108      	bne.n	8006dd6 <_strtol_l.isra.0+0xce>
 8006dc4:	2322      	movs	r3, #34	; 0x22
 8006dc6:	f8c8 3000 	str.w	r3, [r8]
 8006dca:	4608      	mov	r0, r1
 8006dcc:	f1ba 0f00 	cmp.w	sl, #0
 8006dd0:	d107      	bne.n	8006de2 <_strtol_l.isra.0+0xda>
 8006dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dd6:	b102      	cbz	r2, 8006dda <_strtol_l.isra.0+0xd2>
 8006dd8:	4240      	negs	r0, r0
 8006dda:	f1ba 0f00 	cmp.w	sl, #0
 8006dde:	d0f8      	beq.n	8006dd2 <_strtol_l.isra.0+0xca>
 8006de0:	b10f      	cbz	r7, 8006de6 <_strtol_l.isra.0+0xde>
 8006de2:	f105 39ff 	add.w	r9, r5, #4294967295
 8006de6:	f8ca 9000 	str.w	r9, [sl]
 8006dea:	e7f2      	b.n	8006dd2 <_strtol_l.isra.0+0xca>
 8006dec:	2430      	movs	r4, #48	; 0x30
 8006dee:	2e00      	cmp	r6, #0
 8006df0:	d1af      	bne.n	8006d52 <_strtol_l.isra.0+0x4a>
 8006df2:	2608      	movs	r6, #8
 8006df4:	e7ad      	b.n	8006d52 <_strtol_l.isra.0+0x4a>
 8006df6:	2c30      	cmp	r4, #48	; 0x30
 8006df8:	d0a3      	beq.n	8006d42 <_strtol_l.isra.0+0x3a>
 8006dfa:	260a      	movs	r6, #10
 8006dfc:	e7a9      	b.n	8006d52 <_strtol_l.isra.0+0x4a>
	...

08006e00 <_strtol_r>:
 8006e00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e02:	4c06      	ldr	r4, [pc, #24]	; (8006e1c <_strtol_r+0x1c>)
 8006e04:	4d06      	ldr	r5, [pc, #24]	; (8006e20 <_strtol_r+0x20>)
 8006e06:	6824      	ldr	r4, [r4, #0]
 8006e08:	6a24      	ldr	r4, [r4, #32]
 8006e0a:	2c00      	cmp	r4, #0
 8006e0c:	bf08      	it	eq
 8006e0e:	462c      	moveq	r4, r5
 8006e10:	9400      	str	r4, [sp, #0]
 8006e12:	f7ff ff79 	bl	8006d08 <_strtol_l.isra.0>
 8006e16:	b003      	add	sp, #12
 8006e18:	bd30      	pop	{r4, r5, pc}
 8006e1a:	bf00      	nop
 8006e1c:	2000000c 	.word	0x2000000c
 8006e20:	20000070 	.word	0x20000070

08006e24 <_strtoul_l.isra.0>:
 8006e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e28:	4680      	mov	r8, r0
 8006e2a:	4689      	mov	r9, r1
 8006e2c:	4692      	mov	sl, r2
 8006e2e:	461e      	mov	r6, r3
 8006e30:	460f      	mov	r7, r1
 8006e32:	463d      	mov	r5, r7
 8006e34:	9808      	ldr	r0, [sp, #32]
 8006e36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006e3a:	f000 f8b9 	bl	8006fb0 <__locale_ctype_ptr_l>
 8006e3e:	4420      	add	r0, r4
 8006e40:	7843      	ldrb	r3, [r0, #1]
 8006e42:	f013 0308 	ands.w	r3, r3, #8
 8006e46:	d130      	bne.n	8006eaa <_strtoul_l.isra.0+0x86>
 8006e48:	2c2d      	cmp	r4, #45	; 0x2d
 8006e4a:	d130      	bne.n	8006eae <_strtoul_l.isra.0+0x8a>
 8006e4c:	787c      	ldrb	r4, [r7, #1]
 8006e4e:	1cbd      	adds	r5, r7, #2
 8006e50:	2101      	movs	r1, #1
 8006e52:	2e00      	cmp	r6, #0
 8006e54:	d05c      	beq.n	8006f10 <_strtoul_l.isra.0+0xec>
 8006e56:	2e10      	cmp	r6, #16
 8006e58:	d109      	bne.n	8006e6e <_strtoul_l.isra.0+0x4a>
 8006e5a:	2c30      	cmp	r4, #48	; 0x30
 8006e5c:	d107      	bne.n	8006e6e <_strtoul_l.isra.0+0x4a>
 8006e5e:	782b      	ldrb	r3, [r5, #0]
 8006e60:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006e64:	2b58      	cmp	r3, #88	; 0x58
 8006e66:	d14e      	bne.n	8006f06 <_strtoul_l.isra.0+0xe2>
 8006e68:	786c      	ldrb	r4, [r5, #1]
 8006e6a:	2610      	movs	r6, #16
 8006e6c:	3502      	adds	r5, #2
 8006e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e72:	2300      	movs	r3, #0
 8006e74:	fbb2 f2f6 	udiv	r2, r2, r6
 8006e78:	fb06 fc02 	mul.w	ip, r6, r2
 8006e7c:	ea6f 0c0c 	mvn.w	ip, ip
 8006e80:	4618      	mov	r0, r3
 8006e82:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006e86:	2f09      	cmp	r7, #9
 8006e88:	d817      	bhi.n	8006eba <_strtoul_l.isra.0+0x96>
 8006e8a:	463c      	mov	r4, r7
 8006e8c:	42a6      	cmp	r6, r4
 8006e8e:	dd23      	ble.n	8006ed8 <_strtoul_l.isra.0+0xb4>
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	db1e      	blt.n	8006ed2 <_strtoul_l.isra.0+0xae>
 8006e94:	4282      	cmp	r2, r0
 8006e96:	d31c      	bcc.n	8006ed2 <_strtoul_l.isra.0+0xae>
 8006e98:	d101      	bne.n	8006e9e <_strtoul_l.isra.0+0x7a>
 8006e9a:	45a4      	cmp	ip, r4
 8006e9c:	db19      	blt.n	8006ed2 <_strtoul_l.isra.0+0xae>
 8006e9e:	fb00 4006 	mla	r0, r0, r6, r4
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ea8:	e7eb      	b.n	8006e82 <_strtoul_l.isra.0+0x5e>
 8006eaa:	462f      	mov	r7, r5
 8006eac:	e7c1      	b.n	8006e32 <_strtoul_l.isra.0+0xe>
 8006eae:	2c2b      	cmp	r4, #43	; 0x2b
 8006eb0:	bf04      	itt	eq
 8006eb2:	1cbd      	addeq	r5, r7, #2
 8006eb4:	787c      	ldrbeq	r4, [r7, #1]
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	e7cb      	b.n	8006e52 <_strtoul_l.isra.0+0x2e>
 8006eba:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006ebe:	2f19      	cmp	r7, #25
 8006ec0:	d801      	bhi.n	8006ec6 <_strtoul_l.isra.0+0xa2>
 8006ec2:	3c37      	subs	r4, #55	; 0x37
 8006ec4:	e7e2      	b.n	8006e8c <_strtoul_l.isra.0+0x68>
 8006ec6:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006eca:	2f19      	cmp	r7, #25
 8006ecc:	d804      	bhi.n	8006ed8 <_strtoul_l.isra.0+0xb4>
 8006ece:	3c57      	subs	r4, #87	; 0x57
 8006ed0:	e7dc      	b.n	8006e8c <_strtoul_l.isra.0+0x68>
 8006ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ed6:	e7e5      	b.n	8006ea4 <_strtoul_l.isra.0+0x80>
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	da09      	bge.n	8006ef0 <_strtoul_l.isra.0+0xcc>
 8006edc:	2322      	movs	r3, #34	; 0x22
 8006ede:	f8c8 3000 	str.w	r3, [r8]
 8006ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee6:	f1ba 0f00 	cmp.w	sl, #0
 8006eea:	d107      	bne.n	8006efc <_strtoul_l.isra.0+0xd8>
 8006eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ef0:	b101      	cbz	r1, 8006ef4 <_strtoul_l.isra.0+0xd0>
 8006ef2:	4240      	negs	r0, r0
 8006ef4:	f1ba 0f00 	cmp.w	sl, #0
 8006ef8:	d0f8      	beq.n	8006eec <_strtoul_l.isra.0+0xc8>
 8006efa:	b10b      	cbz	r3, 8006f00 <_strtoul_l.isra.0+0xdc>
 8006efc:	f105 39ff 	add.w	r9, r5, #4294967295
 8006f00:	f8ca 9000 	str.w	r9, [sl]
 8006f04:	e7f2      	b.n	8006eec <_strtoul_l.isra.0+0xc8>
 8006f06:	2430      	movs	r4, #48	; 0x30
 8006f08:	2e00      	cmp	r6, #0
 8006f0a:	d1b0      	bne.n	8006e6e <_strtoul_l.isra.0+0x4a>
 8006f0c:	2608      	movs	r6, #8
 8006f0e:	e7ae      	b.n	8006e6e <_strtoul_l.isra.0+0x4a>
 8006f10:	2c30      	cmp	r4, #48	; 0x30
 8006f12:	d0a4      	beq.n	8006e5e <_strtoul_l.isra.0+0x3a>
 8006f14:	260a      	movs	r6, #10
 8006f16:	e7aa      	b.n	8006e6e <_strtoul_l.isra.0+0x4a>

08006f18 <_strtoul_r>:
 8006f18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f1a:	4c06      	ldr	r4, [pc, #24]	; (8006f34 <_strtoul_r+0x1c>)
 8006f1c:	4d06      	ldr	r5, [pc, #24]	; (8006f38 <_strtoul_r+0x20>)
 8006f1e:	6824      	ldr	r4, [r4, #0]
 8006f20:	6a24      	ldr	r4, [r4, #32]
 8006f22:	2c00      	cmp	r4, #0
 8006f24:	bf08      	it	eq
 8006f26:	462c      	moveq	r4, r5
 8006f28:	9400      	str	r4, [sp, #0]
 8006f2a:	f7ff ff7b 	bl	8006e24 <_strtoul_l.isra.0>
 8006f2e:	b003      	add	sp, #12
 8006f30:	bd30      	pop	{r4, r5, pc}
 8006f32:	bf00      	nop
 8006f34:	2000000c 	.word	0x2000000c
 8006f38:	20000070 	.word	0x20000070

08006f3c <__submore>:
 8006f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f40:	460c      	mov	r4, r1
 8006f42:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006f44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f48:	4299      	cmp	r1, r3
 8006f4a:	d11d      	bne.n	8006f88 <__submore+0x4c>
 8006f4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f50:	f7ff f9ea 	bl	8006328 <_malloc_r>
 8006f54:	b918      	cbnz	r0, 8006f5e <__submore+0x22>
 8006f56:	f04f 30ff 	mov.w	r0, #4294967295
 8006f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f62:	63a3      	str	r3, [r4, #56]	; 0x38
 8006f64:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006f68:	6360      	str	r0, [r4, #52]	; 0x34
 8006f6a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006f6e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006f72:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006f76:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006f7a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006f7e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006f82:	6020      	str	r0, [r4, #0]
 8006f84:	2000      	movs	r0, #0
 8006f86:	e7e8      	b.n	8006f5a <__submore+0x1e>
 8006f88:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006f8a:	0077      	lsls	r7, r6, #1
 8006f8c:	463a      	mov	r2, r7
 8006f8e:	f000 f84e 	bl	800702e <_realloc_r>
 8006f92:	4605      	mov	r5, r0
 8006f94:	2800      	cmp	r0, #0
 8006f96:	d0de      	beq.n	8006f56 <__submore+0x1a>
 8006f98:	eb00 0806 	add.w	r8, r0, r6
 8006f9c:	4601      	mov	r1, r0
 8006f9e:	4632      	mov	r2, r6
 8006fa0:	4640      	mov	r0, r8
 8006fa2:	f7fe fe7f 	bl	8005ca4 <memcpy>
 8006fa6:	f8c4 8000 	str.w	r8, [r4]
 8006faa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006fae:	e7e9      	b.n	8006f84 <__submore+0x48>

08006fb0 <__locale_ctype_ptr_l>:
 8006fb0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006fb4:	4770      	bx	lr
	...

08006fb8 <__locale_ctype_ptr>:
 8006fb8:	4b04      	ldr	r3, [pc, #16]	; (8006fcc <__locale_ctype_ptr+0x14>)
 8006fba:	4a05      	ldr	r2, [pc, #20]	; (8006fd0 <__locale_ctype_ptr+0x18>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6a1b      	ldr	r3, [r3, #32]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	bf08      	it	eq
 8006fc4:	4613      	moveq	r3, r2
 8006fc6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8006fca:	4770      	bx	lr
 8006fcc:	2000000c 	.word	0x2000000c
 8006fd0:	20000070 	.word	0x20000070

08006fd4 <__ascii_mbtowc>:
 8006fd4:	b082      	sub	sp, #8
 8006fd6:	b901      	cbnz	r1, 8006fda <__ascii_mbtowc+0x6>
 8006fd8:	a901      	add	r1, sp, #4
 8006fda:	b142      	cbz	r2, 8006fee <__ascii_mbtowc+0x1a>
 8006fdc:	b14b      	cbz	r3, 8006ff2 <__ascii_mbtowc+0x1e>
 8006fde:	7813      	ldrb	r3, [r2, #0]
 8006fe0:	600b      	str	r3, [r1, #0]
 8006fe2:	7812      	ldrb	r2, [r2, #0]
 8006fe4:	1c10      	adds	r0, r2, #0
 8006fe6:	bf18      	it	ne
 8006fe8:	2001      	movne	r0, #1
 8006fea:	b002      	add	sp, #8
 8006fec:	4770      	bx	lr
 8006fee:	4610      	mov	r0, r2
 8006ff0:	e7fb      	b.n	8006fea <__ascii_mbtowc+0x16>
 8006ff2:	f06f 0001 	mvn.w	r0, #1
 8006ff6:	e7f8      	b.n	8006fea <__ascii_mbtowc+0x16>

08006ff8 <memmove>:
 8006ff8:	4288      	cmp	r0, r1
 8006ffa:	b510      	push	{r4, lr}
 8006ffc:	eb01 0302 	add.w	r3, r1, r2
 8007000:	d807      	bhi.n	8007012 <memmove+0x1a>
 8007002:	1e42      	subs	r2, r0, #1
 8007004:	4299      	cmp	r1, r3
 8007006:	d00a      	beq.n	800701e <memmove+0x26>
 8007008:	f811 4b01 	ldrb.w	r4, [r1], #1
 800700c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007010:	e7f8      	b.n	8007004 <memmove+0xc>
 8007012:	4283      	cmp	r3, r0
 8007014:	d9f5      	bls.n	8007002 <memmove+0xa>
 8007016:	1881      	adds	r1, r0, r2
 8007018:	1ad2      	subs	r2, r2, r3
 800701a:	42d3      	cmn	r3, r2
 800701c:	d100      	bne.n	8007020 <memmove+0x28>
 800701e:	bd10      	pop	{r4, pc}
 8007020:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007024:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007028:	e7f7      	b.n	800701a <memmove+0x22>

0800702a <__malloc_lock>:
 800702a:	4770      	bx	lr

0800702c <__malloc_unlock>:
 800702c:	4770      	bx	lr

0800702e <_realloc_r>:
 800702e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007030:	4607      	mov	r7, r0
 8007032:	4614      	mov	r4, r2
 8007034:	460e      	mov	r6, r1
 8007036:	b921      	cbnz	r1, 8007042 <_realloc_r+0x14>
 8007038:	4611      	mov	r1, r2
 800703a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800703e:	f7ff b973 	b.w	8006328 <_malloc_r>
 8007042:	b922      	cbnz	r2, 800704e <_realloc_r+0x20>
 8007044:	f7ff f922 	bl	800628c <_free_r>
 8007048:	4625      	mov	r5, r4
 800704a:	4628      	mov	r0, r5
 800704c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800704e:	f000 f821 	bl	8007094 <_malloc_usable_size_r>
 8007052:	42a0      	cmp	r0, r4
 8007054:	d20f      	bcs.n	8007076 <_realloc_r+0x48>
 8007056:	4621      	mov	r1, r4
 8007058:	4638      	mov	r0, r7
 800705a:	f7ff f965 	bl	8006328 <_malloc_r>
 800705e:	4605      	mov	r5, r0
 8007060:	2800      	cmp	r0, #0
 8007062:	d0f2      	beq.n	800704a <_realloc_r+0x1c>
 8007064:	4631      	mov	r1, r6
 8007066:	4622      	mov	r2, r4
 8007068:	f7fe fe1c 	bl	8005ca4 <memcpy>
 800706c:	4631      	mov	r1, r6
 800706e:	4638      	mov	r0, r7
 8007070:	f7ff f90c 	bl	800628c <_free_r>
 8007074:	e7e9      	b.n	800704a <_realloc_r+0x1c>
 8007076:	4635      	mov	r5, r6
 8007078:	e7e7      	b.n	800704a <_realloc_r+0x1c>

0800707a <__ascii_wctomb>:
 800707a:	b149      	cbz	r1, 8007090 <__ascii_wctomb+0x16>
 800707c:	2aff      	cmp	r2, #255	; 0xff
 800707e:	bf85      	ittet	hi
 8007080:	238a      	movhi	r3, #138	; 0x8a
 8007082:	6003      	strhi	r3, [r0, #0]
 8007084:	700a      	strbls	r2, [r1, #0]
 8007086:	f04f 30ff 	movhi.w	r0, #4294967295
 800708a:	bf98      	it	ls
 800708c:	2001      	movls	r0, #1
 800708e:	4770      	bx	lr
 8007090:	4608      	mov	r0, r1
 8007092:	4770      	bx	lr

08007094 <_malloc_usable_size_r>:
 8007094:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007098:	1f18      	subs	r0, r3, #4
 800709a:	2b00      	cmp	r3, #0
 800709c:	bfbc      	itt	lt
 800709e:	580b      	ldrlt	r3, [r1, r0]
 80070a0:	18c0      	addlt	r0, r0, r3
 80070a2:	4770      	bx	lr

080070a4 <_init>:
 80070a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a6:	bf00      	nop
 80070a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070aa:	bc08      	pop	{r3}
 80070ac:	469e      	mov	lr, r3
 80070ae:	4770      	bx	lr

080070b0 <_fini>:
 80070b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b2:	bf00      	nop
 80070b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070b6:	bc08      	pop	{r3}
 80070b8:	469e      	mov	lr, r3
 80070ba:	4770      	bx	lr
